{
  "address": "0xa76e2A2885eA13DaBcEb57568AFA66eF136073f0",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_domain",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AddressNotRegisteredError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NameAlreadyRegisteredError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NameNotRegisteredError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyControllerError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyNFTOwnerError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAddressNotAvailableError",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "resolvedAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "NameRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldResolvedAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newResolvedAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ResolveAddressUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "resolvedAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "TokenDataUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "controller",
      "outputs": [
        {
          "internalType": "contract UsernameController",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "domain",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "getDisplayName",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getTokenData",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint96",
              "name": "mintTimestamp",
              "type": "uint96"
            },
            {
              "internalType": "uint96",
              "name": "duration",
              "type": "uint96"
            },
            {
              "internalType": "address",
              "name": "resolvedAddress",
              "type": "address"
            }
          ],
          "internalType": "struct UsernameNFT.TokenData",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "isAvailable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "isExpired",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "resolvedAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "uint96",
          "name": "duration",
          "type": "uint96"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "nameExpirationTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "nameToTokenId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "resolveAddress",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "resolveName",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "resolvedAddressToName",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_controller",
          "type": "address"
        }
      ],
      "name": "setController",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokenData",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "mintTimestamp",
          "type": "uint96"
        },
        {
          "internalType": "uint96",
          "name": "duration",
          "type": "uint96"
        },
        {
          "internalType": "address",
          "name": "resolvedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "newResolvedAddress",
          "type": "address"
        }
      ],
      "name": "updateResolveAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint96",
              "name": "mintTimestamp",
              "type": "uint96"
            },
            {
              "internalType": "uint96",
              "name": "duration",
              "type": "uint96"
            },
            {
              "internalType": "address",
              "name": "resolvedAddress",
              "type": "address"
            }
          ],
          "internalType": "struct UsernameNFT.TokenData",
          "name": "data",
          "type": "tuple"
        }
      ],
      "name": "updateTokenData",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x184ff51e4ace51a8f096d961f5ccc4f7707b13669ca6abced94d0cefcb5884b2",
  "receipt": {
    "to": null,
    "from": "0xf0d5D3FcBFc0009121A630EC8AB67e012117f40c",
    "contractAddress": "0xa76e2A2885eA13DaBcEb57568AFA66eF136073f0",
    "transactionIndex": 0,
    "gasUsed": "3923795",
    "logsBloom": "0x
    "blockHash": "0xa3174882addac73f0592cb46b7c02e54531fdec0c33b9f5f989d3e0e5d7a4c9b",
    "transactionHash": "0x184ff51e4ace51a8f096d961f5ccc4f7707b13669ca6abced94d0cefcb5884b2",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 645365,
        "transactionHash": "0x184ff51e4ace51a8f096d961f5ccc4f7707b13669ca6abced94d0cefcb5884b2",
        "address": "0xa76e2A2885eA13DaBcEb57568AFA66eF136073f0",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f0d5d3fcbfc0009121a630ec8ab67e012117f40c"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xa3174882addac73f0592cb46b7c02e54531fdec0c33b9f5f989d3e0e5d7a4c9b"
      }
    ],
    "blockNumber": 645365,
    "cumulativeGasUsed": "3923795",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "UsernameNFT",
    "UNFT",
    "example"
  ],
  "numDeployments": 1,
  "solcInputHash": "e2144f9ce7f34d3a9687be4c4c130b81",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_domain\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AddressNotRegisteredError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NameAlreadyRegisteredError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NameNotRegisteredError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyControllerError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyNFTOwnerError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddressNotAvailableError\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"resolvedAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"NameRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldResolvedAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newResolvedAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ResolveAddressUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"resolvedAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"TokenDataUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"contract UsernameController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"domain\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getDisplayName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getTokenData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint96\",\"name\":\"mintTimestamp\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"duration\",\"type\":\"uint96\"},{\"internalType\":\"address\",\"name\":\"resolvedAddress\",\"type\":\"address\"}],\"internalType\":\"struct UsernameNFT.TokenData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"isAvailable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"isExpired\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"resolvedAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint96\",\"name\":\"duration\",\"type\":\"uint96\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"nameExpirationTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"nameToTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"resolveAddress\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"resolveName\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"resolvedAddressToName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenData\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"mintTimestamp\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"duration\",\"type\":\"uint96\"},{\"internalType\":\"address\",\"name\":\"resolvedAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"newResolvedAddress\",\"type\":\"address\"}],\"name\":\"updateResolveAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint96\",\"name\":\"mintTimestamp\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"duration\",\"type\":\"uint96\"},{\"internalType\":\"address\",\"name\":\"resolvedAddress\",\"type\":\"address\"}],\"internalType\":\"struct UsernameNFT.TokenData\",\"name\":\"data\",\"type\":\"tuple\"}],\"name\":\"updateTokenData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"UsernameNFT contract represents the NFTs for usernames. Each NFT represents a unique username and has an associated resolved address. The contract also stores the duration for which the username is registered and the timestamp when it was minted or renewed.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"getDisplayName(address)\":{\"details\":\"This function first resolves the address to its associated username using the resolveAddress function. If an active, valid username is found, it appends the domain to the username and returns the resulting display name. Example: If the username is \\\"alice\\\" and the domain is \\\"example\\\", the display name will be \\\"alice.example\\\".\",\"params\":{\"addr\":\"The address to be resolved.\"},\"returns\":{\"_0\":\"string memory The display name associated with the address.\"}},\"getTokenData(uint256)\":{\"params\":{\"tokenId\":\"The token ID of the NFT.\"},\"returns\":{\"_0\":\"TokenData memory The token data of the NFT.\"}},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"isAvailable(string)\":{\"details\":\"This function checks if the given name is not registered or if the associated tokenId is expired.\",\"params\":{\"name\":\"The name to be checked for availability.\"},\"returns\":{\"_0\":\"bool True if the name is available, false otherwise.\"}},\"isExpired(uint256)\":{\"details\":\"This function checks if the current block timestamp is greater than the expiration timestamp of the given tokenId.\",\"params\":{\"tokenId\":\"The token ID of the NFT.\"},\"returns\":{\"_0\":\"bool True if the tokenId is expired, false otherwise.\"}},\"mint(address,address,string,uint96)\":{\"details\":\"This function can only be called by the controller contract. It checks if the name is available and mints a new NFT with the given token data if it is.\",\"params\":{\"duration\":\"The duration for which the username will be registered.\",\"name\":\"The desired username.\",\"resolvedAddress\":\"The address that the username will resolve to.\",\"to\":\"The address of the user who will own the NFT.\"},\"returns\":{\"_0\":\"uint256 The token ID of the minted NFT.\"}},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"nameExpirationTime(uint256)\":{\"details\":\"This function calculates the expiration timestamp by adding the duration to the mint timestamp of the given tokenId.\",\"params\":{\"tokenId\":\"The token ID of the NFT.\"},\"returns\":{\"_0\":\"uint The Unix timestamp of when the tokenId expires.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"resolveAddress(address)\":{\"details\":\"This function returns the username associated with a given resolved address if it is registered and not expired. Otherwise, it returns an empty string.\",\"params\":{\"addr\":\"The owner address to be resolved.\"},\"returns\":{\"_0\":\"string memory The username associated with the resolved address.\"}},\"resolveName(string)\":{\"details\":\"This function returns the resolved address for a given username if it is registered and not expired. Otherwise, it returns the zero address.\",\"params\":{\"name\":\"The username to be resolved.\"},\"returns\":{\"_0\":\"address The resolved address of the username.\"}},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"setController(address)\":{\"details\":\"The controller contract is responsible for minting and updating token data.\",\"params\":{\"_controller\":\"address - The address of the controller contract.\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"This function returns the URI of the NFT by converting the tokenId to a string. The URI can be used to retrieve metadata associated with the NFT, such as a JSON file containing information about the NFT's properties, image, and other attributes. Example: If the tokenId is 1, the returned URI will be \\\"1\\\".\",\"params\":{\"tokenId\":\"The token ID of the NFT.\"},\"returns\":{\"_0\":\"string memory The URI of the NFT.\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateResolveAddress(uint256,address)\":{\"details\":\"This function can only be called by the owner of the NFT. It updates the resolved address for the given tokenId with the provided newResolvedAddress.\",\"params\":{\"newResolvedAddress\":\"The new resolved address.\",\"tokenId\":\"The token ID of the NFT to be updated.\"}},\"updateTokenData(uint256,(uint96,uint96,address))\":{\"details\":\"This function can only be called by the controller contract. It updates the token data for the given tokenId with the provided data.\",\"params\":{\"data\":\"The updated token data.\",\"tokenId\":\"The token ID of the NFT to be updated.\"}}},\"title\":\"UsernameNFT\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getDisplayName(address)\":{\"notice\":\"Returns the display name for a given address.\"},\"getTokenData(uint256)\":{\"notice\":\"Returns the token data for a given NFT.\"},\"isAvailable(string)\":{\"notice\":\"Checks if a given name is available for registration.\"},\"isExpired(uint256)\":{\"notice\":\"Checks if a given tokenId is expired.\"},\"mint(address,address,string,uint96)\":{\"notice\":\"Mints a new NFT for a given name if it's available.\"},\"nameExpirationTime(uint256)\":{\"notice\":\"Returns the Unix timestamp of when the given tokenId expires.\"},\"resolveAddress(address)\":{\"notice\":\"Returns the username for a given resolved address.\"},\"resolveName(string)\":{\"notice\":\"Returns the resolved address for a given username.\"},\"setController(address)\":{\"notice\":\"Sets the controller contract address.\"},\"tokenURI(uint256)\":{\"notice\":\"Returns the URI for a given NFT.\"},\"updateResolveAddress(uint256,address)\":{\"notice\":\"Updates the resolved address for a given NFT.\"},\"updateTokenData(uint256,(uint96,uint96,address))\":{\"notice\":\"Updates the token data for a given NFT.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/UsernameNFT.sol\":\"UsernameNFT\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.2) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\\n     * that `ownerOf(tokenId)` is `a`.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\\n        _balances[account] += amount;\\n    }\\n}\\n\",\"keccak256\":\"0x1e854874c68bec05be100dc0092cb5fbbc71253d370ae98ddef248bbfc3fe118\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/extensions/ERC721URIStorage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is ERC721 {\\n    using Strings for uint256;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_burn}. This override additionally checks to see if a\\n     * token-specific URI was set for the token, and if so, it deletes the token URI from\\n     * the storage mapping.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5c3501c1b70fcfc64417e9da5cc6a3597191baa354781e508e1e14cc0e50a038\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"abdk-libraries-solidity/ABDKMath64x64.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-4-Clause\\n/*\\n * ABDK Math 64.64 Smart Contract Library.  Copyright \\u00a9 2019 by ABDK Consulting.\\n * Author: Mikhail Vladimirov <mikhail.vladimirov@gmail.com>\\n */\\npragma solidity ^0.8.0;\\n\\n/**\\n * Smart contract library of mathematical functions operating with signed\\n * 64.64-bit fixed point numbers.  Signed 64.64-bit fixed point number is\\n * basically a simple fraction whose numerator is signed 128-bit integer and\\n * denominator is 2^64.  As long as denominator is always the same, there is no\\n * need to store it, thus in Solidity signed 64.64-bit fixed point numbers are\\n * represented by int128 type holding only the numerator.\\n */\\nlibrary ABDKMath64x64 {\\n  /*\\n   * Minimum value signed 64.64-bit fixed point number may have. \\n   */\\n  int128 private constant MIN_64x64 = -0x80000000000000000000000000000000;\\n\\n  /*\\n   * Maximum value signed 64.64-bit fixed point number may have. \\n   */\\n  int128 private constant MAX_64x64 = 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n  /**\\n   * Convert signed 256-bit integer number into signed 64.64-bit fixed point\\n   * number.  Revert on overflow.\\n   *\\n   * @param x signed 256-bit integer number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function fromInt (int256 x) internal pure returns (int128) {\\n    unchecked {\\n      require (x >= -0x8000000000000000 && x <= 0x7FFFFFFFFFFFFFFF);\\n      return int128 (x << 64);\\n    }\\n  }\\n\\n  /**\\n   * Convert signed 64.64 fixed point number into signed 64-bit integer number\\n   * rounding down.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64-bit integer number\\n   */\\n  function toInt (int128 x) internal pure returns (int64) {\\n    unchecked {\\n      return int64 (x >> 64);\\n    }\\n  }\\n\\n  /**\\n   * Convert unsigned 256-bit integer number into signed 64.64-bit fixed point\\n   * number.  Revert on overflow.\\n   *\\n   * @param x unsigned 256-bit integer number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function fromUInt (uint256 x) internal pure returns (int128) {\\n    unchecked {\\n      require (x <= 0x7FFFFFFFFFFFFFFF);\\n      return int128 (int256 (x << 64));\\n    }\\n  }\\n\\n  /**\\n   * Convert signed 64.64 fixed point number into unsigned 64-bit integer\\n   * number rounding down.  Revert on underflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return unsigned 64-bit integer number\\n   */\\n  function toUInt (int128 x) internal pure returns (uint64) {\\n    unchecked {\\n      require (x >= 0);\\n      return uint64 (uint128 (x >> 64));\\n    }\\n  }\\n\\n  /**\\n   * Convert signed 128.128 fixed point number into signed 64.64-bit fixed point\\n   * number rounding down.  Revert on overflow.\\n   *\\n   * @param x signed 128.128-bin fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function from128x128 (int256 x) internal pure returns (int128) {\\n    unchecked {\\n      int256 result = x >> 64;\\n      require (result >= MIN_64x64 && result <= MAX_64x64);\\n      return int128 (result);\\n    }\\n  }\\n\\n  /**\\n   * Convert signed 64.64 fixed point number into signed 128.128 fixed point\\n   * number.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 128.128 fixed point number\\n   */\\n  function to128x128 (int128 x) internal pure returns (int256) {\\n    unchecked {\\n      return int256 (x) << 64;\\n    }\\n  }\\n\\n  /**\\n   * Calculate x + y.  Revert on overflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @param y signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function add (int128 x, int128 y) internal pure returns (int128) {\\n    unchecked {\\n      int256 result = int256(x) + y;\\n      require (result >= MIN_64x64 && result <= MAX_64x64);\\n      return int128 (result);\\n    }\\n  }\\n\\n  /**\\n   * Calculate x - y.  Revert on overflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @param y signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function sub (int128 x, int128 y) internal pure returns (int128) {\\n    unchecked {\\n      int256 result = int256(x) - y;\\n      require (result >= MIN_64x64 && result <= MAX_64x64);\\n      return int128 (result);\\n    }\\n  }\\n\\n  /**\\n   * Calculate x * y rounding down.  Revert on overflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @param y signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function mul (int128 x, int128 y) internal pure returns (int128) {\\n    unchecked {\\n      int256 result = int256(x) * y >> 64;\\n      require (result >= MIN_64x64 && result <= MAX_64x64);\\n      return int128 (result);\\n    }\\n  }\\n\\n  /**\\n   * Calculate x * y rounding towards zero, where x is signed 64.64 fixed point\\n   * number and y is signed 256-bit integer number.  Revert on overflow.\\n   *\\n   * @param x signed 64.64 fixed point number\\n   * @param y signed 256-bit integer number\\n   * @return signed 256-bit integer number\\n   */\\n  function muli (int128 x, int256 y) internal pure returns (int256) {\\n    unchecked {\\n      if (x == MIN_64x64) {\\n        require (y >= -0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF &&\\n          y <= 0x1000000000000000000000000000000000000000000000000);\\n        return -y << 63;\\n      } else {\\n        bool negativeResult = false;\\n        if (x < 0) {\\n          x = -x;\\n          negativeResult = true;\\n        }\\n        if (y < 0) {\\n          y = -y; // We rely on overflow behavior here\\n          negativeResult = !negativeResult;\\n        }\\n        uint256 absoluteResult = mulu (x, uint256 (y));\\n        if (negativeResult) {\\n          require (absoluteResult <=\\n            0x8000000000000000000000000000000000000000000000000000000000000000);\\n          return -int256 (absoluteResult); // We rely on overflow behavior here\\n        } else {\\n          require (absoluteResult <=\\n            0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n          return int256 (absoluteResult);\\n        }\\n      }\\n    }\\n  }\\n\\n  /**\\n   * Calculate x * y rounding down, where x is signed 64.64 fixed point number\\n   * and y is unsigned 256-bit integer number.  Revert on overflow.\\n   *\\n   * @param x signed 64.64 fixed point number\\n   * @param y unsigned 256-bit integer number\\n   * @return unsigned 256-bit integer number\\n   */\\n  function mulu (int128 x, uint256 y) internal pure returns (uint256) {\\n    unchecked {\\n      if (y == 0) return 0;\\n\\n      require (x >= 0);\\n\\n      uint256 lo = (uint256 (int256 (x)) * (y & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)) >> 64;\\n      uint256 hi = uint256 (int256 (x)) * (y >> 128);\\n\\n      require (hi <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n      hi <<= 64;\\n\\n      require (hi <=\\n        0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF - lo);\\n      return hi + lo;\\n    }\\n  }\\n\\n  /**\\n   * Calculate x / y rounding towards zero.  Revert on overflow or when y is\\n   * zero.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @param y signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function div (int128 x, int128 y) internal pure returns (int128) {\\n    unchecked {\\n      require (y != 0);\\n      int256 result = (int256 (x) << 64) / y;\\n      require (result >= MIN_64x64 && result <= MAX_64x64);\\n      return int128 (result);\\n    }\\n  }\\n\\n  /**\\n   * Calculate x / y rounding towards zero, where x and y are signed 256-bit\\n   * integer numbers.  Revert on overflow or when y is zero.\\n   *\\n   * @param x signed 256-bit integer number\\n   * @param y signed 256-bit integer number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function divi (int256 x, int256 y) internal pure returns (int128) {\\n    unchecked {\\n      require (y != 0);\\n\\n      bool negativeResult = false;\\n      if (x < 0) {\\n        x = -x; // We rely on overflow behavior here\\n        negativeResult = true;\\n      }\\n      if (y < 0) {\\n        y = -y; // We rely on overflow behavior here\\n        negativeResult = !negativeResult;\\n      }\\n      uint128 absoluteResult = divuu (uint256 (x), uint256 (y));\\n      if (negativeResult) {\\n        require (absoluteResult <= 0x80000000000000000000000000000000);\\n        return -int128 (absoluteResult); // We rely on overflow behavior here\\n      } else {\\n        require (absoluteResult <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n        return int128 (absoluteResult); // We rely on overflow behavior here\\n      }\\n    }\\n  }\\n\\n  /**\\n   * Calculate x / y rounding towards zero, where x and y are unsigned 256-bit\\n   * integer numbers.  Revert on overflow or when y is zero.\\n   *\\n   * @param x unsigned 256-bit integer number\\n   * @param y unsigned 256-bit integer number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function divu (uint256 x, uint256 y) internal pure returns (int128) {\\n    unchecked {\\n      require (y != 0);\\n      uint128 result = divuu (x, y);\\n      require (result <= uint128 (MAX_64x64));\\n      return int128 (result);\\n    }\\n  }\\n\\n  /**\\n   * Calculate -x.  Revert on overflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function neg (int128 x) internal pure returns (int128) {\\n    unchecked {\\n      require (x != MIN_64x64);\\n      return -x;\\n    }\\n  }\\n\\n  /**\\n   * Calculate |x|.  Revert on overflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function abs (int128 x) internal pure returns (int128) {\\n    unchecked {\\n      require (x != MIN_64x64);\\n      return x < 0 ? -x : x;\\n    }\\n  }\\n\\n  /**\\n   * Calculate 1 / x rounding towards zero.  Revert on overflow or when x is\\n   * zero.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function inv (int128 x) internal pure returns (int128) {\\n    unchecked {\\n      require (x != 0);\\n      int256 result = int256 (0x100000000000000000000000000000000) / x;\\n      require (result >= MIN_64x64 && result <= MAX_64x64);\\n      return int128 (result);\\n    }\\n  }\\n\\n  /**\\n   * Calculate arithmetics average of x and y, i.e. (x + y) / 2 rounding down.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @param y signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function avg (int128 x, int128 y) internal pure returns (int128) {\\n    unchecked {\\n      return int128 ((int256 (x) + int256 (y)) >> 1);\\n    }\\n  }\\n\\n  /**\\n   * Calculate geometric average of x and y, i.e. sqrt (x * y) rounding down.\\n   * Revert on overflow or in case x * y is negative.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @param y signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function gavg (int128 x, int128 y) internal pure returns (int128) {\\n    unchecked {\\n      int256 m = int256 (x) * int256 (y);\\n      require (m >= 0);\\n      require (m <\\n          0x4000000000000000000000000000000000000000000000000000000000000000);\\n      return int128 (sqrtu (uint256 (m)));\\n    }\\n  }\\n\\n  /**\\n   * Calculate x^y assuming 0^0 is 1, where x is signed 64.64 fixed point number\\n   * and y is unsigned 256-bit integer number.  Revert on overflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @param y uint256 value\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function pow (int128 x, uint256 y) internal pure returns (int128) {\\n    unchecked {\\n      bool negative = x < 0 && y & 1 == 1;\\n\\n      uint256 absX = uint128 (x < 0 ? -x : x);\\n      uint256 absResult;\\n      absResult = 0x100000000000000000000000000000000;\\n\\n      if (absX <= 0x10000000000000000) {\\n        absX <<= 63;\\n        while (y != 0) {\\n          if (y & 0x1 != 0) {\\n            absResult = absResult * absX >> 127;\\n          }\\n          absX = absX * absX >> 127;\\n\\n          if (y & 0x2 != 0) {\\n            absResult = absResult * absX >> 127;\\n          }\\n          absX = absX * absX >> 127;\\n\\n          if (y & 0x4 != 0) {\\n            absResult = absResult * absX >> 127;\\n          }\\n          absX = absX * absX >> 127;\\n\\n          if (y & 0x8 != 0) {\\n            absResult = absResult * absX >> 127;\\n          }\\n          absX = absX * absX >> 127;\\n\\n          y >>= 4;\\n        }\\n\\n        absResult >>= 64;\\n      } else {\\n        uint256 absXShift = 63;\\n        if (absX < 0x1000000000000000000000000) { absX <<= 32; absXShift -= 32; }\\n        if (absX < 0x10000000000000000000000000000) { absX <<= 16; absXShift -= 16; }\\n        if (absX < 0x1000000000000000000000000000000) { absX <<= 8; absXShift -= 8; }\\n        if (absX < 0x10000000000000000000000000000000) { absX <<= 4; absXShift -= 4; }\\n        if (absX < 0x40000000000000000000000000000000) { absX <<= 2; absXShift -= 2; }\\n        if (absX < 0x80000000000000000000000000000000) { absX <<= 1; absXShift -= 1; }\\n\\n        uint256 resultShift = 0;\\n        while (y != 0) {\\n          require (absXShift < 64);\\n\\n          if (y & 0x1 != 0) {\\n            absResult = absResult * absX >> 127;\\n            resultShift += absXShift;\\n            if (absResult > 0x100000000000000000000000000000000) {\\n              absResult >>= 1;\\n              resultShift += 1;\\n            }\\n          }\\n          absX = absX * absX >> 127;\\n          absXShift <<= 1;\\n          if (absX >= 0x100000000000000000000000000000000) {\\n              absX >>= 1;\\n              absXShift += 1;\\n          }\\n\\n          y >>= 1;\\n        }\\n\\n        require (resultShift < 64);\\n        absResult >>= 64 - resultShift;\\n      }\\n      int256 result = negative ? -int256 (absResult) : int256 (absResult);\\n      require (result >= MIN_64x64 && result <= MAX_64x64);\\n      return int128 (result);\\n    }\\n  }\\n\\n  /**\\n   * Calculate sqrt (x) rounding down.  Revert if x < 0.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function sqrt (int128 x) internal pure returns (int128) {\\n    unchecked {\\n      require (x >= 0);\\n      return int128 (sqrtu (uint256 (int256 (x)) << 64));\\n    }\\n  }\\n\\n  /**\\n   * Calculate binary logarithm of x.  Revert if x <= 0.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function log_2 (int128 x) internal pure returns (int128) {\\n    unchecked {\\n      require (x > 0);\\n\\n      int256 msb = 0;\\n      int256 xc = x;\\n      if (xc >= 0x10000000000000000) { xc >>= 64; msb += 64; }\\n      if (xc >= 0x100000000) { xc >>= 32; msb += 32; }\\n      if (xc >= 0x10000) { xc >>= 16; msb += 16; }\\n      if (xc >= 0x100) { xc >>= 8; msb += 8; }\\n      if (xc >= 0x10) { xc >>= 4; msb += 4; }\\n      if (xc >= 0x4) { xc >>= 2; msb += 2; }\\n      if (xc >= 0x2) msb += 1;  // No need to shift xc anymore\\n\\n      int256 result = msb - 64 << 64;\\n      uint256 ux = uint256 (int256 (x)) << uint256 (127 - msb);\\n      for (int256 bit = 0x8000000000000000; bit > 0; bit >>= 1) {\\n        ux *= ux;\\n        uint256 b = ux >> 255;\\n        ux >>= 127 + b;\\n        result += bit * int256 (b);\\n      }\\n\\n      return int128 (result);\\n    }\\n  }\\n\\n  /**\\n   * Calculate natural logarithm of x.  Revert if x <= 0.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function ln (int128 x) internal pure returns (int128) {\\n    unchecked {\\n      require (x > 0);\\n\\n      return int128 (int256 (\\n          uint256 (int256 (log_2 (x))) * 0xB17217F7D1CF79ABC9E3B39803F2F6AF >> 128));\\n    }\\n  }\\n\\n  /**\\n   * Calculate binary exponent of x.  Revert on overflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function exp_2 (int128 x) internal pure returns (int128) {\\n    unchecked {\\n      require (x < 0x400000000000000000); // Overflow\\n\\n      if (x < -0x400000000000000000) return 0; // Underflow\\n\\n      uint256 result = 0x80000000000000000000000000000000;\\n\\n      if (x & 0x8000000000000000 > 0)\\n        result = result * 0x16A09E667F3BCC908B2FB1366EA957D3E >> 128;\\n      if (x & 0x4000000000000000 > 0)\\n        result = result * 0x1306FE0A31B7152DE8D5A46305C85EDEC >> 128;\\n      if (x & 0x2000000000000000 > 0)\\n        result = result * 0x1172B83C7D517ADCDF7C8C50EB14A791F >> 128;\\n      if (x & 0x1000000000000000 > 0)\\n        result = result * 0x10B5586CF9890F6298B92B71842A98363 >> 128;\\n      if (x & 0x800000000000000 > 0)\\n        result = result * 0x1059B0D31585743AE7C548EB68CA417FD >> 128;\\n      if (x & 0x400000000000000 > 0)\\n        result = result * 0x102C9A3E778060EE6F7CACA4F7A29BDE8 >> 128;\\n      if (x & 0x200000000000000 > 0)\\n        result = result * 0x10163DA9FB33356D84A66AE336DCDFA3F >> 128;\\n      if (x & 0x100000000000000 > 0)\\n        result = result * 0x100B1AFA5ABCBED6129AB13EC11DC9543 >> 128;\\n      if (x & 0x80000000000000 > 0)\\n        result = result * 0x10058C86DA1C09EA1FF19D294CF2F679B >> 128;\\n      if (x & 0x40000000000000 > 0)\\n        result = result * 0x1002C605E2E8CEC506D21BFC89A23A00F >> 128;\\n      if (x & 0x20000000000000 > 0)\\n        result = result * 0x100162F3904051FA128BCA9C55C31E5DF >> 128;\\n      if (x & 0x10000000000000 > 0)\\n        result = result * 0x1000B175EFFDC76BA38E31671CA939725 >> 128;\\n      if (x & 0x8000000000000 > 0)\\n        result = result * 0x100058BA01FB9F96D6CACD4B180917C3D >> 128;\\n      if (x & 0x4000000000000 > 0)\\n        result = result * 0x10002C5CC37DA9491D0985C348C68E7B3 >> 128;\\n      if (x & 0x2000000000000 > 0)\\n        result = result * 0x1000162E525EE054754457D5995292026 >> 128;\\n      if (x & 0x1000000000000 > 0)\\n        result = result * 0x10000B17255775C040618BF4A4ADE83FC >> 128;\\n      if (x & 0x800000000000 > 0)\\n        result = result * 0x1000058B91B5BC9AE2EED81E9B7D4CFAB >> 128;\\n      if (x & 0x400000000000 > 0)\\n        result = result * 0x100002C5C89D5EC6CA4D7C8ACC017B7C9 >> 128;\\n      if (x & 0x200000000000 > 0)\\n        result = result * 0x10000162E43F4F831060E02D839A9D16D >> 128;\\n      if (x & 0x100000000000 > 0)\\n        result = result * 0x100000B1721BCFC99D9F890EA06911763 >> 128;\\n      if (x & 0x80000000000 > 0)\\n        result = result * 0x10000058B90CF1E6D97F9CA14DBCC1628 >> 128;\\n      if (x & 0x40000000000 > 0)\\n        result = result * 0x1000002C5C863B73F016468F6BAC5CA2B >> 128;\\n      if (x & 0x20000000000 > 0)\\n        result = result * 0x100000162E430E5A18F6119E3C02282A5 >> 128;\\n      if (x & 0x10000000000 > 0)\\n        result = result * 0x1000000B1721835514B86E6D96EFD1BFE >> 128;\\n      if (x & 0x8000000000 > 0)\\n        result = result * 0x100000058B90C0B48C6BE5DF846C5B2EF >> 128;\\n      if (x & 0x4000000000 > 0)\\n        result = result * 0x10000002C5C8601CC6B9E94213C72737A >> 128;\\n      if (x & 0x2000000000 > 0)\\n        result = result * 0x1000000162E42FFF037DF38AA2B219F06 >> 128;\\n      if (x & 0x1000000000 > 0)\\n        result = result * 0x10000000B17217FBA9C739AA5819F44F9 >> 128;\\n      if (x & 0x800000000 > 0)\\n        result = result * 0x1000000058B90BFCDEE5ACD3C1CEDC823 >> 128;\\n      if (x & 0x400000000 > 0)\\n        result = result * 0x100000002C5C85FE31F35A6A30DA1BE50 >> 128;\\n      if (x & 0x200000000 > 0)\\n        result = result * 0x10000000162E42FF0999CE3541B9FFFCF >> 128;\\n      if (x & 0x100000000 > 0)\\n        result = result * 0x100000000B17217F80F4EF5AADDA45554 >> 128;\\n      if (x & 0x80000000 > 0)\\n        result = result * 0x10000000058B90BFBF8479BD5A81B51AD >> 128;\\n      if (x & 0x40000000 > 0)\\n        result = result * 0x1000000002C5C85FDF84BD62AE30A74CC >> 128;\\n      if (x & 0x20000000 > 0)\\n        result = result * 0x100000000162E42FEFB2FED257559BDAA >> 128;\\n      if (x & 0x10000000 > 0)\\n        result = result * 0x1000000000B17217F7D5A7716BBA4A9AE >> 128;\\n      if (x & 0x8000000 > 0)\\n        result = result * 0x100000000058B90BFBE9DDBAC5E109CCE >> 128;\\n      if (x & 0x4000000 > 0)\\n        result = result * 0x10000000002C5C85FDF4B15DE6F17EB0D >> 128;\\n      if (x & 0x2000000 > 0)\\n        result = result * 0x1000000000162E42FEFA494F1478FDE05 >> 128;\\n      if (x & 0x1000000 > 0)\\n        result = result * 0x10000000000B17217F7D20CF927C8E94C >> 128;\\n      if (x & 0x800000 > 0)\\n        result = result * 0x1000000000058B90BFBE8F71CB4E4B33D >> 128;\\n      if (x & 0x400000 > 0)\\n        result = result * 0x100000000002C5C85FDF477B662B26945 >> 128;\\n      if (x & 0x200000 > 0)\\n        result = result * 0x10000000000162E42FEFA3AE53369388C >> 128;\\n      if (x & 0x100000 > 0)\\n        result = result * 0x100000000000B17217F7D1D351A389D40 >> 128;\\n      if (x & 0x80000 > 0)\\n        result = result * 0x10000000000058B90BFBE8E8B2D3D4EDE >> 128;\\n      if (x & 0x40000 > 0)\\n        result = result * 0x1000000000002C5C85FDF4741BEA6E77E >> 128;\\n      if (x & 0x20000 > 0)\\n        result = result * 0x100000000000162E42FEFA39FE95583C2 >> 128;\\n      if (x & 0x10000 > 0)\\n        result = result * 0x1000000000000B17217F7D1CFB72B45E1 >> 128;\\n      if (x & 0x8000 > 0)\\n        result = result * 0x100000000000058B90BFBE8E7CC35C3F0 >> 128;\\n      if (x & 0x4000 > 0)\\n        result = result * 0x10000000000002C5C85FDF473E242EA38 >> 128;\\n      if (x & 0x2000 > 0)\\n        result = result * 0x1000000000000162E42FEFA39F02B772C >> 128;\\n      if (x & 0x1000 > 0)\\n        result = result * 0x10000000000000B17217F7D1CF7D83C1A >> 128;\\n      if (x & 0x800 > 0)\\n        result = result * 0x1000000000000058B90BFBE8E7BDCBE2E >> 128;\\n      if (x & 0x400 > 0)\\n        result = result * 0x100000000000002C5C85FDF473DEA871F >> 128;\\n      if (x & 0x200 > 0)\\n        result = result * 0x10000000000000162E42FEFA39EF44D91 >> 128;\\n      if (x & 0x100 > 0)\\n        result = result * 0x100000000000000B17217F7D1CF79E949 >> 128;\\n      if (x & 0x80 > 0)\\n        result = result * 0x10000000000000058B90BFBE8E7BCE544 >> 128;\\n      if (x & 0x40 > 0)\\n        result = result * 0x1000000000000002C5C85FDF473DE6ECA >> 128;\\n      if (x & 0x20 > 0)\\n        result = result * 0x100000000000000162E42FEFA39EF366F >> 128;\\n      if (x & 0x10 > 0)\\n        result = result * 0x1000000000000000B17217F7D1CF79AFA >> 128;\\n      if (x & 0x8 > 0)\\n        result = result * 0x100000000000000058B90BFBE8E7BCD6D >> 128;\\n      if (x & 0x4 > 0)\\n        result = result * 0x10000000000000002C5C85FDF473DE6B2 >> 128;\\n      if (x & 0x2 > 0)\\n        result = result * 0x1000000000000000162E42FEFA39EF358 >> 128;\\n      if (x & 0x1 > 0)\\n        result = result * 0x10000000000000000B17217F7D1CF79AB >> 128;\\n\\n      result >>= uint256 (int256 (63 - (x >> 64)));\\n      require (result <= uint256 (int256 (MAX_64x64)));\\n\\n      return int128 (int256 (result));\\n    }\\n  }\\n\\n  /**\\n   * Calculate natural exponent of x.  Revert on overflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function exp (int128 x) internal pure returns (int128) {\\n    unchecked {\\n      require (x < 0x400000000000000000); // Overflow\\n\\n      if (x < -0x400000000000000000) return 0; // Underflow\\n\\n      return exp_2 (\\n          int128 (int256 (x) * 0x171547652B82FE1777D0FFDA0D23A7D12 >> 128));\\n    }\\n  }\\n\\n  /**\\n   * Calculate x / y rounding towards zero, where x and y are unsigned 256-bit\\n   * integer numbers.  Revert on overflow or when y is zero.\\n   *\\n   * @param x unsigned 256-bit integer number\\n   * @param y unsigned 256-bit integer number\\n   * @return unsigned 64.64-bit fixed point number\\n   */\\n  function divuu (uint256 x, uint256 y) private pure returns (uint128) {\\n    unchecked {\\n      require (y != 0);\\n\\n      uint256 result;\\n\\n      if (x <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\\n        result = (x << 64) / y;\\n      else {\\n        uint256 msb = 192;\\n        uint256 xc = x >> 192;\\n        if (xc >= 0x100000000) { xc >>= 32; msb += 32; }\\n        if (xc >= 0x10000) { xc >>= 16; msb += 16; }\\n        if (xc >= 0x100) { xc >>= 8; msb += 8; }\\n        if (xc >= 0x10) { xc >>= 4; msb += 4; }\\n        if (xc >= 0x4) { xc >>= 2; msb += 2; }\\n        if (xc >= 0x2) msb += 1;  // No need to shift xc anymore\\n\\n        result = (x << 255 - msb) / ((y - 1 >> msb - 191) + 1);\\n        require (result <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n\\n        uint256 hi = result * (y >> 128);\\n        uint256 lo = result * (y & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n\\n        uint256 xh = x >> 192;\\n        uint256 xl = x << 64;\\n\\n        if (xl < lo) xh -= 1;\\n        xl -= lo; // We rely on overflow behavior here\\n        lo = hi << 128;\\n        if (xl < lo) xh -= 1;\\n        xl -= lo; // We rely on overflow behavior here\\n\\n        result += xh == hi >> 128 ? xl / y : 1;\\n      }\\n\\n      require (result <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n      return uint128 (result);\\n    }\\n  }\\n\\n  /**\\n   * Calculate sqrt (x) rounding down, where x is unsigned 256-bit integer\\n   * number.\\n   *\\n   * @param x unsigned 256-bit integer number\\n   * @return unsigned 128-bit integer number\\n   */\\n  function sqrtu (uint256 x) private pure returns (uint128) {\\n    unchecked {\\n      if (x == 0) return 0;\\n      else {\\n        uint256 xx = x;\\n        uint256 r = 1;\\n        if (xx >= 0x100000000000000000000000000000000) { xx >>= 128; r <<= 64; }\\n        if (xx >= 0x10000000000000000) { xx >>= 64; r <<= 32; }\\n        if (xx >= 0x100000000) { xx >>= 32; r <<= 16; }\\n        if (xx >= 0x10000) { xx >>= 16; r <<= 8; }\\n        if (xx >= 0x100) { xx >>= 8; r <<= 4; }\\n        if (xx >= 0x10) { xx >>= 4; r <<= 2; }\\n        if (xx >= 0x4) { r <<= 1; }\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1; // Seven iterations should be enough\\n        uint256 r1 = x / r;\\n        return uint128 (r < r1 ? r : r1);\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x1364fdc24192b982f647c7fc68dcb2f6fc1b5e201843e773144bd23a76cb3b97\",\"license\":\"BSD-4-Clause\"},\"contracts/Oracle.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"abdk-libraries-solidity/ABDKMath64x64.sol\\\";\\n\\n/**\\n * @title Oracle\\n * @dev Oracle contract returns a price set by the oracle contract owner.\\n * The owner can change the base price. The price is inversely proportional to the natural logarithm of the username length and is multiplied by the duration.\\n */\\ncontract Oracle is Ownable {\\n    uint public basePrice;\\n\\n    event BasePriceUpdated(uint oldBasePrice, uint newBasePrice);\\n\\n    constructor(uint _basePrice) {\\n        basePrice = _basePrice;\\n    }\\n\\n    error UsernameTooShortError();\\n\\n    /**\\n     * @notice Calculates and returns the price for a username based on its length and duration. The price is determined by the natural logarithm of the username length and is inversely proportional to the length.\\n     * @dev The function reverts if the username length is less than 3. The base price is returned if the username length is exactly 3.\\n     * @param usernameLength The length of the username.\\n     * @param durationInYears The duration in years for which the price is calculated.\\n     * @return uint - The current price.\\n     */\\n    function price(\\n        uint usernameLength,\\n        uint8 durationInYears\\n    ) external view returns (uint) {\\n        if (usernameLength < 3) {\\n            revert UsernameTooShortError();\\n        }\\n\\n        if (usernameLength == 3) {\\n            return basePrice * durationInYears;\\n        }\\n\\n        // Calculate the natural logarithm of the username length\\n        int128 lnUsernameLength = ABDKMath64x64.ln(\\n            ABDKMath64x64.fromUInt(usernameLength)\\n        );\\n\\n        // Calculate the factor as 2 divided by the username length\\n        int128 factor = ABDKMath64x64.div(\\n            ABDKMath64x64.fromUInt(2),\\n            ABDKMath64x64.fromUInt(usernameLength)\\n        );\\n\\n        // Calculate the final price by multiplying the duration in years,  base price, ln(usernameLength), and the factor\\n        return\\n            durationInYears *\\n            ABDKMath64x64.toUInt(\\n                ABDKMath64x64.mul(\\n                    ABDKMath64x64.fromUInt(basePrice),\\n                    ABDKMath64x64.mul(lnUsernameLength, factor)\\n                )\\n            );\\n    }\\n\\n    /**\\n     * @notice Allows the owner to set a new base price.\\n     * @param newBasePrice The new base price to be set.\\n     */\\n    function setBasePrice(uint newBasePrice) external onlyOwner {\\n        uint oldBasePrice = basePrice;\\n        basePrice = newBasePrice;\\n\\n        emit BasePriceUpdated(oldBasePrice, newBasePrice);\\n    }\\n}\\n\",\"keccak256\":\"0x62c6406f803f404c94a3446c33c5ada316bb132c040b2296e1da8a3b25944e8a\"},\"contracts/UsernameController.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./Oracle.sol\\\";\\nimport \\\"./UsernameNFT.sol\\\";\\n\\n/**\\n * @title UsernameController\\n * @dev The UsernameController contract handles the registration, renewal, and management of usernames.\\n * It interacts with the Oracle contract to determine the price of registering a username and the\\n * UsernameNFT contract to mint and manage the NFTs representing the registered usernames.\\n */\\ncontract UsernameController is Ownable {\\n    Oracle public oracle;\\n    UsernameNFT public usernameNFT;\\n\\n    error InsufficientNativeError();\\n    error NotTokenOwnerError();\\n    error FailedWithdrawError();\\n    error NameAlreadyActiveError();\\n    error InvalidDurationError();\\n\\n    uint96 SECONDS_PER_YEAR = 31_536_000;\\n\\n    modifier checkDuration(uint8 durationInYears) {\\n        if (durationInYears < 1 || durationInYears > 3) {\\n            revert InvalidDurationError();\\n        }\\n        _;\\n    }\\n\\n    constructor(Oracle _oracle, UsernameNFT _usernameNFT) {\\n        oracle = _oracle;\\n        usernameNFT = _usernameNFT;\\n    }\\n\\n    /**\\n     * @notice Registers a new username and mints an NFT if the name is available.\\n     * @param name string memory - The desired username.\\n     * @param resolvedAddress address - The address of the user who will own the NFT.\\n     * @param durationInYears uint8 - The duration for which the username will be registered (1-3 years).\\n     * @return uint - The token ID of the minted NFT.\\n     */\\n    function register(\\n        string memory name,\\n        address resolvedAddress,\\n        uint8 durationInYears\\n    ) external payable checkDuration(durationInYears) returns (uint) {\\n        uint256 nameLength = bytes(name).length;\\n        uint256 price = oracle.price(nameLength, durationInYears);\\n        if (msg.value < price) revert InsufficientNativeError();\\n        uint256 tokenId = usernameNFT.mint(\\n            msg.sender,\\n            resolvedAddress,\\n            name,\\n            totalSeconds(durationInYears)\\n        );\\n        return tokenId;\\n    }\\n\\n    /**\\n     * @notice Renews the registration of a username by updating its expiry.\\n     * @param tokenId The token ID of the NFT representing the username.\\n     * @param durationInYears The additional duration for which the username will be registered (1-3 years).\\n     * @return uint The token ID of the updated NFT.\\n     */\\n    function renew(\\n        address resolvedAddress,\\n        uint256 tokenId,\\n        uint8 durationInYears\\n    ) external payable checkDuration(durationInYears) returns (uint) {\\n        UsernameNFT.TokenData memory data = usernameNFT.getTokenData(tokenId);\\n\\n        bool isExpired = data.duration + data.mintTimestamp < block.timestamp\\n            ? true\\n            : false;\\n\\n        string memory name = usernameNFT.resolvedAddressToName(\\n            data.resolvedAddress\\n        );\\n\\n        uint256 price = oracle.price(bytes(name).length, durationInYears);\\n        if (msg.value < price) revert InsufficientNativeError();\\n\\n        if (usernameNFT.ownerOf(tokenId) != msg.sender)\\n            revert NotTokenOwnerError();\\n\\n        if (!isExpired) {\\n            uint96 oldMintTimestamp = data.mintTimestamp;\\n            uint96 newDuration = data.duration + totalSeconds(durationInYears);\\n            usernameNFT.updateTokenData(\\n                tokenId,\\n                UsernameNFT.TokenData({\\n                    resolvedAddress: resolvedAddress,\\n                    mintTimestamp: oldMintTimestamp,\\n                    duration: newDuration\\n                })\\n            );\\n        }\\n\\n        if (isExpired) {\\n            if (usernameNFT.resolveName(name) != address(0)) {\\n                revert NameAlreadyActiveError();\\n            }\\n            usernameNFT.updateTokenData(\\n                tokenId,\\n                UsernameNFT.TokenData({\\n                    resolvedAddress: resolvedAddress,\\n                    mintTimestamp: uint96(block.timestamp),\\n                    duration: totalSeconds(durationInYears)\\n                })\\n            );\\n        }\\n\\n        return tokenId;\\n    }\\n\\n    /**\\n     * @notice Sets the Oracle instance to be used by the contract.\\n     * @dev This function can only be called by the contract owner.\\n     * @param _oracle The address of the Oracle instance to be set.\\n     */\\n    function setOracle(Oracle _oracle) external onlyOwner {\\n        oracle = _oracle;\\n    }\\n\\n    /**\\n     * @notice Withdraws the accumulated Ether balance from the contract to the contract owner's address\\n     */\\n    function withdraw() external {\\n        (bool sent, ) = owner().call{value: address(this).balance}(\\\"\\\");\\n        if (!sent) {\\n            revert FailedWithdrawError();\\n        }\\n    }\\n\\n    /**\\n     * @notice Converts the duration in years to seconds.\\n     * @param durationInYears uint96 - The duration in years.\\n     * @return uint96 - The duration in seconds.\\n     */\\n    function totalSeconds(\\n        uint96 durationInYears\\n    ) internal view returns (uint96) {\\n        return durationInYears * SECONDS_PER_YEAR;\\n    }\\n}\\n\",\"keccak256\":\"0x8723de60c08729cdb667d9b602947031c309581d9b07811bd372d7ef96c146d3\"},\"contracts/UsernameNFT.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./UsernameController.sol\\\";\\n\\n/**\\n * @title UsernameNFT\\n * @dev UsernameNFT contract represents the NFTs for usernames. Each NFT represents a unique username\\n * and has an associated resolved address. The contract also stores the duration for which the username\\n * is registered and the timestamp when it was minted or renewed.\\n */\\ncontract UsernameNFT is ERC721, Ownable {\\n    string public domain;\\n\\n    constructor(\\n        string memory name,\\n        string memory symbol,\\n        string memory _domain\\n    ) ERC721(name, symbol) {\\n        domain = _domain;\\n    }\\n\\n    uint256 public totalSupply;\\n\\n    UsernameController public controller;\\n\\n    struct TokenData {\\n        uint96 mintTimestamp;\\n        uint96 duration;\\n        address resolvedAddress;\\n    }\\n\\n    mapping(uint256 => TokenData) public tokenData;\\n    mapping(string => uint256) public nameToTokenId;\\n    mapping(address => string) public resolvedAddressToName;\\n\\n    event NameRegistered(\\n        address indexed resolvedAddress,\\n        string name,\\n        uint256 tokenId\\n    );\\n    event TokenDataUpdated(\\n        address indexed resolvedAddress,\\n        string name,\\n        uint256 tokenId\\n    );\\n    event ResolveAddressUpdated(\\n        address indexed oldResolvedAddress,\\n        address indexed newResolvedAddress,\\n        string name,\\n        uint256 tokenId\\n    );\\n\\n    error OnlyControllerError();\\n    error OnlyNFTOwnerError();\\n    error NameAlreadyRegisteredError();\\n    error NameNotRegisteredError();\\n    error AddressNotRegisteredError();\\n    error ZeroAddressNotAvailableError();\\n\\n    modifier onlyController() {\\n        if (msg.sender != address(controller)) {\\n            revert OnlyControllerError();\\n        }\\n        _;\\n    }\\n\\n    modifier onlyNFTOwner(uint256 tokenId) {\\n        if (msg.sender != ownerOf(tokenId)) {\\n            revert OnlyNFTOwnerError();\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @notice Sets the controller contract address.\\n     * @param _controller address - The address of the controller contract.\\n     * @dev The controller contract is responsible for minting and updating token data.\\n     */\\n    function setController(address _controller) external onlyOwner {\\n        controller = UsernameController(_controller);\\n    }\\n\\n    /**\\n     * @notice Mints a new NFT for a given name if it's available.\\n     * @param to The address of the user who will own the NFT.\\n     * @param resolvedAddress The address that the username will resolve to.\\n     * @param name The desired username.\\n     * @param duration The duration for which the username will be registered.\\n     * @return uint256 The token ID of the minted NFT.\\n     * @dev This function can only be called by the controller contract. It checks if the name is available\\n     * and mints a new NFT with the given token data if it is.\\n     */\\n    function mint(\\n        address to,\\n        address resolvedAddress,\\n        string memory name,\\n        uint96 duration\\n    ) external onlyController returns (uint256) {\\n        if (resolvedAddress == address(0) || to == address(0)) {\\n            revert ZeroAddressNotAvailableError();\\n        }\\n        uint256 tokenId = nameToTokenId[name];\\n        if (tokenId != 0 && !isExpired(tokenId)) {\\n            revert NameAlreadyRegisteredError();\\n        }\\n        totalSupply++;\\n        tokenId = totalSupply;\\n        _safeMint(to, tokenId);\\n        tokenData[tokenId] = TokenData({\\n            resolvedAddress: resolvedAddress,\\n            mintTimestamp: uint96(block.timestamp),\\n            duration: duration\\n        });\\n        nameToTokenId[name] = tokenId;\\n        resolvedAddressToName[resolvedAddress] = name;\\n        emit NameRegistered(to, name, tokenId);\\n        return tokenId;\\n    }\\n\\n    /**\\n     * @notice Updates the token data for a given NFT.\\n     * @param tokenId The token ID of the NFT to be updated.\\n     * @param data The updated token data.\\n     * @dev This function can only be called by the controller contract. It updates the token data\\n     * for the given tokenId with the provided data.\\n     */\\n    function updateTokenData(\\n        uint256 tokenId,\\n        TokenData memory data\\n    ) external onlyController {\\n        tokenData[tokenId] = data;\\n        if (data.resolvedAddress == address(0)) {\\n            revert ZeroAddressNotAvailableError();\\n        }\\n        emit TokenDataUpdated(\\n            data.resolvedAddress,\\n            resolvedAddressToName[data.resolvedAddress],\\n            tokenId\\n        );\\n    }\\n\\n    // /**\\n    //  * @notice Updates the primary name associated with the caller's address.\\n    //  * @param name The new primary name to be associated with the caller's address.\\n    //  */\\n    // function updatePrimaryName(string memory name) external onlyController {\\n    //     uint256 tokenId = nameToTokenId[name];\\n    //     require(tokenId != 0, \\\"Name not registered\\\");\\n    //     require(ownerOf(tokenId) == msg.sender, \\\"Not the owner of the name\\\");\\n    //     resolvedAddressToName[msg.sender] = name;\\n    // }\\n\\n    /**\\n     * @notice Updates the resolved address for a given NFT.\\n     * @param tokenId The token ID of the NFT to be updated.\\n     * @param newResolvedAddress The new resolved address.\\n     * @dev This function can only be called by the owner of the NFT. It updates the resolved address\\n     * for the given tokenId with the provided newResolvedAddress.\\n     */\\n    function updateResolveAddress(\\n        uint256 tokenId,\\n        address newResolvedAddress\\n    ) external onlyNFTOwner(tokenId) {\\n        TokenData storage data = tokenData[tokenId];\\n        address oldResolvedAddress = data.resolvedAddress;\\n        data.resolvedAddress = newResolvedAddress;\\n        emit ResolveAddressUpdated(\\n            oldResolvedAddress,\\n            newResolvedAddress,\\n            resolvedAddressToName[oldResolvedAddress],\\n            tokenId\\n        );\\n    }\\n\\n    /**\\n     * @notice Returns the token data for a given NFT.\\n     * @param tokenId The token ID of the NFT.\\n     * @return TokenData memory The token data of the NFT.\\n     */\\n    function getTokenData(\\n        uint256 tokenId\\n    ) public view returns (TokenData memory) {\\n        return tokenData[tokenId];\\n    }\\n\\n    /**\\n     * @notice Returns the resolved address for a given username.\\n     * @param name The username to be resolved.\\n     * @return address The resolved address of the username.\\n     * @dev This function returns the resolved address for a given username if it is registered and not expired.\\n     * Otherwise, it returns the zero address.\\n     */\\n    function resolveName(string memory name) external view returns (address) {\\n        uint256 tokenId = nameToTokenId[name];\\n        if (tokenId == 0) {\\n            revert NameNotRegisteredError();\\n        }\\n        TokenData memory data = tokenData[tokenId];\\n        if (block.timestamp > data.mintTimestamp + data.duration) {\\n            return address(0);\\n        }\\n        return data.resolvedAddress;\\n    }\\n\\n    /**\\n     * @notice Returns the username for a given resolved address.\\n     * @param addr The owner address to be resolved.\\n     * @return string memory The username associated with the resolved address.\\n     * @dev This function returns the username associated with a given resolved address if it is registered and not expired.\\n     * Otherwise, it returns an empty string.\\n     */\\n    function resolveAddress(address addr) public view returns (string memory) {\\n        string memory name = resolvedAddressToName[addr];\\n        if (bytes(name).length == 0) {\\n            revert AddressNotRegisteredError();\\n        }\\n        uint256 tokenId = nameToTokenId[name];\\n        if (isExpired(tokenId)) {\\n            return \\\"\\\";\\n        }\\n        return name;\\n    }\\n\\n    /**\\n     * @notice Returns the Unix timestamp of when the given tokenId expires.\\n     * @param tokenId The token ID of the NFT.\\n     * @return uint The Unix timestamp of when the tokenId expires.\\n     * @dev This function calculates the expiration timestamp by adding the duration to the mint timestamp\\n     * of the given tokenId.\\n     */\\n    function nameExpirationTime(uint256 tokenId) public view returns (uint) {\\n        TokenData memory data = tokenData[tokenId];\\n        return data.mintTimestamp + data.duration;\\n    }\\n\\n    /**\\n     * @notice Checks if a given tokenId is expired.\\n     * @param tokenId The token ID of the NFT.\\n     * @return bool True if the tokenId is expired, false otherwise.\\n     * @dev This function checks if the current block timestamp is greater than the expiration timestamp\\n     * of the given tokenId.\\n     */\\n    function isExpired(uint256 tokenId) public view returns (bool) {\\n        return block.timestamp > nameExpirationTime(tokenId);\\n    }\\n\\n    /**\\n     * @notice Checks if a given name is available for registration.\\n     * @param name The name to be checked for availability.\\n     * @return bool True if the name is available, false otherwise.\\n     * @dev This function checks if the given name is not registered or if the associated tokenId is expired.\\n     */\\n    function isAvailable(string memory name) external view returns (bool) {\\n        return nameToTokenId[name] == 0 || isExpired(nameToTokenId[name]);\\n    }\\n\\n    /**\\n     * @notice Returns the display name for a given address.\\n     * @param addr The address to be resolved.\\n     * @return string memory The display name associated with the address.\\n     * @dev This function first resolves the address to its associated username using the resolveAddress function.\\n     * If an active, valid username is found, it appends the domain to the username and returns the resulting display name.\\n     * Example: If the username is \\\"alice\\\" and the domain is \\\"example\\\", the display name will be \\\"alice.example\\\".\\n     */\\n    function getDisplayName(address addr) public view returns (string memory) {\\n        string memory name = resolveAddress(addr);\\n        return string(abi.encodePacked(name, \\\".\\\", domain));\\n    }\\n\\n    /**\\n     * @notice Returns the URI for a given NFT.\\n     * @param tokenId The token ID of the NFT.\\n     * @return string memory The URI of the NFT.\\n     * @dev This function returns the URI of the NFT by converting the tokenId to a string.\\n     * The URI can be used to retrieve metadata associated with the NFT, such as a JSON file containing\\n     * information about the NFT's properties, image, and other attributes.\\n     * Example: If the tokenId is 1, the returned URI will be \\\"1\\\".\\n     */\\n    function tokenURI(\\n        uint256 tokenId\\n    ) public pure override returns (string memory) {\\n        return Strings.toString(tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0x1b3c50958c34fb9e6ec40ba95463bfda8d44d2047043f237d8d21aa662f0b1a9\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162004b0e38038062004b0e8339818101604052810190620000379190620002fb565b828281600090816200004a9190620005ff565b5080600190816200005c9190620005ff565b5050506200007f620000736200009a60201b60201c565b620000a260201b60201c565b8060079081620000909190620005ff565b50505050620006e6565b600033905090565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620001d18262000186565b810181811067ffffffffffffffff82111715620001f357620001f262000197565b5b80604052505050565b60006200020862000168565b9050620002168282620001c6565b919050565b600067ffffffffffffffff82111562000239576200023862000197565b5b620002448262000186565b9050602081019050919050565b60005b838110156200027157808201518184015260208101905062000254565b60008484015250505050565b6000620002946200028e846200021b565b620001fc565b905082815260208101848484011115620002b357620002b262000181565b5b620002c084828562000251565b509392505050565b600082601f830112620002e057620002df6200017c565b5b8151620002f28482602086016200027d565b91505092915050565b60008060006060848603121562000317576200031662000172565b5b600084015167ffffffffffffffff81111562000338576200033762000177565b5b6200034686828701620002c8565b935050602084015167ffffffffffffffff8111156200036a576200036962000177565b5b6200037886828701620002c8565b925050604084015167ffffffffffffffff8111156200039c576200039b62000177565b5b620003aa86828701620002c8565b9150509250925092565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200040757607f821691505b6020821081036200041d576200041c620003bf565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620004877fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8262000448565b62000493868362000448565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b6000620004e0620004da620004d484620004ab565b620004b5565b620004ab565b9050919050565b6000819050919050565b620004fc83620004bf565b620005146200050b82620004e7565b84845462000455565b825550505050565b600090565b6200052b6200051c565b62000538818484620004f1565b505050565b5b8181101562000560576200055460008262000521565b6001810190506200053e565b5050565b601f821115620005af57620005798162000423565b620005848462000438565b8101602085101562000594578190505b620005ac620005a38562000438565b8301826200053d565b50505b505050565b600082821c905092915050565b6000620005d460001984600802620005b4565b1980831691505092915050565b6000620005ef8383620005c1565b9150826002028217905092915050565b6200060a82620003b4565b67ffffffffffffffff81111562000626576200062562000197565b5b620006328254620003ee565b6200063f82828562000564565b600060209050601f83116001811462000677576000841562000662578287015190505b6200066e8582620005e1565b865550620006de565b601f198416620006878662000423565b60005b82811015620006b1578489015182556001820191506020850194506020810190506200068a565b86831015620006d15784890151620006cd601f891682620005c1565b8355505b6001600288020188555050505b505050505050565b61441880620006f66000396000f3fe608060405234801561001057600080fd5b50600436106101fb5760003560e01c8063965306aa1161011a578063c87b56dd116100ad578063e4205d061161007c578063e4205d0614610636578063e985e9c514610652578063f2fde38b14610682578063f77c47911461069e578063f81e8775146106bc576101fb565b8063c87b56dd14610576578063d6d0f6c8146105a6578063d9548e53146105d6578063dd00125414610606576101fb565b8063b4b5b48f116100e9578063b4b5b48f146104da578063b88d4fde1461050c578063bc19bce514610528578063c2fb26a614610558576101fb565b8063965306aa1461042e5780639a796aae1461045e578063a22cb4651461048e578063b09afec1146104aa576101fb565b806342842e0e11610192578063715018a611610161578063715018a6146103cc5780638da5cb5b146103d657806392eefe9b146103f457806395d89b4114610410576101fb565b806342842e0e1461032057806349b64ff81461033c5780636352211e1461036c57806370a082311461039c576101fb565b8063095ea7b3116101ce578063095ea7b31461029a5780631042876d146102b657806318160ddd146102e657806323b872dd14610304576101fb565b806301ffc9a71461020057806306fdde031461023057806307f033931461024e578063081812fc1461026a575b600080fd5b61021a60048036038101906102159190612d41565b6106ec565b6040516102279190612d89565b60405180910390f35b6102386107ce565b6040516102459190612e34565b60405180910390f35b61026860048036038101906102639190613012565b610860565b005b610284600480360381019061027f9190613052565b610ab7565b604051610291919061308e565b60405180910390f35b6102b460048036038101906102af91906130a9565b610afd565b005b6102d060048036038101906102cb91906130e9565b610c14565b6040516102dd9190612e34565b60405180910390f35b6102ee610c4e565b6040516102fb9190613125565b60405180910390f35b61031e60048036038101906103199190613140565b610c54565b005b61033a60048036038101906103359190613140565b610cb4565b005b610356600480360381019061035191906130e9565b610cd4565b6040516103639190612e34565b60405180910390f35b61038660048036038101906103819190613052565b610d74565b604051610393919061308e565b60405180910390f35b6103b660048036038101906103b191906130e9565b610dfa565b6040516103c39190613125565b60405180910390f35b6103d4610eb1565b005b6103de610ec5565b6040516103eb919061308e565b60405180910390f35b61040e600480360381019061040991906130e9565b610eef565b005b610418610f3b565b6040516104259190612e34565b60405180910390f35b6104486004803603810190610443919061324d565b610fcd565b6040516104559190612d89565b60405180910390f35b61047860048036038101906104739190613296565b611025565b6040516104859190613125565b60405180910390f35b6104a860048036038101906104a39190613345565b6113c8565b005b6104c460048036038101906104bf9190613052565b6113de565b6040516104d191906133e5565b60405180910390f35b6104f460048036038101906104ef9190613052565b6114dd565b6040516105039392919061340f565b60405180910390f35b610526600480360381019061052191906134e7565b611557565b005b610542600480360381019061053d919061324d565b6115b9565b60405161054f919061308e565b60405180910390f35b61056061174e565b60405161056d9190612e34565b60405180910390f35b610590600480360381019061058b9190613052565b6117dc565b60405161059d9190612e34565b60405180910390f35b6105c060048036038101906105bb9190613052565b6117ee565b6040516105cd9190613125565b60405180910390f35b6105f060048036038101906105eb9190613052565b61190d565b6040516105fd9190612d89565b60405180910390f35b610620600480360381019061061b919061324d565b611921565b60405161062d9190613125565b60405180910390f35b610650600480360381019061064b919061356a565b61194f565b005b61066c600480360381019061066791906135aa565b611aec565b6040516106799190612d89565b60405180910390f35b61069c600480360381019061069791906130e9565b611b80565b005b6106a6611c03565b6040516106b39190613649565b60405180910390f35b6106d660048036038101906106d191906130e9565b611c29565b6040516106e39190612e34565b60405180910390f35b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806107b757507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806107c757506107c682611d87565b5b9050919050565b6060600080546107dd90613693565b80601f016020809104026020016040519081016040528092919081815260200182805461080990613693565b80156108565780601f1061082b57610100808354040283529160200191610856565b820191906000526020600020905b81548152906001019060200180831161083957829003601f168201915b5050505050905090565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146108e7576040517f56be192700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600a600084815260200190815260200160002060008201518160000160006101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff160217905550602082015181600001600c6101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff16021790555060408201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550905050600073ffffffffffffffffffffffffffffffffffffffff16816040015173ffffffffffffffffffffffffffffffffffffffff1603610a1d576040517fe1d76af900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b806040015173ffffffffffffffffffffffffffffffffffffffff167f781b23bebd7dad67f61c98ad264593b54d3b6dc2ac5002927277ba66899c22c7600c6000846040015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002084604051610aab92919061375d565b60405180910390a25050565b6000610ac282611df1565b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000610b0882610d74565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610b78576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b6f906137ff565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610b97611e3c565b73ffffffffffffffffffffffffffffffffffffffff161480610bc65750610bc581610bc0611e3c565b611aec565b5b610c05576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bfc90613891565b60405180910390fd5b610c0f8383611e44565b505050565b60606000610c2183611c29565b9050806007604051602001610c379291906139bc565b604051602081830303815290604052915050919050565b60085481565b610c65610c5f611e3c565b82611efd565b610ca4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c9b90613a5d565b60405180910390fd5b610caf838383611f92565b505050565b610ccf83838360405180602001604052806000815250611557565b505050565b600c6020528060005260406000206000915090508054610cf390613693565b80601f0160208091040260200160405190810160405280929190818152602001828054610d1f90613693565b8015610d6c5780601f10610d4157610100808354040283529160200191610d6c565b820191906000526020600020905b815481529060010190602001808311610d4f57829003601f168201915b505050505081565b600080610d808361228b565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610df1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610de890613ac9565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610e6a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e6190613b5b565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b610eb96122c8565b610ec36000612346565b565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610ef76122c8565b80600960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b606060018054610f4a90613693565b80601f0160208091040260200160405190810160405280929190818152602001828054610f7690613693565b8015610fc35780601f10610f9857610100808354040283529160200191610fc3565b820191906000526020600020905b815481529060010190602001808311610fa657829003601f168201915b5050505050905090565b600080600b83604051610fe09190613b7b565b908152602001604051809103902054148061101e575061101d600b836040516110099190613b7b565b90815260200160405180910390205461190d565b5b9050919050565b6000600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146110ae576040517f56be192700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614806111155750600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16145b1561114c576040517fe1d76af900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600b8460405161115e9190613b7b565b90815260200160405180910390205490506000811415801561118657506111848161190d565b155b156111bd576040517f557ebeac00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600860008154809291906111d090613bc1565b919050555060085490506111e4868261240c565b6040518060600160405280426bffffffffffffffffffffffff168152602001846bffffffffffffffffffffffff1681526020018673ffffffffffffffffffffffffffffffffffffffff16815250600a600083815260200190815260200160002060008201518160000160006101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff160217905550602082015181600001600c6101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff16021790555060408201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555090505080600b8560405161130d9190613b7b565b90815260200160405180910390208190555083600c60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020908161136b9190613d96565b508573ffffffffffffffffffffffffffffffffffffffff167fdcc2175a495289b48da3c0c903e6e8fd7bbf9400cc93d7d1b8be780fc5916c6685836040516113b4929190613e68565b60405180910390a280915050949350505050565b6113da6113d3611e3c565b838361242a565b5050565b6113e6612c82565b600a60008381526020019081526020016000206040518060600160405290816000820160009054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff166bffffffffffffffffffffffff16815260200160008201600c9054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff166bffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815250509050919050565b600a6020528060005260406000206000915090508060000160009054906101000a90046bffffffffffffffffffffffff169080600001600c9054906101000a90046bffffffffffffffffffffffff16908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905083565b611568611562611e3c565b83611efd565b6115a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161159e90613a5d565b60405180910390fd5b6115b384848484612596565b50505050565b600080600b836040516115cc9190613b7b565b908152602001604051809103902054905060008103611617576040517f8a3d36da00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600a60008381526020019081526020016000206040518060600160405290816000820160009054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff166bffffffffffffffffffffffff16815260200160008201600c9054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff166bffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152505090508060200151816000015161171f9190613e98565b6bffffffffffffffffffffffff1642111561173f57600092505050611749565b8060400151925050505b919050565b6007805461175b90613693565b80601f016020809104026020016040519081016040528092919081815260200182805461178790613693565b80156117d45780601f106117a9576101008083540402835291602001916117d4565b820191906000526020600020905b8154815290600101906020018083116117b757829003601f168201915b505050505081565b60606117e7826125f2565b9050919050565b600080600a60008481526020019081526020016000206040518060600160405290816000820160009054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff166bffffffffffffffffffffffff16815260200160008201600c9054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff166bffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815250509050806020015181600001516118f79190613e98565b6bffffffffffffffffffffffff16915050919050565b6000611918826117ee565b42119050919050565b600b818051602081018201805184825260208301602085012081835280955050505050506000915090505481565b8161195981610d74565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146119bd576040517fd01fd0d200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600a6000858152602001908152602001600020905060008160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050838260010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f42963d5155d3789ca0a9d651579a6a88164d069972af6f2df013a99af91991c3600c60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002088604051611add92919061375d565b60405180910390a35050505050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b611b886122c8565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611bf7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bee90613f4a565b60405180910390fd5b611c0081612346565b50565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60606000600c60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054611c7790613693565b80601f0160208091040260200160405190810160405280929190818152602001828054611ca390613693565b8015611cf05780601f10611cc557610100808354040283529160200191611cf0565b820191906000526020600020905b815481529060010190602001808311611cd357829003601f168201915b505050505090506000815103611d32576040517f6cfb958d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600b82604051611d449190613b7b565b9081526020016040518091039020549050611d5e8161190d565b15611d7c576040518060200160405280600081525092505050611d82565b81925050505b919050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b611dfa816126c0565b611e39576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e3090613ac9565b60405180910390fd5b50565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16611eb783610d74565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600080611f0983610d74565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480611f4b5750611f4a8185611aec565b5b80611f8957508373ffffffffffffffffffffffffffffffffffffffff16611f7184610ab7565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16611fb282610d74565b73ffffffffffffffffffffffffffffffffffffffff1614612008576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fff90613fdc565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603612077576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161206e9061406e565b60405180910390fd5b6120848383836001612701565b8273ffffffffffffffffffffffffffffffffffffffff166120a482610d74565b73ffffffffffffffffffffffffffffffffffffffff16146120fa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120f190613fdc565b60405180910390fd5b6004600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46122868383836001612707565b505050565b60006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6122d0611e3c565b73ffffffffffffffffffffffffffffffffffffffff166122ee610ec5565b73ffffffffffffffffffffffffffffffffffffffff1614612344576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161233b906140da565b60405180910390fd5b565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b61242682826040518060200160405280600081525061270d565b5050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603612498576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161248f90614146565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516125899190612d89565b60405180910390a3505050565b6125a1848484611f92565b6125ad84848484612768565b6125ec576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125e3906141d8565b60405180910390fd5b50505050565b606060006001612601846128ef565b01905060008167ffffffffffffffff8111156126205761261f612e91565b5b6040519080825280601f01601f1916602001820160405280156126525781602001600182028036833780820191505090505b509050600082602001820190505b6001156126b5578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a85816126a9576126a86141f8565b5b04945060008503612660575b819350505050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166126e28361228b565b73ffffffffffffffffffffffffffffffffffffffff1614159050919050565b50505050565b50505050565b6127178383612a42565b6127246000848484612768565b612763576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161275a906141d8565b60405180910390fd5b505050565b60006127898473ffffffffffffffffffffffffffffffffffffffff16612c5f565b156128e2578373ffffffffffffffffffffffffffffffffffffffff1663150b7a026127b2611e3c565b8786866040518563ffffffff1660e01b81526004016127d4949392919061427c565b6020604051808303816000875af192505050801561281057506040513d601f19601f8201168201806040525081019061280d91906142dd565b60015b612892573d8060008114612840576040519150601f19603f3d011682016040523d82523d6000602084013e612845565b606091505b50600081510361288a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612881906141d8565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149150506128e7565b600190505b949350505050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000831061294d577a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008381612943576129426141f8565b5b0492506040810190505b6d04ee2d6d415b85acef8100000000831061298a576d04ee2d6d415b85acef810000000083816129805761297f6141f8565b5b0492506020810190505b662386f26fc1000083106129b957662386f26fc1000083816129af576129ae6141f8565b5b0492506010810190505b6305f5e10083106129e2576305f5e10083816129d8576129d76141f8565b5b0492506008810190505b6127108310612a075761271083816129fd576129fc6141f8565b5b0492506004810190505b60648310612a2a5760648381612a2057612a1f6141f8565b5b0492506002810190505b600a8310612a39576001810190505b80915050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603612ab1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612aa890614356565b60405180910390fd5b612aba816126c0565b15612afa576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612af1906143c2565b60405180910390fd5b612b08600083836001612701565b612b11816126c0565b15612b51576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b48906143c2565b60405180910390fd5b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4612c5b600083836001612707565b5050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b604051806060016040528060006bffffffffffffffffffffffff16815260200160006bffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b612d1e81612ce9565b8114612d2957600080fd5b50565b600081359050612d3b81612d15565b92915050565b600060208284031215612d5757612d56612cdf565b5b6000612d6584828501612d2c565b91505092915050565b60008115159050919050565b612d8381612d6e565b82525050565b6000602082019050612d9e6000830184612d7a565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015612dde578082015181840152602081019050612dc3565b60008484015250505050565b6000601f19601f8301169050919050565b6000612e0682612da4565b612e108185612daf565b9350612e20818560208601612dc0565b612e2981612dea565b840191505092915050565b60006020820190508181036000830152612e4e8184612dfb565b905092915050565b6000819050919050565b612e6981612e56565b8114612e7457600080fd5b50565b600081359050612e8681612e60565b92915050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b612ec982612dea565b810181811067ffffffffffffffff82111715612ee857612ee7612e91565b5b80604052505050565b6000612efb612cd5565b9050612f078282612ec0565b919050565b60006bffffffffffffffffffffffff82169050919050565b612f2d81612f0c565b8114612f3857600080fd5b50565b600081359050612f4a81612f24565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612f7b82612f50565b9050919050565b612f8b81612f70565b8114612f9657600080fd5b50565b600081359050612fa881612f82565b92915050565b600060608284031215612fc457612fc3612e8c565b5b612fce6060612ef1565b90506000612fde84828501612f3b565b6000830152506020612ff284828501612f3b565b602083015250604061300684828501612f99565b60408301525092915050565b6000806080838503121561302957613028612cdf565b5b600061303785828601612e77565b925050602061304885828601612fae565b9150509250929050565b60006020828403121561306857613067612cdf565b5b600061307684828501612e77565b91505092915050565b61308881612f70565b82525050565b60006020820190506130a3600083018461307f565b92915050565b600080604083850312156130c0576130bf612cdf565b5b60006130ce85828601612f99565b92505060206130df85828601612e77565b9150509250929050565b6000602082840312156130ff576130fe612cdf565b5b600061310d84828501612f99565b91505092915050565b61311f81612e56565b82525050565b600060208201905061313a6000830184613116565b92915050565b60008060006060848603121561315957613158612cdf565b5b600061316786828701612f99565b935050602061317886828701612f99565b925050604061318986828701612e77565b9150509250925092565b600080fd5b600080fd5b600067ffffffffffffffff8211156131b8576131b7612e91565b5b6131c182612dea565b9050602081019050919050565b82818337600083830152505050565b60006131f06131eb8461319d565b612ef1565b90508281526020810184848401111561320c5761320b613198565b5b6132178482856131ce565b509392505050565b600082601f83011261323457613233613193565b5b81356132448482602086016131dd565b91505092915050565b60006020828403121561326357613262612cdf565b5b600082013567ffffffffffffffff81111561328157613280612ce4565b5b61328d8482850161321f565b91505092915050565b600080600080608085870312156132b0576132af612cdf565b5b60006132be87828801612f99565b94505060206132cf87828801612f99565b935050604085013567ffffffffffffffff8111156132f0576132ef612ce4565b5b6132fc8782880161321f565b925050606061330d87828801612f3b565b91505092959194509250565b61332281612d6e565b811461332d57600080fd5b50565b60008135905061333f81613319565b92915050565b6000806040838503121561335c5761335b612cdf565b5b600061336a85828601612f99565b925050602061337b85828601613330565b9150509250929050565b61338e81612f0c565b82525050565b61339d81612f70565b82525050565b6060820160008201516133b96000850182613385565b5060208201516133cc6020850182613385565b5060408201516133df6040850182613394565b50505050565b60006060820190506133fa60008301846133a3565b92915050565b61340981612f0c565b82525050565b60006060820190506134246000830186613400565b6134316020830185613400565b61343e604083018461307f565b949350505050565b600067ffffffffffffffff82111561346157613460612e91565b5b61346a82612dea565b9050602081019050919050565b600061348a61348584613446565b612ef1565b9050828152602081018484840111156134a6576134a5613198565b5b6134b18482856131ce565b509392505050565b600082601f8301126134ce576134cd613193565b5b81356134de848260208601613477565b91505092915050565b6000806000806080858703121561350157613500612cdf565b5b600061350f87828801612f99565b945050602061352087828801612f99565b935050604061353187828801612e77565b925050606085013567ffffffffffffffff81111561355257613551612ce4565b5b61355e878288016134b9565b91505092959194509250565b6000806040838503121561358157613580612cdf565b5b600061358f85828601612e77565b92505060206135a085828601612f99565b9150509250929050565b600080604083850312156135c1576135c0612cdf565b5b60006135cf85828601612f99565b92505060206135e085828601612f99565b9150509250929050565b6000819050919050565b600061360f61360a61360584612f50565b6135ea565b612f50565b9050919050565b6000613621826135f4565b9050919050565b600061363382613616565b9050919050565b61364381613628565b82525050565b600060208201905061365e600083018461363a565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806136ab57607f821691505b6020821081036136be576136bd613664565b5b50919050565b60008190508160005260206000209050919050565b600081546136e681613693565b6136f08186612daf565b9450600182166000811461370b576001811461372157613754565b60ff198316865281151560200286019350613754565b61372a856136c4565b60005b8381101561374c5781548189015260018201915060208101905061372d565b808801955050505b50505092915050565b6000604082019050818103600083015261377781856136d9565b90506137866020830184613116565b9392505050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b60006137e9602183612daf565b91506137f48261378d565b604082019050919050565b60006020820190508181036000830152613818816137dc565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c000000602082015250565b600061387b603d83612daf565b91506138868261381f565b604082019050919050565b600060208201905081810360008301526138aa8161386e565b9050919050565b600081905092915050565b60006138c782612da4565b6138d181856138b1565b93506138e1818560208601612dc0565b80840191505092915050565b7f2e00000000000000000000000000000000000000000000000000000000000000600082015250565b60006139236001836138b1565b915061392e826138ed565b600182019050919050565b6000815461394681613693565b61395081866138b1565b9450600182166000811461396b5760018114613980576139b3565b60ff19831686528115158202860193506139b3565b613989856136c4565b60005b838110156139ab5781548189015260018201915060208101905061398c565b838801955050505b50505092915050565b60006139c882856138bc565b91506139d382613916565b91506139df8284613939565b91508190509392505050565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206f7220617070726f76656400000000000000000000000000000000000000602082015250565b6000613a47602d83612daf565b9150613a52826139eb565b604082019050919050565b60006020820190508181036000830152613a7681613a3a565b9050919050565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b6000613ab3601883612daf565b9150613abe82613a7d565b602082019050919050565b60006020820190508181036000830152613ae281613aa6565b9050919050565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b6000613b45602983612daf565b9150613b5082613ae9565b604082019050919050565b60006020820190508181036000830152613b7481613b38565b9050919050565b6000613b8782846138bc565b915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000613bcc82612e56565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203613bfe57613bfd613b92565b5b600182019050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302613c567fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82613c19565b613c608683613c19565b95508019841693508086168417925050509392505050565b6000613c93613c8e613c8984612e56565b6135ea565b612e56565b9050919050565b6000819050919050565b613cad83613c78565b613cc1613cb982613c9a565b848454613c26565b825550505050565b600090565b613cd6613cc9565b613ce1818484613ca4565b505050565b5b81811015613d0557613cfa600082613cce565b600181019050613ce7565b5050565b601f821115613d4a57613d1b816136c4565b613d2484613c09565b81016020851015613d33578190505b613d47613d3f85613c09565b830182613ce6565b50505b505050565b600082821c905092915050565b6000613d6d60001984600802613d4f565b1980831691505092915050565b6000613d868383613d5c565b9150826002028217905092915050565b613d9f82612da4565b67ffffffffffffffff811115613db857613db7612e91565b5b613dc28254613693565b613dcd828285613d09565b600060209050601f831160018114613e005760008415613dee578287015190505b613df88582613d7a565b865550613e60565b601f198416613e0e866136c4565b60005b82811015613e3657848901518255600182019150602085019450602081019050613e11565b86831015613e535784890151613e4f601f891682613d5c565b8355505b6001600288020188555050505b505050505050565b60006040820190508181036000830152613e828185612dfb565b9050613e916020830184613116565b9392505050565b6000613ea382612f0c565b9150613eae83612f0c565b925082820190506bffffffffffffffffffffffff811115613ed257613ed1613b92565b5b92915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000613f34602683612daf565b9150613f3f82613ed8565b604082019050919050565b60006020820190508181036000830152613f6381613f27565b9050919050565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b6000613fc6602583612daf565b9150613fd182613f6a565b604082019050919050565b60006020820190508181036000830152613ff581613fb9565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000614058602483612daf565b915061406382613ffc565b604082019050919050565b600060208201905081810360008301526140878161404b565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006140c4602083612daf565b91506140cf8261408e565b602082019050919050565b600060208201905081810360008301526140f3816140b7565b9050919050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b6000614130601983612daf565b915061413b826140fa565b602082019050919050565b6000602082019050818103600083015261415f81614123565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b60006141c2603283612daf565b91506141cd82614166565b604082019050919050565b600060208201905081810360008301526141f1816141b5565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600081519050919050565b600082825260208201905092915050565b600061424e82614227565b6142588185614232565b9350614268818560208601612dc0565b61427181612dea565b840191505092915050565b6000608082019050614291600083018761307f565b61429e602083018661307f565b6142ab6040830185613116565b81810360608301526142bd8184614243565b905095945050505050565b6000815190506142d781612d15565b92915050565b6000602082840312156142f3576142f2612cdf565b5b6000614301848285016142c8565b91505092915050565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b6000614340602083612daf565b915061434b8261430a565b602082019050919050565b6000602082019050818103600083015261436f81614333565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b60006143ac601c83612daf565b91506143b782614376565b602082019050919050565b600060208201905081810360008301526143db8161439f565b905091905056fea26469706673582212200395a8e0e3e630282291c3ff3955a822deb9e095403583c09412b8d416093fbd64736f6c63430008130033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101fb5760003560e01c8063965306aa1161011a578063c87b56dd116100ad578063e4205d061161007c578063e4205d0614610636578063e985e9c514610652578063f2fde38b14610682578063f77c47911461069e578063f81e8775146106bc576101fb565b8063c87b56dd14610576578063d6d0f6c8146105a6578063d9548e53146105d6578063dd00125414610606576101fb565b8063b4b5b48f116100e9578063b4b5b48f146104da578063b88d4fde1461050c578063bc19bce514610528578063c2fb26a614610558576101fb565b8063965306aa1461042e5780639a796aae1461045e578063a22cb4651461048e578063b09afec1146104aa576101fb565b806342842e0e11610192578063715018a611610161578063715018a6146103cc5780638da5cb5b146103d657806392eefe9b146103f457806395d89b4114610410576101fb565b806342842e0e1461032057806349b64ff81461033c5780636352211e1461036c57806370a082311461039c576101fb565b8063095ea7b3116101ce578063095ea7b31461029a5780631042876d146102b657806318160ddd146102e657806323b872dd14610304576101fb565b806301ffc9a71461020057806306fdde031461023057806307f033931461024e578063081812fc1461026a575b600080fd5b61021a60048036038101906102159190612d41565b6106ec565b6040516102279190612d89565b60405180910390f35b6102386107ce565b6040516102459190612e34565b60405180910390f35b61026860048036038101906102639190613012565b610860565b005b610284600480360381019061027f9190613052565b610ab7565b604051610291919061308e565b60405180910390f35b6102b460048036038101906102af91906130a9565b610afd565b005b6102d060048036038101906102cb91906130e9565b610c14565b6040516102dd9190612e34565b60405180910390f35b6102ee610c4e565b6040516102fb9190613125565b60405180910390f35b61031e60048036038101906103199190613140565b610c54565b005b61033a60048036038101906103359190613140565b610cb4565b005b610356600480360381019061035191906130e9565b610cd4565b6040516103639190612e34565b60405180910390f35b61038660048036038101906103819190613052565b610d74565b604051610393919061308e565b60405180910390f35b6103b660048036038101906103b191906130e9565b610dfa565b6040516103c39190613125565b60405180910390f35b6103d4610eb1565b005b6103de610ec5565b6040516103eb919061308e565b60405180910390f35b61040e600480360381019061040991906130e9565b610eef565b005b610418610f3b565b6040516104259190612e34565b60405180910390f35b6104486004803603810190610443919061324d565b610fcd565b6040516104559190612d89565b60405180910390f35b61047860048036038101906104739190613296565b611025565b6040516104859190613125565b60405180910390f35b6104a860048036038101906104a39190613345565b6113c8565b005b6104c460048036038101906104bf9190613052565b6113de565b6040516104d191906133e5565b60405180910390f35b6104f460048036038101906104ef9190613052565b6114dd565b6040516105039392919061340f565b60405180910390f35b610526600480360381019061052191906134e7565b611557565b005b610542600480360381019061053d919061324d565b6115b9565b60405161054f919061308e565b60405180910390f35b61056061174e565b60405161056d9190612e34565b60405180910390f35b610590600480360381019061058b9190613052565b6117dc565b60405161059d9190612e34565b60405180910390f35b6105c060048036038101906105bb9190613052565b6117ee565b6040516105cd9190613125565b60405180910390f35b6105f060048036038101906105eb9190613052565b61190d565b6040516105fd9190612d89565b60405180910390f35b610620600480360381019061061b919061324d565b611921565b60405161062d9190613125565b60405180910390f35b610650600480360381019061064b919061356a565b61194f565b005b61066c600480360381019061066791906135aa565b611aec565b6040516106799190612d89565b60405180910390f35b61069c600480360381019061069791906130e9565b611b80565b005b6106a6611c03565b6040516106b39190613649565b60405180910390f35b6106d660048036038101906106d191906130e9565b611c29565b6040516106e39190612e34565b60405180910390f35b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806107b757507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806107c757506107c682611d87565b5b9050919050565b6060600080546107dd90613693565b80601f016020809104026020016040519081016040528092919081815260200182805461080990613693565b80156108565780601f1061082b57610100808354040283529160200191610856565b820191906000526020600020905b81548152906001019060200180831161083957829003601f168201915b5050505050905090565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146108e7576040517f56be192700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600a600084815260200190815260200160002060008201518160000160006101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff160217905550602082015181600001600c6101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff16021790555060408201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550905050600073ffffffffffffffffffffffffffffffffffffffff16816040015173ffffffffffffffffffffffffffffffffffffffff1603610a1d576040517fe1d76af900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b806040015173ffffffffffffffffffffffffffffffffffffffff167f781b23bebd7dad67f61c98ad264593b54d3b6dc2ac5002927277ba66899c22c7600c6000846040015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002084604051610aab92919061375d565b60405180910390a25050565b6000610ac282611df1565b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000610b0882610d74565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610b78576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b6f906137ff565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610b97611e3c565b73ffffffffffffffffffffffffffffffffffffffff161480610bc65750610bc581610bc0611e3c565b611aec565b5b610c05576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bfc90613891565b60405180910390fd5b610c0f8383611e44565b505050565b60606000610c2183611c29565b9050806007604051602001610c379291906139bc565b604051602081830303815290604052915050919050565b60085481565b610c65610c5f611e3c565b82611efd565b610ca4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c9b90613a5d565b60405180910390fd5b610caf838383611f92565b505050565b610ccf83838360405180602001604052806000815250611557565b505050565b600c6020528060005260406000206000915090508054610cf390613693565b80601f0160208091040260200160405190810160405280929190818152602001828054610d1f90613693565b8015610d6c5780601f10610d4157610100808354040283529160200191610d6c565b820191906000526020600020905b815481529060010190602001808311610d4f57829003601f168201915b505050505081565b600080610d808361228b565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610df1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610de890613ac9565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610e6a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e6190613b5b565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b610eb96122c8565b610ec36000612346565b565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610ef76122c8565b80600960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b606060018054610f4a90613693565b80601f0160208091040260200160405190810160405280929190818152602001828054610f7690613693565b8015610fc35780601f10610f9857610100808354040283529160200191610fc3565b820191906000526020600020905b815481529060010190602001808311610fa657829003601f168201915b5050505050905090565b600080600b83604051610fe09190613b7b565b908152602001604051809103902054148061101e575061101d600b836040516110099190613b7b565b90815260200160405180910390205461190d565b5b9050919050565b6000600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146110ae576040517f56be192700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614806111155750600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16145b1561114c576040517fe1d76af900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600b8460405161115e9190613b7b565b90815260200160405180910390205490506000811415801561118657506111848161190d565b155b156111bd576040517f557ebeac00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600860008154809291906111d090613bc1565b919050555060085490506111e4868261240c565b6040518060600160405280426bffffffffffffffffffffffff168152602001846bffffffffffffffffffffffff1681526020018673ffffffffffffffffffffffffffffffffffffffff16815250600a600083815260200190815260200160002060008201518160000160006101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff160217905550602082015181600001600c6101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff16021790555060408201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555090505080600b8560405161130d9190613b7b565b90815260200160405180910390208190555083600c60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020908161136b9190613d96565b508573ffffffffffffffffffffffffffffffffffffffff167fdcc2175a495289b48da3c0c903e6e8fd7bbf9400cc93d7d1b8be780fc5916c6685836040516113b4929190613e68565b60405180910390a280915050949350505050565b6113da6113d3611e3c565b838361242a565b5050565b6113e6612c82565b600a60008381526020019081526020016000206040518060600160405290816000820160009054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff166bffffffffffffffffffffffff16815260200160008201600c9054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff166bffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815250509050919050565b600a6020528060005260406000206000915090508060000160009054906101000a90046bffffffffffffffffffffffff169080600001600c9054906101000a90046bffffffffffffffffffffffff16908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905083565b611568611562611e3c565b83611efd565b6115a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161159e90613a5d565b60405180910390fd5b6115b384848484612596565b50505050565b600080600b836040516115cc9190613b7b565b908152602001604051809103902054905060008103611617576040517f8a3d36da00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600a60008381526020019081526020016000206040518060600160405290816000820160009054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff166bffffffffffffffffffffffff16815260200160008201600c9054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff166bffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152505090508060200151816000015161171f9190613e98565b6bffffffffffffffffffffffff1642111561173f57600092505050611749565b8060400151925050505b919050565b6007805461175b90613693565b80601f016020809104026020016040519081016040528092919081815260200182805461178790613693565b80156117d45780601f106117a9576101008083540402835291602001916117d4565b820191906000526020600020905b8154815290600101906020018083116117b757829003601f168201915b505050505081565b60606117e7826125f2565b9050919050565b600080600a60008481526020019081526020016000206040518060600160405290816000820160009054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff166bffffffffffffffffffffffff16815260200160008201600c9054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff166bffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815250509050806020015181600001516118f79190613e98565b6bffffffffffffffffffffffff16915050919050565b6000611918826117ee565b42119050919050565b600b818051602081018201805184825260208301602085012081835280955050505050506000915090505481565b8161195981610d74565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146119bd576040517fd01fd0d200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600a6000858152602001908152602001600020905060008160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050838260010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f42963d5155d3789ca0a9d651579a6a88164d069972af6f2df013a99af91991c3600c60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002088604051611add92919061375d565b60405180910390a35050505050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b611b886122c8565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611bf7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bee90613f4a565b60405180910390fd5b611c0081612346565b50565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60606000600c60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054611c7790613693565b80601f0160208091040260200160405190810160405280929190818152602001828054611ca390613693565b8015611cf05780601f10611cc557610100808354040283529160200191611cf0565b820191906000526020600020905b815481529060010190602001808311611cd357829003601f168201915b505050505090506000815103611d32576040517f6cfb958d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600b82604051611d449190613b7b565b9081526020016040518091039020549050611d5e8161190d565b15611d7c576040518060200160405280600081525092505050611d82565b81925050505b919050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b611dfa816126c0565b611e39576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e3090613ac9565b60405180910390fd5b50565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16611eb783610d74565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600080611f0983610d74565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480611f4b5750611f4a8185611aec565b5b80611f8957508373ffffffffffffffffffffffffffffffffffffffff16611f7184610ab7565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16611fb282610d74565b73ffffffffffffffffffffffffffffffffffffffff1614612008576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fff90613fdc565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603612077576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161206e9061406e565b60405180910390fd5b6120848383836001612701565b8273ffffffffffffffffffffffffffffffffffffffff166120a482610d74565b73ffffffffffffffffffffffffffffffffffffffff16146120fa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120f190613fdc565b60405180910390fd5b6004600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46122868383836001612707565b505050565b60006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6122d0611e3c565b73ffffffffffffffffffffffffffffffffffffffff166122ee610ec5565b73ffffffffffffffffffffffffffffffffffffffff1614612344576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161233b906140da565b60405180910390fd5b565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b61242682826040518060200160405280600081525061270d565b5050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603612498576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161248f90614146565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516125899190612d89565b60405180910390a3505050565b6125a1848484611f92565b6125ad84848484612768565b6125ec576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125e3906141d8565b60405180910390fd5b50505050565b606060006001612601846128ef565b01905060008167ffffffffffffffff8111156126205761261f612e91565b5b6040519080825280601f01601f1916602001820160405280156126525781602001600182028036833780820191505090505b509050600082602001820190505b6001156126b5578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a85816126a9576126a86141f8565b5b04945060008503612660575b819350505050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166126e28361228b565b73ffffffffffffffffffffffffffffffffffffffff1614159050919050565b50505050565b50505050565b6127178383612a42565b6127246000848484612768565b612763576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161275a906141d8565b60405180910390fd5b505050565b60006127898473ffffffffffffffffffffffffffffffffffffffff16612c5f565b156128e2578373ffffffffffffffffffffffffffffffffffffffff1663150b7a026127b2611e3c565b8786866040518563ffffffff1660e01b81526004016127d4949392919061427c565b6020604051808303816000875af192505050801561281057506040513d601f19601f8201168201806040525081019061280d91906142dd565b60015b612892573d8060008114612840576040519150601f19603f3d011682016040523d82523d6000602084013e612845565b606091505b50600081510361288a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612881906141d8565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149150506128e7565b600190505b949350505050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000831061294d577a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008381612943576129426141f8565b5b0492506040810190505b6d04ee2d6d415b85acef8100000000831061298a576d04ee2d6d415b85acef810000000083816129805761297f6141f8565b5b0492506020810190505b662386f26fc1000083106129b957662386f26fc1000083816129af576129ae6141f8565b5b0492506010810190505b6305f5e10083106129e2576305f5e10083816129d8576129d76141f8565b5b0492506008810190505b6127108310612a075761271083816129fd576129fc6141f8565b5b0492506004810190505b60648310612a2a5760648381612a2057612a1f6141f8565b5b0492506002810190505b600a8310612a39576001810190505b80915050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603612ab1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612aa890614356565b60405180910390fd5b612aba816126c0565b15612afa576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612af1906143c2565b60405180910390fd5b612b08600083836001612701565b612b11816126c0565b15612b51576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b48906143c2565b60405180910390fd5b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4612c5b600083836001612707565b5050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b604051806060016040528060006bffffffffffffffffffffffff16815260200160006bffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b612d1e81612ce9565b8114612d2957600080fd5b50565b600081359050612d3b81612d15565b92915050565b600060208284031215612d5757612d56612cdf565b5b6000612d6584828501612d2c565b91505092915050565b60008115159050919050565b612d8381612d6e565b82525050565b6000602082019050612d9e6000830184612d7a565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015612dde578082015181840152602081019050612dc3565b60008484015250505050565b6000601f19601f8301169050919050565b6000612e0682612da4565b612e108185612daf565b9350612e20818560208601612dc0565b612e2981612dea565b840191505092915050565b60006020820190508181036000830152612e4e8184612dfb565b905092915050565b6000819050919050565b612e6981612e56565b8114612e7457600080fd5b50565b600081359050612e8681612e60565b92915050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b612ec982612dea565b810181811067ffffffffffffffff82111715612ee857612ee7612e91565b5b80604052505050565b6000612efb612cd5565b9050612f078282612ec0565b919050565b60006bffffffffffffffffffffffff82169050919050565b612f2d81612f0c565b8114612f3857600080fd5b50565b600081359050612f4a81612f24565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612f7b82612f50565b9050919050565b612f8b81612f70565b8114612f9657600080fd5b50565b600081359050612fa881612f82565b92915050565b600060608284031215612fc457612fc3612e8c565b5b612fce6060612ef1565b90506000612fde84828501612f3b565b6000830152506020612ff284828501612f3b565b602083015250604061300684828501612f99565b60408301525092915050565b6000806080838503121561302957613028612cdf565b5b600061303785828601612e77565b925050602061304885828601612fae565b9150509250929050565b60006020828403121561306857613067612cdf565b5b600061307684828501612e77565b91505092915050565b61308881612f70565b82525050565b60006020820190506130a3600083018461307f565b92915050565b600080604083850312156130c0576130bf612cdf565b5b60006130ce85828601612f99565b92505060206130df85828601612e77565b9150509250929050565b6000602082840312156130ff576130fe612cdf565b5b600061310d84828501612f99565b91505092915050565b61311f81612e56565b82525050565b600060208201905061313a6000830184613116565b92915050565b60008060006060848603121561315957613158612cdf565b5b600061316786828701612f99565b935050602061317886828701612f99565b925050604061318986828701612e77565b9150509250925092565b600080fd5b600080fd5b600067ffffffffffffffff8211156131b8576131b7612e91565b5b6131c182612dea565b9050602081019050919050565b82818337600083830152505050565b60006131f06131eb8461319d565b612ef1565b90508281526020810184848401111561320c5761320b613198565b5b6132178482856131ce565b509392505050565b600082601f83011261323457613233613193565b5b81356132448482602086016131dd565b91505092915050565b60006020828403121561326357613262612cdf565b5b600082013567ffffffffffffffff81111561328157613280612ce4565b5b61328d8482850161321f565b91505092915050565b600080600080608085870312156132b0576132af612cdf565b5b60006132be87828801612f99565b94505060206132cf87828801612f99565b935050604085013567ffffffffffffffff8111156132f0576132ef612ce4565b5b6132fc8782880161321f565b925050606061330d87828801612f3b565b91505092959194509250565b61332281612d6e565b811461332d57600080fd5b50565b60008135905061333f81613319565b92915050565b6000806040838503121561335c5761335b612cdf565b5b600061336a85828601612f99565b925050602061337b85828601613330565b9150509250929050565b61338e81612f0c565b82525050565b61339d81612f70565b82525050565b6060820160008201516133b96000850182613385565b5060208201516133cc6020850182613385565b5060408201516133df6040850182613394565b50505050565b60006060820190506133fa60008301846133a3565b92915050565b61340981612f0c565b82525050565b60006060820190506134246000830186613400565b6134316020830185613400565b61343e604083018461307f565b949350505050565b600067ffffffffffffffff82111561346157613460612e91565b5b61346a82612dea565b9050602081019050919050565b600061348a61348584613446565b612ef1565b9050828152602081018484840111156134a6576134a5613198565b5b6134b18482856131ce565b509392505050565b600082601f8301126134ce576134cd613193565b5b81356134de848260208601613477565b91505092915050565b6000806000806080858703121561350157613500612cdf565b5b600061350f87828801612f99565b945050602061352087828801612f99565b935050604061353187828801612e77565b925050606085013567ffffffffffffffff81111561355257613551612ce4565b5b61355e878288016134b9565b91505092959194509250565b6000806040838503121561358157613580612cdf565b5b600061358f85828601612e77565b92505060206135a085828601612f99565b9150509250929050565b600080604083850312156135c1576135c0612cdf565b5b60006135cf85828601612f99565b92505060206135e085828601612f99565b9150509250929050565b6000819050919050565b600061360f61360a61360584612f50565b6135ea565b612f50565b9050919050565b6000613621826135f4565b9050919050565b600061363382613616565b9050919050565b61364381613628565b82525050565b600060208201905061365e600083018461363a565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806136ab57607f821691505b6020821081036136be576136bd613664565b5b50919050565b60008190508160005260206000209050919050565b600081546136e681613693565b6136f08186612daf565b9450600182166000811461370b576001811461372157613754565b60ff198316865281151560200286019350613754565b61372a856136c4565b60005b8381101561374c5781548189015260018201915060208101905061372d565b808801955050505b50505092915050565b6000604082019050818103600083015261377781856136d9565b90506137866020830184613116565b9392505050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b60006137e9602183612daf565b91506137f48261378d565b604082019050919050565b60006020820190508181036000830152613818816137dc565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c000000602082015250565b600061387b603d83612daf565b91506138868261381f565b604082019050919050565b600060208201905081810360008301526138aa8161386e565b9050919050565b600081905092915050565b60006138c782612da4565b6138d181856138b1565b93506138e1818560208601612dc0565b80840191505092915050565b7f2e00000000000000000000000000000000000000000000000000000000000000600082015250565b60006139236001836138b1565b915061392e826138ed565b600182019050919050565b6000815461394681613693565b61395081866138b1565b9450600182166000811461396b5760018114613980576139b3565b60ff19831686528115158202860193506139b3565b613989856136c4565b60005b838110156139ab5781548189015260018201915060208101905061398c565b838801955050505b50505092915050565b60006139c882856138bc565b91506139d382613916565b91506139df8284613939565b91508190509392505050565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206f7220617070726f76656400000000000000000000000000000000000000602082015250565b6000613a47602d83612daf565b9150613a52826139eb565b604082019050919050565b60006020820190508181036000830152613a7681613a3a565b9050919050565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b6000613ab3601883612daf565b9150613abe82613a7d565b602082019050919050565b60006020820190508181036000830152613ae281613aa6565b9050919050565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b6000613b45602983612daf565b9150613b5082613ae9565b604082019050919050565b60006020820190508181036000830152613b7481613b38565b9050919050565b6000613b8782846138bc565b915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000613bcc82612e56565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203613bfe57613bfd613b92565b5b600182019050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302613c567fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82613c19565b613c608683613c19565b95508019841693508086168417925050509392505050565b6000613c93613c8e613c8984612e56565b6135ea565b612e56565b9050919050565b6000819050919050565b613cad83613c78565b613cc1613cb982613c9a565b848454613c26565b825550505050565b600090565b613cd6613cc9565b613ce1818484613ca4565b505050565b5b81811015613d0557613cfa600082613cce565b600181019050613ce7565b5050565b601f821115613d4a57613d1b816136c4565b613d2484613c09565b81016020851015613d33578190505b613d47613d3f85613c09565b830182613ce6565b50505b505050565b600082821c905092915050565b6000613d6d60001984600802613d4f565b1980831691505092915050565b6000613d868383613d5c565b9150826002028217905092915050565b613d9f82612da4565b67ffffffffffffffff811115613db857613db7612e91565b5b613dc28254613693565b613dcd828285613d09565b600060209050601f831160018114613e005760008415613dee578287015190505b613df88582613d7a565b865550613e60565b601f198416613e0e866136c4565b60005b82811015613e3657848901518255600182019150602085019450602081019050613e11565b86831015613e535784890151613e4f601f891682613d5c565b8355505b6001600288020188555050505b505050505050565b60006040820190508181036000830152613e828185612dfb565b9050613e916020830184613116565b9392505050565b6000613ea382612f0c565b9150613eae83612f0c565b925082820190506bffffffffffffffffffffffff811115613ed257613ed1613b92565b5b92915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000613f34602683612daf565b9150613f3f82613ed8565b604082019050919050565b60006020820190508181036000830152613f6381613f27565b9050919050565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b6000613fc6602583612daf565b9150613fd182613f6a565b604082019050919050565b60006020820190508181036000830152613ff581613fb9565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000614058602483612daf565b915061406382613ffc565b604082019050919050565b600060208201905081810360008301526140878161404b565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006140c4602083612daf565b91506140cf8261408e565b602082019050919050565b600060208201905081810360008301526140f3816140b7565b9050919050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b6000614130601983612daf565b915061413b826140fa565b602082019050919050565b6000602082019050818103600083015261415f81614123565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b60006141c2603283612daf565b91506141cd82614166565b604082019050919050565b600060208201905081810360008301526141f1816141b5565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600081519050919050565b600082825260208201905092915050565b600061424e82614227565b6142588185614232565b9350614268818560208601612dc0565b61427181612dea565b840191505092915050565b6000608082019050614291600083018761307f565b61429e602083018661307f565b6142ab6040830185613116565b81810360608301526142bd8184614243565b905095945050505050565b6000815190506142d781612d15565b92915050565b6000602082840312156142f3576142f2612cdf565b5b6000614301848285016142c8565b91505092915050565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b6000614340602083612daf565b915061434b8261430a565b602082019050919050565b6000602082019050818103600083015261436f81614333565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b60006143ac601c83612daf565b91506143b782614376565b602082019050919050565b600060208201905081810360008301526143db8161439f565b905091905056fea26469706673582212200395a8e0e3e630282291c3ff3955a822deb9e095403583c09412b8d416093fbd64736f6c63430008130033",
  "devdoc": {
    "details": "UsernameNFT contract represents the NFTs for usernames. Each NFT represents a unique username and has an associated resolved address. The contract also stores the duration for which the username is registered and the timestamp when it was minted or renewed.",
    "events": {
      "Approval(address,address,uint256)": {
        "details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."
      },
      "ApprovalForAll(address,address,bool)": {
        "details": "Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
      },
      "Transfer(address,address,uint256)": {
        "details": "Emitted when `tokenId` token is transferred from `from` to `to`."
      }
    },
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "getDisplayName(address)": {
        "details": "This function first resolves the address to its associated username using the resolveAddress function. If an active, valid username is found, it appends the domain to the username and returns the resulting display name. Example: If the username is \"alice\" and the domain is \"example\", the display name will be \"alice.example\".",
        "params": {
          "addr": "The address to be resolved."
        },
        "returns": {
          "_0": "string memory The display name associated with the address."
        }
      },
      "getTokenData(uint256)": {
        "params": {
          "tokenId": "The token ID of the NFT."
        },
        "returns": {
          "_0": "TokenData memory The token data of the NFT."
        }
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "isAvailable(string)": {
        "details": "This function checks if the given name is not registered or if the associated tokenId is expired.",
        "params": {
          "name": "The name to be checked for availability."
        },
        "returns": {
          "_0": "bool True if the name is available, false otherwise."
        }
      },
      "isExpired(uint256)": {
        "details": "This function checks if the current block timestamp is greater than the expiration timestamp of the given tokenId.",
        "params": {
          "tokenId": "The token ID of the NFT."
        },
        "returns": {
          "_0": "bool True if the tokenId is expired, false otherwise."
        }
      },
      "mint(address,address,string,uint96)": {
        "details": "This function can only be called by the controller contract. It checks if the name is available and mints a new NFT with the given token data if it is.",
        "params": {
          "duration": "The duration for which the username will be registered.",
          "name": "The desired username.",
          "resolvedAddress": "The address that the username will resolve to.",
          "to": "The address of the user who will own the NFT."
        },
        "returns": {
          "_0": "uint256 The token ID of the minted NFT."
        }
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "nameExpirationTime(uint256)": {
        "details": "This function calculates the expiration timestamp by adding the duration to the mint timestamp of the given tokenId.",
        "params": {
          "tokenId": "The token ID of the NFT."
        },
        "returns": {
          "_0": "uint The Unix timestamp of when the tokenId expires."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "resolveAddress(address)": {
        "details": "This function returns the username associated with a given resolved address if it is registered and not expired. Otherwise, it returns an empty string.",
        "params": {
          "addr": "The owner address to be resolved."
        },
        "returns": {
          "_0": "string memory The username associated with the resolved address."
        }
      },
      "resolveName(string)": {
        "details": "This function returns the resolved address for a given username if it is registered and not expired. Otherwise, it returns the zero address.",
        "params": {
          "name": "The username to be resolved."
        },
        "returns": {
          "_0": "address The resolved address of the username."
        }
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "setController(address)": {
        "details": "The controller contract is responsible for minting and updating token data.",
        "params": {
          "_controller": "address - The address of the controller contract."
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "This function returns the URI of the NFT by converting the tokenId to a string. The URI can be used to retrieve metadata associated with the NFT, such as a JSON file containing information about the NFT's properties, image, and other attributes. Example: If the tokenId is 1, the returned URI will be \"1\".",
        "params": {
          "tokenId": "The token ID of the NFT."
        },
        "returns": {
          "_0": "string memory The URI of the NFT."
        }
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateResolveAddress(uint256,address)": {
        "details": "This function can only be called by the owner of the NFT. It updates the resolved address for the given tokenId with the provided newResolvedAddress.",
        "params": {
          "newResolvedAddress": "The new resolved address.",
          "tokenId": "The token ID of the NFT to be updated."
        }
      },
      "updateTokenData(uint256,(uint96,uint96,address))": {
        "details": "This function can only be called by the controller contract. It updates the token data for the given tokenId with the provided data.",
        "params": {
          "data": "The updated token data.",
          "tokenId": "The token ID of the NFT to be updated."
        }
      }
    },
    "title": "UsernameNFT",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getDisplayName(address)": {
        "notice": "Returns the display name for a given address."
      },
      "getTokenData(uint256)": {
        "notice": "Returns the token data for a given NFT."
      },
      "isAvailable(string)": {
        "notice": "Checks if a given name is available for registration."
      },
      "isExpired(uint256)": {
        "notice": "Checks if a given tokenId is expired."
      },
      "mint(address,address,string,uint96)": {
        "notice": "Mints a new NFT for a given name if it's available."
      },
      "nameExpirationTime(uint256)": {
        "notice": "Returns the Unix timestamp of when the given tokenId expires."
      },
      "resolveAddress(address)": {
        "notice": "Returns the username for a given resolved address."
      },
      "resolveName(string)": {
        "notice": "Returns the resolved address for a given username."
      },
      "setController(address)": {
        "notice": "Sets the controller contract address."
      },
      "tokenURI(uint256)": {
        "notice": "Returns the URI for a given NFT."
      },
      "updateResolveAddress(uint256,address)": {
        "notice": "Updates the resolved address for a given NFT."
      },
      "updateTokenData(uint256,(uint96,uint96,address))": {
        "notice": "Updates the token data for a given NFT."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 138,
        "contract": "contracts/UsernameNFT.sol:UsernameNFT",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 140,
        "contract": "contracts/UsernameNFT.sol:UsernameNFT",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 144,
        "contract": "contracts/UsernameNFT.sol:UsernameNFT",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 148,
        "contract": "contracts/UsernameNFT.sol:UsernameNFT",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 152,
        "contract": "contracts/UsernameNFT.sol:UsernameNFT",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 158,
        "contract": "contracts/UsernameNFT.sol:UsernameNFT",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 7,
        "contract": "contracts/UsernameNFT.sol:UsernameNFT",
        "label": "_owner",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 6019,
        "contract": "contracts/UsernameNFT.sol:UsernameNFT",
        "label": "domain",
        "offset": 0,
        "slot": "7",
        "type": "t_string_storage"
      },
      {
        "astId": 6039,
        "contract": "contracts/UsernameNFT.sol:UsernameNFT",
        "label": "totalSupply",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 6042,
        "contract": "contracts/UsernameNFT.sol:UsernameNFT",
        "label": "controller",
        "offset": 0,
        "slot": "9",
        "type": "t_contract(UsernameController)6006"
      },
      {
        "astId": 6054,
        "contract": "contracts/UsernameNFT.sol:UsernameNFT",
        "label": "tokenData",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_struct(TokenData)6049_storage)"
      },
      {
        "astId": 6058,
        "contract": "contracts/UsernameNFT.sol:UsernameNFT",
        "label": "nameToTokenId",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_string_memory_ptr,t_uint256)"
      },
      {
        "astId": 6062,
        "contract": "contracts/UsernameNFT.sol:UsernameNFT",
        "label": "resolvedAddressToName",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_string_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(UsernameController)6006": {
        "encoding": "inplace",
        "label": "contract UsernameController",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_string_memory_ptr,t_uint256)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(TokenData)6049_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct UsernameNFT.TokenData)",
        "numberOfBytes": "32",
        "value": "t_struct(TokenData)6049_storage"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(TokenData)6049_storage": {
        "encoding": "inplace",
        "label": "struct UsernameNFT.TokenData",
        "members": [
          {
            "astId": 6044,
            "contract": "contracts/UsernameNFT.sol:UsernameNFT",
            "label": "mintTimestamp",
            "offset": 0,
            "slot": "0",
            "type": "t_uint96"
          },
          {
            "astId": 6046,
            "contract": "contracts/UsernameNFT.sol:UsernameNFT",
            "label": "duration",
            "offset": 12,
            "slot": "0",
            "type": "t_uint96"
          },
          {
            "astId": 6048,
            "contract": "contracts/UsernameNFT.sol:UsernameNFT",
            "label": "resolvedAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint96": {
        "encoding": "inplace",
        "label": "uint96",
        "numberOfBytes": "12"
      }
    }
  }
}