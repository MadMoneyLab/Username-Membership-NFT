{
  "address": "0x713f37839Acd1DeFE63C0c4AA9Df9d01062F4370",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_domain",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AddressNotRegisteredError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidTokenError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NameAlreadyRegisteredError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NameNotRegisteredError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyControllerError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyNFTOwnerError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAddressNotAvailableError",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "resolveAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "NameRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "newPrimaryName",
          "type": "string"
        }
      ],
      "name": "PrimaryNameUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldResolveAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newResolveAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ResolveAddressUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "resolveAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "TokenDataUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "available",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "controller",
      "outputs": [
        {
          "internalType": "contract UsernameController",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "domain",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getDisplayName",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "isExpired",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "uint96",
          "name": "duration",
          "type": "uint96"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "nameExpires",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "nameToTokenId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "primaryNameTokenId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "resolveAddress",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "resolveName",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_controller",
          "type": "address"
        }
      ],
      "name": "setController",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokenData",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "mintTimestamp",
          "type": "uint96"
        },
        {
          "internalType": "uint96",
          "name": "duration",
          "type": "uint96"
        },
        {
          "internalType": "address",
          "name": "resolveAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "updatePrimaryName",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "newResolveAddress",
          "type": "address"
        }
      ],
      "name": "updateResolveAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint96",
              "name": "mintTimestamp",
              "type": "uint96"
            },
            {
              "internalType": "uint96",
              "name": "duration",
              "type": "uint96"
            },
            {
              "internalType": "address",
              "name": "resolveAddress",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            }
          ],
          "internalType": "struct UsernameNFT.TokenData",
          "name": "data",
          "type": "tuple"
        }
      ],
      "name": "updateTokenData",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xc30c6fad99618263f0bb7ea7026a0f802d88c43a222e29e029605288b7165c61",
  "receipt": {
    "to": null,
    "from": "0xf0d5D3FcBFc0009121A630EC8AB67e012117f40c",
    "contractAddress": "0x713f37839Acd1DeFE63C0c4AA9Df9d01062F4370",
    "transactionIndex": 0,
    "gasUsed": "4192782",
    "logsBloom": "0x
    "blockHash": "0xacda525d7dfc30c0e741aec8f5fb465ab895a882c14f8d37bb468d52d7e3cde5",
    "transactionHash": "0xc30c6fad99618263f0bb7ea7026a0f802d88c43a222e29e029605288b7165c61",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 686723,
        "transactionHash": "0xc30c6fad99618263f0bb7ea7026a0f802d88c43a222e29e029605288b7165c61",
        "address": "0x713f37839Acd1DeFE63C0c4AA9Df9d01062F4370",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f0d5d3fcbfc0009121a630ec8ab67e012117f40c"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xacda525d7dfc30c0e741aec8f5fb465ab895a882c14f8d37bb468d52d7e3cde5"
      }
    ],
    "blockNumber": 686723,
    "cumulativeGasUsed": "4192782",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "UsernameNFT",
    "UNFT",
    "example"
  ],
  "numDeployments": 3,
  "solcInputHash": "80dc3b733b98cf23c2d489e581966663",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_domain\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AddressNotRegisteredError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTokenError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NameAlreadyRegisteredError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NameNotRegisteredError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyControllerError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyNFTOwnerError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddressNotAvailableError\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"resolveAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"NameRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newPrimaryName\",\"type\":\"string\"}],\"name\":\"PrimaryNameUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldResolveAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newResolveAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ResolveAddressUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"resolveAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"TokenDataUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"available\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"contract UsernameController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"domain\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getDisplayName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"isExpired\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint96\",\"name\":\"duration\",\"type\":\"uint96\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"nameExpires\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"nameToTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"primaryNameTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"resolveAddress\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"resolveName\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenData\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"mintTimestamp\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"duration\",\"type\":\"uint96\"},{\"internalType\":\"address\",\"name\":\"resolveAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"updatePrimaryName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"newResolveAddress\",\"type\":\"address\"}],\"name\":\"updateResolveAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint96\",\"name\":\"mintTimestamp\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"duration\",\"type\":\"uint96\"},{\"internalType\":\"address\",\"name\":\"resolveAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"internalType\":\"struct UsernameNFT.TokenData\",\"name\":\"data\",\"type\":\"tuple\"}],\"name\":\"updateTokenData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"UsernameNFT contract represents the NFTs for usernames. Each NFT represents a unique username and has an associated resolved address. The contract also stores the duration for which the username is registered and the timestamp when it was minted or renewed.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"available(string)\":{\"details\":\"This function checks if the given name is not registered or if the associated tokenId is expired.\",\"params\":{\"name\":\"The name to be checked for availability.\"},\"returns\":{\"_0\":\"bool True if the name is available, false otherwise.\"}},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"getDisplayName(uint256)\":{\"details\":\"This function first resolves the address to its associated username using the resolveAddress function. If an active, valid username is found, it appends the domain to the username and returns the resulting display name. Example: If the username is \\\"alice\\\" and the domain is \\\"example\\\", the display name will be \\\"alice.example\\\".\",\"params\":{\"tokenId\":\"The token ID to be resolved.\"},\"returns\":{\"_0\":\"string memory The display name associated with the address.\"}},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"isExpired(uint256)\":{\"details\":\"This function checks if the current block timestamp is greater than the expiration timestamp of the given tokenId.\",\"params\":{\"tokenId\":\"The token ID of the NFT.\"},\"returns\":{\"_0\":\"bool True if the tokenId is expired, false otherwise.\"}},\"mint(address,string,uint96)\":{\"details\":\"This function can only be called by the controller contract. It checks if the name is available and mints a new NFT with the given token data if it is.\",\"params\":{\"duration\":\"The duration for which the username will be registered.\",\"name\":\"The desired username.\",\"to\":\"The address of the user who will own the NFT.\"},\"returns\":{\"_0\":\"uint256 The token ID of the minted NFT.\"}},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"nameExpires(uint256)\":{\"details\":\"This function calculates the expiration timestamp by adding the duration to the mint timestamp of the given tokenId.\",\"params\":{\"tokenId\":\"The token ID of the NFT.\"},\"returns\":{\"_0\":\"uint The Unix timestamp of when the tokenId expires.\"}},\"nameToTokenId(string)\":{\"details\":\"This function calculates the token ID by hashing the given name using the keccak256 hash function.\",\"params\":{\"name\":\"The name to be converted.\"},\"returns\":{\"_0\":\"uint256 The token ID corresponding to the given name.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"resolveAddress(address)\":{\"details\":\"This function returns the username associated with a given resolved address if it is registered and not expired. Otherwise, it returns an empty string.\",\"params\":{\"addr\":\"The owner address to be resolved.\"},\"returns\":{\"_0\":\"string memory The username associated with the resolved address.\"}},\"resolveName(string)\":{\"details\":\"This function returns the resolved address for a given username if it is registered and not expired. Otherwise, it returns the zero address.\",\"params\":{\"name\":\"The username to be resolved.\"},\"returns\":{\"_0\":\"address The resolved address of the username.\"}},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"setController(address)\":{\"details\":\"The controller contract is responsible for minting and updating token data.\",\"params\":{\"_controller\":\"address - The address of the controller contract.\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"This function returns the URI of the NFT by encoding the generated JSON metadata as a base64 string. The URI can be used to retrieve metadata associated with the NFT, such as a JSON file containing information about the NFT's properties, image, and other attributes.\",\"params\":{\"tokenId\":\"The token ID of the NFT.\"},\"returns\":{\"_0\":\"string memory The URI of the NFT.\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updatePrimaryName(uint256)\":{\"details\":\"This function can only be called by resolved address of the NFT. It updates the primary name for the given tokenId with the provided newResolvedAddress. It also updates the primary name for the old and new resolved addresses if needed.\",\"params\":{\"tokenId\":\"The token ID of the NFT to be updated.\"}},\"updateResolveAddress(uint256,address)\":{\"details\":\"This function can only be called by the owner of the NFT. It updates the resolved address for the given tokenId with the provided newResolvedAddress. It also updates the primary name for the old and new resolved addresses if needed.\",\"params\":{\"newResolveAddress\":\"The new resolved address.\",\"tokenId\":\"The token ID of the NFT to be updated.\"}},\"updateTokenData(uint256,(uint96,uint96,address,string))\":{\"details\":\"This function can only be called by the controller contract. It updates the token data for the given tokenId with the provided data.\",\"params\":{\"data\":\"The updated token data.\",\"tokenId\":\"The token ID of the NFT to be updated.\"}}},\"title\":\"UsernameNFT\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"available(string)\":{\"notice\":\"Checks if a given name is available for registration.\"},\"getDisplayName(uint256)\":{\"notice\":\"Returns the display name for a given address.\"},\"isExpired(uint256)\":{\"notice\":\"Checks if a given tokenId is expired.\"},\"mint(address,string,uint96)\":{\"notice\":\"Mints a new NFT for a given name if it's available.\"},\"nameExpires(uint256)\":{\"notice\":\"Returns the Unix timestamp of when the given tokenId expires.\"},\"nameToTokenId(string)\":{\"notice\":\"Converts a given name to its corresponding token ID.\"},\"resolveAddress(address)\":{\"notice\":\"Returns the username for a given resolved address.\"},\"resolveName(string)\":{\"notice\":\"Returns the resolved address for a given username.\"},\"setController(address)\":{\"notice\":\"Sets the controller contract address.\"},\"tokenURI(uint256)\":{\"notice\":\"Returns the URI for a given NFT.\"},\"updatePrimaryName(uint256)\":{\"notice\":\"Updates the primary name for a given resolved address.\"},\"updateResolveAddress(uint256,address)\":{\"notice\":\"Updates the resolved address for a given NFT.\"},\"updateTokenData(uint256,(uint96,uint96,address,string))\":{\"notice\":\"Updates the token data for a given NFT.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/UsernameNFT.sol\":\"UsernameNFT\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":9999},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.2) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\\n     * that `ownerOf(tokenId)` is `a`.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\\n        _balances[account] += amount;\\n    }\\n}\\n\",\"keccak256\":\"0x1e854874c68bec05be100dc0092cb5fbbc71253d370ae98ddef248bbfc3fe118\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/Oracle.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/**\\n * @title Oracle\\n * @dev Oracle contract returns a price set by the oracle contract owner.\\n * The owner can change the fee structure. The price is determined by the username length and is multiplied by the duration.\\n */\\ncontract Oracle is Ownable {\\n    uint32 constant SECONDS_PER_YEAR = 31_536_000;\\n    uint64 constant FACTOR = 10 ** 18;\\n\\n    struct YearlyUsernameFees {\\n        uint64 lengthThree;\\n        uint64 lengthFour;\\n        uint64 lengthFiveOrMore;\\n    }\\n\\n    YearlyUsernameFees public yearlyUsernameFees;\\n\\n    constructor() {\\n        yearlyUsernameFees = YearlyUsernameFees({\\n            lengthThree: 0.32 ether,\\n            lengthFour: 0.08 ether,\\n            lengthFiveOrMore: 0.0025 ether\\n        });\\n    }\\n\\n    event FeesUpdated(YearlyUsernameFees oldFees, YearlyUsernameFees newFees);\\n\\n    error InvalidUsernameLength();\\n\\n    /**\\n     * @notice Calculate the price for a username based on its length and the desired duration.\\n     * @param usernameLength The length of the username.\\n     * @param durationInSeconds The desired duration in seconds.\\n     * @return The price in wei.\\n     * @dev Reverts if the username length is less than 3.\\n     */\\n    function price(\\n        uint8 usernameLength,\\n        uint128 durationInSeconds\\n    ) external view returns (uint) {\\n        if (usernameLength < 3) {\\n            revert InvalidUsernameLength();\\n        }\\n\\n        uint fee;\\n        if (usernameLength == 3) {\\n            fee = yearlyUsernameFees.lengthThree;\\n        } else if (usernameLength == 4) {\\n            fee = yearlyUsernameFees.lengthFour;\\n        } else {\\n            fee = yearlyUsernameFees.lengthFiveOrMore;\\n        }\\n\\n        uint256 durationInYears = (durationInSeconds * FACTOR) /\\n            SECONDS_PER_YEAR;\\n\\n        return (fee * durationInYears) / FACTOR;\\n    }\\n\\n    /**\\n     * @notice Change the fee structure for username pricing.\\n     * @param newFees The new fee structure.\\n     * @dev Emits a FeesUpdated event with the old and new fee structures.\\n     * @dev Only callable by the contract owner.\\n     */\\n    function changeFees(\\n        YearlyUsernameFees calldata newFees\\n    ) external onlyOwner {\\n        YearlyUsernameFees memory oldFees = yearlyUsernameFees;\\n        yearlyUsernameFees = newFees;\\n        emit FeesUpdated(oldFees, newFees);\\n    }\\n}\\n\",\"keccak256\":\"0x1dd49e4aebfeb78133c56896f3f0725362c1f6032c73b7533368a21476bc22c4\"},\"contracts/UsernameController.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./Oracle.sol\\\";\\nimport \\\"./UsernameNFT.sol\\\";\\n\\n/**\\n * @title UsernameController\\n * @dev The UsernameController contract handles the registration, renewal, and management of usernames.\\n * It interacts with the Oracle contract to determine the price of registering a username and the\\n * UsernameNFT contract to mint and manage the NFTs representing the registered usernames.\\n */\\ncontract UsernameController is Ownable {\\n    Oracle public oracle;\\n    UsernameNFT public usernameNFT;\\n\\n    error InsufficientNativeError();\\n    error NotTokenOwnerOrNameTakenError();\\n    error FailedWithdrawError();\\n    error NameAlreadyActiveError();\\n    error OnlyNFTOwnerError();\\n\\n    constructor(Oracle _oracle, UsernameNFT _usernameNFT) {\\n        oracle = _oracle;\\n        usernameNFT = _usernameNFT;\\n    }\\n\\n    /**\\n     * @notice Registers a new username and mints an NFT if the name is available.\\n     * @param name string memory - The desired username.\\n     * @param duration uint96 - The duration for which the username will be registered\\n     * @return uint - The token ID of the minted NFT.\\n     */\\n    function register(\\n        string memory name,\\n        uint96 duration\\n    ) external payable returns (uint) {\\n        uint8 nameLength = uint8(bytes(name).length);\\n        uint256 price = oracle.price(nameLength, duration);\\n        if (msg.value < price) revert InsufficientNativeError();\\n        uint256 tokenId = usernameNFT.mint(msg.sender, name, duration);\\n        return tokenId;\\n    }\\n\\n    /**\\n     * @notice Renews the registration of a username by updating its expiry.\\n     * @param tokenId The token ID of the NFT representing the username.\\n     * @param duration The additional duration for which the username will be registered\\n     * @return uint The token ID of the updated NFT.\\n     */\\n    function renew(\\n        uint256 tokenId,\\n        uint96 duration\\n    ) external payable returns (uint) {\\n        (\\n            uint96 mintTimestamp,\\n            uint96 _duration,\\n            address resolveAddress,\\n            string memory name\\n        ) = usernameNFT.tokenData(tokenId);\\n\\n        bool isExpired = usernameNFT.isExpired(tokenId);\\n\\n        uint256 price = oracle.price(uint8(bytes(name).length), duration);\\n        if (msg.value < price) revert InsufficientNativeError();\\n\\n        if (usernameNFT.ownerOf(tokenId) != msg.sender)\\n            revert NotTokenOwnerOrNameTakenError();\\n\\n        if (!isExpired) {\\n            uint96 oldMintTimestamp = mintTimestamp;\\n            uint96 newDuration = _duration + duration;\\n            usernameNFT.updateTokenData(\\n                tokenId,\\n                UsernameNFT.TokenData({\\n                    resolveAddress: resolveAddress,\\n                    mintTimestamp: oldMintTimestamp,\\n                    duration: newDuration,\\n                    name: name\\n                })\\n            );\\n        }\\n\\n        if (isExpired) {\\n            usernameNFT.updateTokenData(\\n                tokenId,\\n                UsernameNFT.TokenData({\\n                    resolveAddress: resolveAddress,\\n                    mintTimestamp: uint96(block.timestamp),\\n                    duration: duration,\\n                    name: name\\n                })\\n            );\\n        }\\n\\n        return tokenId;\\n    }\\n\\n    /**\\n     * @notice Sets the Oracle instance to be used by the contract.\\n     * @dev This function can only be called by the contract owner.\\n     * @param _oracle The address of the Oracle instance to be set.\\n     */\\n    function setOracle(Oracle _oracle) external onlyOwner {\\n        oracle = _oracle;\\n    }\\n\\n    /**\\n     * @notice Withdraws the accumulated Ether balance from the contract to the contract owner's address\\n     */\\n    function withdraw() external {\\n        (bool sent, ) = owner().call{value: address(this).balance}(\\\"\\\");\\n        if (!sent) {\\n            revert FailedWithdrawError();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5bb7b32d86b0fb755fe923c5dd00a50b8638a9937cbec6d7038fb961e3fb2dd9\"},\"contracts/UsernameNFT.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./UsernameController.sol\\\";\\nimport \\\"solady/src/utils/LibString.sol\\\";\\nimport \\\"solady/src/utils/Base64.sol\\\";\\n\\n/**\\n * @title UsernameNFT\\n * @dev UsernameNFT contract represents the NFTs for usernames. Each NFT represents a unique username\\n * and has an associated resolved address. The contract also stores the duration for which the username\\n * is registered and the timestamp when it was minted or renewed.\\n */\\ncontract UsernameNFT is ERC721, Ownable {\\n    using LibString for address;\\n    using LibString for uint256;\\n\\n    string public domain;\\n\\n    constructor(\\n        string memory name,\\n        string memory symbol,\\n        string memory _domain\\n    ) ERC721(name, symbol) {\\n        domain = _domain;\\n    }\\n\\n    uint256 public totalSupply;\\n    UsernameController public controller;\\n    struct TokenData {\\n        uint96 mintTimestamp;\\n        uint96 duration;\\n        address resolveAddress;\\n        string name;\\n    }\\n\\n    mapping(uint256 => TokenData) public tokenData;\\n    mapping(address => uint256) public primaryNameTokenId;\\n\\n    event NameRegistered(\\n        address indexed resolveAddress,\\n        string name,\\n        uint256 tokenId\\n    );\\n    event TokenDataUpdated(\\n        address indexed resolveAddress,\\n        string name,\\n        uint256 tokenId\\n    );\\n    event ResolveAddressUpdated(\\n        address indexed oldResolveAddress,\\n        address indexed newResolveAddress,\\n        string name,\\n        uint256 tokenId\\n    );\\n    event PrimaryNameUpdated(address indexed addr, string newPrimaryName);\\n\\n    error OnlyControllerError();\\n    error OnlyNFTOwnerError();\\n    error NameAlreadyRegisteredError();\\n    error NameNotRegisteredError();\\n    error AddressNotRegisteredError();\\n    error ZeroAddressNotAvailableError();\\n    error InvalidTokenError();\\n\\n    modifier onlyController() {\\n        if (msg.sender != address(controller)) {\\n            revert OnlyControllerError();\\n        }\\n        _;\\n    }\\n\\n    modifier onlyNFTOwner(uint256 tokenId) {\\n        if (msg.sender != ownerOf(tokenId)) {\\n            revert OnlyNFTOwnerError();\\n        }\\n        _;\\n    }\\n\\n    modifier onlyResolveAddress(uint256 tokenId) {\\n        if (msg.sender != tokenData[tokenId].resolveAddress) {\\n            revert AddressNotRegisteredError();\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @notice Sets the controller contract address.\\n     * @param _controller address - The address of the controller contract.\\n     * @dev The controller contract is responsible for minting and updating token data.\\n     */\\n    function setController(address _controller) external onlyOwner {\\n        controller = UsernameController(_controller);\\n    }\\n\\n    // \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\n    // Token management functions:\\n    // \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\n\\n    /**\\n     * @notice Mints a new NFT for a given name if it's available.\\n     * @param to The address of the user who will own the NFT.\\n     * @param name The desired username.\\n     * @param duration The duration for which the username will be registered.\\n     * @return uint256 The token ID of the minted NFT.\\n     * @dev This function can only be called by the controller contract. It checks if the name is available\\n     * and mints a new NFT with the given token data if it is.\\n     */\\n    function mint(\\n        address to,\\n        string memory name,\\n        uint96 duration\\n    ) external onlyController returns (uint256) {\\n        uint256 tokenId = nameToTokenId(name);\\n\\n        if (_exists(tokenId)) {\\n            if (!isExpired(tokenId)) {\\n                revert NameAlreadyRegisteredError();\\n            } else {\\n                _burn(tokenId);\\n            }\\n        }\\n\\n        totalSupply++;\\n        _safeMint(to, tokenId);\\n        tokenData[tokenId] = TokenData({\\n            resolveAddress: to,\\n            mintTimestamp: uint96(block.timestamp),\\n            duration: duration,\\n            name: name\\n        });\\n\\n        //if primary name not set for resolve address, set it\\n        if (primaryNameTokenId[to] == 0) {\\n            primaryNameTokenId[to] = tokenId;\\n        }\\n\\n        emit NameRegistered(to, name, tokenId);\\n        return tokenId;\\n    }\\n\\n    /**\\n     * @notice Updates the token data for a given NFT.\\n     * @param tokenId The token ID of the NFT to be updated.\\n     * @param data The updated token data.\\n     * @dev This function can only be called by the controller contract. It updates the token data\\n     * for the given tokenId with the provided data.\\n     */\\n    function updateTokenData(\\n        uint256 tokenId,\\n        TokenData memory data\\n    ) external onlyController {\\n        tokenData[tokenId] = data;\\n        if (data.resolveAddress == address(0)) {\\n            revert ZeroAddressNotAvailableError();\\n        }\\n        emit TokenDataUpdated(data.resolveAddress, data.name, tokenId);\\n    }\\n\\n    // \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\n    // Name and address resolution functions:\\n    // \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\n\\n    /**\\n     * @notice Returns the resolved address for a given username.\\n     * @param name The username to be resolved.\\n     * @return address The resolved address of the username.\\n     * @dev This function returns the resolved address for a given username if it is registered and not expired.\\n     * Otherwise, it returns the zero address.\\n     */\\n    function resolveName(string memory name) external view returns (address) {\\n        uint256 tokenId = nameToTokenId(name);\\n        if (!_exists(tokenId) || isExpired(tokenId)) {\\n            return address(0);\\n        }\\n        return tokenData[tokenId].resolveAddress;\\n    }\\n\\n    /**\\n     * @notice Returns the username for a given resolved address.\\n     * @param addr The owner address to be resolved.\\n     * @return string memory The username associated with the resolved address.\\n     * @dev This function returns the username associated with a given resolved address if it is registered and not expired.\\n     * Otherwise, it returns an empty string.\\n     */\\n    function resolveAddress(address addr) public view returns (string memory) {\\n        uint256 tokenId = primaryNameTokenId[addr];\\n        if (isExpired(tokenId)) {\\n            return \\\"\\\";\\n        }\\n        return tokenData[tokenId].name;\\n    }\\n\\n    /**\\n     * @notice Converts a given name to its corresponding token ID.\\n     * @param name The name to be converted.\\n     * @return uint256 The token ID corresponding to the given name.\\n     * @dev This function calculates the token ID by hashing the given name using the keccak256 hash function.\\n     */\\n    function nameToTokenId(string memory name) public pure returns (uint256) {\\n        return uint256(keccak256(abi.encodePacked(name)));\\n    }\\n\\n    // \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\n    // Token data update functions:\\n    // \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\n\\n    /**\\n     * @notice Updates the primary name for a given resolved address.\\n     * @param tokenId The token ID of the NFT to be updated.\\n     * @dev This function can only be called by resolved address of the NFT. It updates the primary name\\n     * for the given tokenId with the provided newResolvedAddress. It also updates the primary name\\n     * for the old and new resolved addresses if needed.\\n     */\\n    function updatePrimaryName(\\n        uint256 tokenId\\n    ) external onlyResolveAddress(tokenId) {\\n        primaryNameTokenId[msg.sender] = tokenId;\\n        emit PrimaryNameUpdated(msg.sender, tokenData[tokenId].name);\\n    }\\n\\n    /**\\n     * @notice Updates the resolved address for a given NFT.\\n     * @param tokenId The token ID of the NFT to be updated.\\n     * @param newResolveAddress The new resolved address.\\n     * @dev This function can only be called by the owner of the NFT. It updates the resolved address\\n     * for the given tokenId with the provided newResolvedAddress. It also updates the primary name\\n     * for the old and new resolved addresses if needed.\\n     */\\n    function updateResolveAddress(\\n        uint256 tokenId,\\n        address newResolveAddress\\n    ) external onlyNFTOwner(tokenId) {\\n        if (newResolveAddress == address(0)) {\\n            revert ZeroAddressNotAvailableError();\\n        }\\n\\n        address oldResolveAddress = tokenData[tokenId].resolveAddress;\\n        tokenData[tokenId].resolveAddress = newResolveAddress;\\n\\n        // Update primary name for old resolve address if it was the primary name\\n        if (primaryNameTokenId[oldResolveAddress] == tokenId) {\\n            primaryNameTokenId[oldResolveAddress] = 0;\\n        }\\n\\n        // Update primary name for new resolve address if not set\\n        if (primaryNameTokenId[newResolveAddress] == 0) {\\n            primaryNameTokenId[newResolveAddress] = tokenId;\\n        }\\n\\n        emit ResolveAddressUpdated(\\n            oldResolveAddress,\\n            newResolveAddress,\\n            tokenData[tokenId].name,\\n            tokenId\\n        );\\n    }\\n\\n    // \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\n    // Token information and utility functions:\\n    // \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\n\\n    /**\\n     * @notice Returns the Unix timestamp of when the given tokenId expires.\\n     * @param tokenId The token ID of the NFT.\\n     * @return uint The Unix timestamp of when the tokenId expires.\\n     * @dev This function calculates the expiration timestamp by adding the duration to the mint timestamp\\n     * of the given tokenId.\\n     */\\n    function nameExpires(uint256 tokenId) public view returns (uint) {\\n        TokenData memory data = tokenData[tokenId];\\n        return data.mintTimestamp + data.duration;\\n    }\\n\\n    /**\\n     * @notice Checks if a given tokenId is expired.\\n     * @param tokenId The token ID of the NFT.\\n     * @return bool True if the tokenId is expired, false otherwise.\\n     * @dev This function checks if the current block timestamp is greater than the expiration timestamp\\n     * of the given tokenId.\\n     */\\n    function isExpired(uint256 tokenId) public view returns (bool) {\\n        return block.timestamp > nameExpires(tokenId);\\n    }\\n\\n    /**\\n     * @notice Checks if a given name is available for registration.\\n     * @param name The name to be checked for availability.\\n     * @return bool True if the name is available, false otherwise.\\n     * @dev This function checks if the given name is not registered or if the associated tokenId is expired.\\n     */\\n    function available(string memory name) external view returns (bool) {\\n        return isExpired(nameToTokenId(name));\\n    }\\n\\n    /**\\n     * @notice Returns the display name for a given address.\\n     * @param tokenId The token ID to be resolved.\\n     * @return string memory The display name associated with the address.\\n     * @dev This function first resolves the address to its associated username using the resolveAddress function.\\n     * If an active, valid username is found, it appends the domain to the username and returns the resulting display name.\\n     * Example: If the username is \\\"alice\\\" and the domain is \\\"example\\\", the display name will be \\\"alice.example\\\".\\n     */\\n    function getDisplayName(\\n        uint256 tokenId\\n    ) public view returns (string memory) {\\n        return string(abi.encodePacked(tokenData[tokenId].name, \\\".\\\", domain));\\n    }\\n\\n    // \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\n    // Metadata and SVG generation functions:\\n    // \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\n\\n    /**\\n     * @notice Generates an SVG image for a given tokenId.\\n     * @param tokenId The token ID to be used for generating the SVG.\\n     * @return string memory The generated SVG image as a string.\\n     * @dev This function generates an SVG image for the given tokenId by concatenating\\n     * predefined SVG parts and the tokenId as a string. The resulting SVG image is returned.\\n     */\\n    function generateSVG(\\n        uint256 tokenId\\n    ) internal view returns (string memory) {\\n        string[3] memory parts;\\n\\n        parts[\\n            0\\n        ] = '<svg width=\\\"1080\\\" height=\\\"1080\\\" viewBox=\\\"0 0 1080 1080\\\" fill=\\\"none\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"> <g clip-path=\\\"url(#clip0_2657_6961)\\\"> <rect width=\\\"1080\\\" height=\\\"1080\\\" rx=\\\"120\\\" fill=\\\"#131315\\\"/> <path d=\\\"M279 -31L-18 266H1124.5L256 1134.5\\\" stroke=\\\"#231032\\\" stroke-width=\\\"29\\\"/> <path d=\\\"M277 262L-18 557H1124.5L256 1425.5\\\" stroke=\\\"#231032\\\" stroke-width=\\\"29\\\"/> <rect x=\\\"-45\\\" y=\\\"749\\\" width=\\\"1159\\\" height=\\\"237\\\" fill=\\\"#321747\\\"/> <text fill=\\\"#8E34D5\\\" xml:space=\\\"preserve\\\" style=\\\"white-space: pre\\\" font-family=\\\"Arial\\\" font-size=\\\"96\\\" letter-spacing=\\\"-0.04em\\\"><tspan x=\\\"63\\\" y=\\\"899.281\\\">';\\n        parts[1] = getDisplayName(tokenId);\\n        parts[\\n            2\\n        ] = '</tspan></text> <g clip-path=\\\"url(#clip1_2657_6961)\\\"> <path d=\\\"M176.396 167.367L205.797 150.901C207.356 150.027 208.319 148.405 208.319 146.664V113.731C208.319 111.991 207.356 110.369 205.797 109.494L176.396 93.0278C174.838 92.1531 172.903 92.1616 171.353 93.0278L141.952 109.494C140.394 110.369 139.431 111.991 139.431 113.731V172.581L118.812 184.122L98.1925 172.581V149.492L118.812 137.951L132.409 145.568V130.079L121.333 123.871C120.571 123.446 119.696 123.217 118.812 123.217C117.927 123.217 117.052 123.446 116.29 123.871L86.8892 140.337C85.3308 141.212 84.3677 142.834 84.3677 144.575V177.507C84.3677 179.248 85.3308 180.87 86.8892 181.744L116.29 198.211C117.849 199.077 119.775 199.077 121.333 198.211L150.734 181.744C152.293 180.87 153.256 179.248 153.256 177.507V118.657L153.623 118.453L173.866 107.116L194.485 118.657V141.747L173.866 153.287L160.286 145.687V161.177L171.344 167.367C172.903 168.234 174.838 168.234 176.388 167.367H176.396Z\\\" fill=\\\"url(#paint0_linear_2657_6961)\\\"/> <path d=\\\"M240.723 184.613V117.492H251.019L252 122.91H252.49C255.432 119.199 260.431 116.541 267.392 116.541C280.131 116.541 290.331 126.621 290.331 141.542C290.331 156.462 280.14 166.542 267.392 166.542C260.528 166.542 255.73 163.782 253.182 160.649H252.691V184.605H240.731L240.723 184.613ZM278.362 141.55C278.362 132.803 272.575 127.292 265.518 127.292C258.461 127.292 252.674 132.803 252.674 141.55C252.674 150.297 258.461 155.808 265.518 155.808C272.575 155.808 278.362 150.297 278.362 141.55Z\\\" fill=\\\"#F7F5F4\\\"/> <path d=\\\"M296.398 141.542C296.398 126.995 307.176 116.541 321.588 116.541C335.999 116.541 346.777 126.995 346.777 141.542C346.777 156.089 335.999 166.542 321.588 166.542C307.176 166.542 296.398 155.987 296.398 141.542ZM334.721 141.542C334.721 132.982 328.837 127.283 321.588 127.283C314.338 127.283 308.358 132.99 308.358 141.542C308.358 150.093 314.338 155.706 321.588 155.706C328.837 155.706 334.721 150.102 334.721 141.542Z\\\" fill=\\\"#F7F5F4\\\"/> <path d=\\\"M355.437 165.601V99.0488H367.396V165.601H355.437Z\\\" fill=\\\"#F7F5F4\\\"/> <path d=\\\"M411.804 117.492H424.544L402.979 175.96C400.825 181.76 397.883 184.614 390.135 184.614H378.569V173.871H388.375C390.143 173.871 391.115 173.013 391.711 171.587L392.884 168.453L372.694 117.492H385.433L398.277 150.866H400.239L411.804 117.492Z\\\" fill=\\\"#F7F5F4\\\"/> <path d=\\\"M426.82 167.977H438.973C439.463 171.111 442.694 175.391 450.346 175.391C457.499 175.391 462.21 171.018 462.21 164.36V157.609H461.719C459.075 160.369 454.172 162.84 447.894 162.84C435.155 162.84 425.349 153.329 425.349 139.639C425.349 125.95 435.155 116.541 447.894 116.541C454.461 116.541 459.268 119.106 462.306 122.723H462.796L463.777 117.492H474.17V164.36C474.17 177.098 465.344 185.565 450.346 185.565C433.588 185.565 427.118 174.915 426.82 167.977ZM462.21 139.648C462.21 132.141 456.72 126.91 449.759 126.91C442.799 126.91 437.405 132.141 437.405 139.648C437.405 147.155 442.895 152.479 449.759 152.479C456.624 152.479 462.21 147.248 462.21 139.648Z\\\" fill=\\\"#F7F5F4\\\"/> <path d=\\\"M482.487 141.542C482.487 126.995 493.265 116.541 507.677 116.541C522.088 116.541 532.866 126.995 532.866 141.542C532.866 156.089 522.088 166.542 507.677 166.542C493.265 166.542 482.487 155.987 482.487 141.542ZM520.81 141.542C520.81 132.982 514.926 127.283 507.677 127.283C500.427 127.283 494.447 132.99 494.447 141.542C494.447 150.093 500.427 155.706 507.677 155.706C514.926 155.706 520.81 150.102 520.81 141.542Z\\\" fill=\\\"#F7F5F4\\\"/> <path d=\\\"M541.192 165.6V117.492H551.48L552.461 122.052H552.951C554.912 119.87 559.815 116.541 567.257 116.541C578.631 116.541 586.861 124.524 586.861 136.693V165.591H574.901V138.213C574.901 132.031 570.392 127.564 564.219 127.564C558.047 127.564 553.144 132.226 553.144 138.213V165.591H541.184L541.192 165.6Z\\\" fill=\\\"#F7F5F4\\\"/> <path d=\\\"M644.352 165.167H609.328V160.723L637.004 123.791H609.805V118.885H643.875V123.328L616.199 160.261H644.352V165.167Z\\\" fill=\\\"#F7F5F4\\\"/> <path d=\\\"M660.18 165.167H654.836V100.373H660.18V140.268L683.848 118.886H690.91L665.811 141.564L691.865 165.167H684.802L660.18 142.86V165.167Z\\\" fill=\\\"#F7F5F4\\\"/> <path d=\\\"M742.411 165.167H700.42V100.373H742.411V105.649H706.146V129.808H740.502V135.084H706.146V159.891H742.411V165.167Z\\\" fill=\\\"#F7F5F4\\\"/> <path d=\\\"M783.056 165.167H773.799L749.654 100.373H755.762L777.425 159.336H779.429L801.188 100.373H807.201L783.056 165.167Z\\\" fill=\\\"#F7F5F4\\\"/> <path d=\\\"M822.644 165.167H816.918V100.373H827.893L850.32 158.966H852.229L874.656 100.373H885.631V165.167H879.905V107.5H877.996L855.855 165.167H846.598L824.553 107.5H822.644V165.167Z\\\" fill=\\\"#F7F5F4\\\"/> </g> </g> <defs> <linearGradient id=\\\"paint0_linear_2657_6961\\\" x1=\\\"83.9649\\\" y1=\\\"180.734\\\" x2=\\\"201.135\\\" y2=\\\"110.615\\\" gradientUnits=\\\"userSpaceOnUse\\\"> <stop stop-color=\\\"#A726C1\\\"/> <stop offset=\\\"0.88\\\" stop-color=\\\"#803BDF\\\"/> <stop offset=\\\"1\\\" stop-color=\\\"#7B3FE4\\\"/> </linearGradient> <clipPath id=\\\"clip0_2657_6961\\\"> <rect width=\\\"1080\\\" height=\\\"1080\\\" rx=\\\"120\\\" fill=\\\"white\\\"/> </clipPath> <clipPath id=\\\"clip1_2657_6961\\\"> <rect width=\\\"802\\\" height=\\\"107\\\" fill=\\\"white\\\" transform=\\\"translate(84 92)\\\"/> </clipPath> </defs> </svg>';\\n\\n        return string(abi.encodePacked(parts[0], parts[1], parts[2]));\\n    }\\n\\n    /**\\n     * @notice Generates a JSON string containing the attributes for a given token ID.\\n     * @param tokenId The token ID to be used for generating the attributes.\\n     * @return string memory The generated JSON string containing the attributes.\\n     * @dev This function generates a JSON string containing various attributes associated with the token ID.\\n     * The attributes include tokenId, name, resolvedAddress, and expiresAt.\\n     */\\n    function generateAttributes(\\n        uint256 tokenId\\n    ) internal view returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    '[{\\\"trait_type\\\": \\\"tokenId\\\", \\\"value\\\": \\\"',\\n                    tokenId.toString(),\\n                    '\\\"}, {\\\"trait_type\\\": \\\"name\\\", \\\"value\\\": \\\"',\\n                    getDisplayName(tokenId),\\n                    '\\\"}, {\\\"trait_type\\\": \\\"resolvedAddress\\\", \\\"value\\\": \\\"',\\n                    tokenData[tokenId].resolveAddress.toHexString(),\\n                    '\\\"}, {\\\"trait_type\\\": \\\"expiresAt\\\", \\\"value\\\": \\\"',\\n                    LibString.toString(nameExpires(tokenId)),\\n                    '\\\"}]'\\n                )\\n            );\\n    }\\n\\n    /**\\n     * @notice Generates a JSON string containing metadata for a given token ID.\\n     * @param tokenId The token ID to be used for generating the metadata.\\n     * @return string memory The generated JSON string containing the metadata.\\n     * @dev This function generates a JSON string containing metadata associated with the token ID.\\n     * The metadata includes the name, description, image (as a base64-encoded SVG), and attributes.\\n     */\\n    function generateJSON(\\n        uint256 tokenId\\n    ) internal view returns (string memory) {\\n        string\\n            memory description = unicode\\\"Username NFTs are non-fungible tokens that represent usernames on Polygon's zkEVM.\\\";\\n\\n        string memory attributes = generateAttributes(tokenId);\\n\\n        return\\n            string(\\n                abi.encodePacked(\\n                    '{\\\"name\\\": \\\".zkevm Username ',\\n                    getDisplayName(tokenId),\\n                    '\\\", \\\"description\\\": \\\"',\\n                    description,\\n                    '\\\", \\\"image\\\": \\\"data:image/svg+xml;base64,',\\n                    Base64.encode(bytes(generateSVG(tokenId))),\\n                    '\\\", \\\"attributes\\\": ',\\n                    attributes,\\n                    \\\"}\\\"\\n                )\\n            );\\n    }\\n\\n    /**\\n     * @notice Returns the URI for a given NFT.\\n     * @param tokenId The token ID of the NFT.\\n     * @return string memory The URI of the NFT.\\n     * @dev This function returns the URI of the NFT by encoding the generated JSON metadata as a base64 string.\\n     * The URI can be used to retrieve metadata associated with the NFT, such as a JSON file containing\\n     * information about the NFT's properties, image, and other attributes.\\n     */\\n    function tokenURI(\\n        uint256 tokenId\\n    ) public view override returns (string memory) {\\n        if (!_exists(tokenId)) {\\n            revert InvalidTokenError();\\n        }\\n\\n        string memory json = Base64.encode(bytes(generateJSON(tokenId)));\\n\\n        return string(abi.encodePacked(\\\"data:application/json;base64,\\\", json));\\n    }\\n}\\n\",\"keccak256\":\"0xb112a1663f957ad9caeae4dd53df888acfe56f72c6097076bc5e9e616545aca3\"},\"solady/src/utils/Base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/// @notice Library to encode strings in Base64.\\n/// @author Solady (https://github.com/vectorized/solady/blob/main/src/utils/Base64.sol)\\n/// @author Modified from Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/Base64.sol)\\n/// @author Modified from (https://github.com/Brechtpd/base64/blob/main/base64.sol) by Brecht Devos - <brecht@loopring.org>.\\nlibrary Base64 {\\n    /// @dev Encodes `data` using the base64 encoding described in RFC 4648.\\n    /// See: https://datatracker.ietf.org/doc/html/rfc4648\\n    /// @param fileSafe  Whether to replace '+' with '-' and '/' with '_'.\\n    /// @param noPadding Whether to strip away the padding.\\n    function encode(bytes memory data, bool fileSafe, bool noPadding)\\n        internal\\n        pure\\n        returns (string memory result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let dataLength := mload(data)\\n\\n            if dataLength {\\n                // Multiply by 4/3 rounded up.\\n                // The `shl(2, ...)` is equivalent to multiplying by 4.\\n                let encodedLength := shl(2, div(add(dataLength, 2), 3))\\n\\n                // Set `result` to point to the start of the free memory.\\n                result := mload(0x40)\\n\\n                // Store the table into the scratch space.\\n                // Offsetted by -1 byte so that the `mload` will load the character.\\n                // We will rewrite the free memory pointer at `0x40` later with\\n                // the allocated size.\\n                // The magic constant 0x0230 will translate \\\"-_\\\" + \\\"+/\\\".\\n                mstore(0x1f, \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdef\\\")\\n                mstore(0x3f, sub(\\\"ghijklmnopqrstuvwxyz0123456789-_\\\", mul(iszero(fileSafe), 0x0230)))\\n\\n                // Skip the first slot, which stores the length.\\n                let ptr := add(result, 0x20)\\n                let end := add(ptr, encodedLength)\\n\\n                // Run over the input, 3 bytes at a time.\\n                for {} 1 {} {\\n                    data := add(data, 3) // Advance 3 bytes.\\n                    let input := mload(data)\\n\\n                    // Write 4 bytes. Optimized for fewer stack operations.\\n                    mstore8(0, mload(and(shr(18, input), 0x3F)))\\n                    mstore8(1, mload(and(shr(12, input), 0x3F)))\\n                    mstore8(2, mload(and(shr(6, input), 0x3F)))\\n                    mstore8(3, mload(and(input, 0x3F)))\\n                    mstore(ptr, mload(0x00))\\n\\n                    ptr := add(ptr, 4) // Advance 4 bytes.\\n\\n                    if iszero(lt(ptr, end)) { break }\\n                }\\n\\n                // Allocate the memory for the string.\\n                // Add 31 and mask with `not(31)` to round the\\n                // free memory pointer up the next multiple of 32.\\n                mstore(0x40, and(add(end, 31), not(31)))\\n\\n                // Equivalent to `o = [0, 2, 1][dataLength % 3]`.\\n                let o := div(2, mod(dataLength, 3))\\n\\n                // Offset `ptr` and pad with '='. We can simply write over the end.\\n                mstore(sub(ptr, o), shl(240, 0x3d3d))\\n                // Set `o` to zero if there is padding.\\n                o := mul(iszero(iszero(noPadding)), o)\\n                // Zeroize the slot after the string.\\n                mstore(sub(ptr, o), 0)\\n                // Write the length of the string.\\n                mstore(result, sub(encodedLength, o))\\n            }\\n        }\\n    }\\n\\n    /// @dev Encodes `data` using the base64 encoding described in RFC 4648.\\n    /// Equivalent to `encode(data, false, false)`.\\n    function encode(bytes memory data) internal pure returns (string memory result) {\\n        result = encode(data, false, false);\\n    }\\n\\n    /// @dev Encodes `data` using the base64 encoding described in RFC 4648.\\n    /// Equivalent to `encode(data, fileSafe, false)`.\\n    function encode(bytes memory data, bool fileSafe)\\n        internal\\n        pure\\n        returns (string memory result)\\n    {\\n        result = encode(data, fileSafe, false);\\n    }\\n\\n    /// @dev Decodes base64 encoded `data`.\\n    ///\\n    /// Supports:\\n    /// - RFC 4648 (both standard and file-safe mode).\\n    /// - RFC 3501 (63: ',').\\n    ///\\n    /// Does not support:\\n    /// - Line breaks.\\n    ///\\n    /// Note: For performance reasons,\\n    /// this function will NOT revert on invalid `data` inputs.\\n    /// Outputs for invalid inputs will simply be undefined behaviour.\\n    /// It is the user's responsibility to ensure that the `data`\\n    /// is a valid base64 encoded string.\\n    function decode(string memory data) internal pure returns (bytes memory result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let dataLength := mload(data)\\n\\n            if dataLength {\\n                let decodedLength := mul(shr(2, dataLength), 3)\\n\\n                for {} 1 {} {\\n                    // If padded.\\n                    if iszero(and(dataLength, 3)) {\\n                        let t := xor(mload(add(data, dataLength)), 0x3d3d)\\n                        // forgefmt: disable-next-item\\n                        decodedLength := sub(\\n                            decodedLength,\\n                            add(iszero(byte(30, t)), iszero(byte(31, t)))\\n                        )\\n                        break\\n                    }\\n                    // If non-padded.\\n                    decodedLength := add(decodedLength, sub(and(dataLength, 3), 1))\\n                    break\\n                }\\n                result := mload(0x40)\\n\\n                // Write the length of the bytes.\\n                mstore(result, decodedLength)\\n\\n                // Skip the first slot, which stores the length.\\n                let ptr := add(result, 0x20)\\n                let end := add(ptr, decodedLength)\\n\\n                // Load the table into the scratch space.\\n                // Constants are optimized for smaller bytecode with zero gas overhead.\\n                // `m` also doubles as the mask of the upper 6 bits.\\n                let m := 0xfc000000fc00686c7074787c8084888c9094989ca0a4a8acb0b4b8bcc0c4c8cc\\n                mstore(0x5b, m)\\n                mstore(0x3b, 0x04080c1014181c2024282c3034383c4044484c5054585c6064)\\n                mstore(0x1a, 0xf8fcf800fcd0d4d8dce0e4e8ecf0f4)\\n\\n                for {} 1 {} {\\n                    // Read 4 bytes.\\n                    data := add(data, 4)\\n                    let input := mload(data)\\n\\n                    // Write 3 bytes.\\n                    // forgefmt: disable-next-item\\n                    mstore(ptr, or(\\n                        and(m, mload(byte(28, input))),\\n                        shr(6, or(\\n                            and(m, mload(byte(29, input))),\\n                            shr(6, or(\\n                                and(m, mload(byte(30, input))),\\n                                shr(6, mload(byte(31, input)))\\n                            ))\\n                        ))\\n                    ))\\n\\n                    ptr := add(ptr, 3)\\n\\n                    if iszero(lt(ptr, end)) { break }\\n                }\\n\\n                // Allocate the memory for the string.\\n                // Add 31 and mask with `not(31)` to round the\\n                // free memory pointer up the next multiple of 32.\\n                mstore(0x40, and(add(end, 31), not(31)))\\n                // Zeroize the slot after the bytes.\\n                mstore(end, 0)\\n                // Restore the zero slot.\\n                mstore(0x60, 0)\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x43a3ba57694cfc08f2f9d158497680c44a7cdacd4d3feab4556963d6ba67f108\",\"license\":\"MIT\"},\"solady/src/utils/LibString.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/// @notice Library for converting numbers into strings and other string operations.\\n/// @author Solady (https://github.com/vectorized/solady/blob/main/src/utils/LibString.sol)\\n/// @author Modified from Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/LibString.sol)\\nlibrary LibString {\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                        CUSTOM ERRORS                       */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev The `length` of the output is too small to contain all the hex digits.\\n    error HexLengthInsufficient();\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                         CONSTANTS                          */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev The constant returned when the `search` is not found in the string.\\n    uint256 internal constant NOT_FOUND = type(uint256).max;\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                     DECIMAL OPERATIONS                     */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Returns the base 10 decimal representation of `value`.\\n    function toString(uint256 value) internal pure returns (string memory str) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // The maximum value of a uint256 contains 78 digits (1 byte per digit), but\\n            // we allocate 0xa0 bytes to keep the free memory pointer 32-byte word aligned.\\n            // We will need 1 word for the trailing zeros padding, 1 word for the length,\\n            // and 3 words for a maximum of 78 digits.\\n            str := add(mload(0x40), 0x80)\\n            // Update the free memory pointer to allocate.\\n            mstore(0x40, add(str, 0x20))\\n            // Zeroize the slot after the string.\\n            mstore(str, 0)\\n\\n            // Cache the end of the memory to calculate the length later.\\n            let end := str\\n\\n            let w := not(0) // Tsk.\\n            // We write the string from rightmost digit to leftmost digit.\\n            // The following is essentially a do-while loop that also handles the zero case.\\n            for { let temp := value } 1 {} {\\n                str := add(str, w) // `sub(str, 1)`.\\n                // Write the character to the pointer.\\n                // The ASCII index of the '0' character is 48.\\n                mstore8(str, add(48, mod(temp, 10)))\\n                // Keep dividing `temp` until zero.\\n                temp := div(temp, 10)\\n                if iszero(temp) { break }\\n            }\\n\\n            let length := sub(end, str)\\n            // Move the pointer 32 bytes leftwards to make room for the length.\\n            str := sub(str, 0x20)\\n            // Store the length.\\n            mstore(str, length)\\n        }\\n    }\\n\\n    /// @dev Returns the base 10 decimal representation of `value`.\\n    function toString(int256 value) internal pure returns (string memory str) {\\n        if (value >= 0) {\\n            return toString(uint256(value));\\n        }\\n        unchecked {\\n            str = toString(uint256(-value));\\n        }\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // We still have some spare memory space on the left,\\n            // as we have allocated 3 words (96 bytes) for up to 78 digits.\\n            let length := mload(str) // Load the string length.\\n            mstore(str, 0x2d) // Store the '-' character.\\n            str := sub(str, 1) // Move back the string pointer by a byte.\\n            mstore(str, add(length, 1)) // Update the string length.\\n        }\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                   HEXADECIMAL OPERATIONS                   */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Returns the hexadecimal representation of `value`,\\n    /// left-padded to an input length of `length` bytes.\\n    /// The output is prefixed with \\\"0x\\\" encoded using 2 hexadecimal digits per byte,\\n    /// giving a total length of `length * 2 + 2` bytes.\\n    /// Reverts if `length` is too small for the output to contain all the digits.\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory str) {\\n        str = toHexStringNoPrefix(value, length);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let strLength := add(mload(str), 2) // Compute the length.\\n            mstore(str, 0x3078) // Write the \\\"0x\\\" prefix.\\n            str := sub(str, 2) // Move the pointer.\\n            mstore(str, strLength) // Write the length.\\n        }\\n    }\\n\\n    /// @dev Returns the hexadecimal representation of `value`,\\n    /// left-padded to an input length of `length` bytes.\\n    /// The output is prefixed with \\\"0x\\\" encoded using 2 hexadecimal digits per byte,\\n    /// giving a total length of `length * 2` bytes.\\n    /// Reverts if `length` is too small for the output to contain all the digits.\\n    function toHexStringNoPrefix(uint256 value, uint256 length)\\n        internal\\n        pure\\n        returns (string memory str)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // We need 0x20 bytes for the trailing zeros padding, `length * 2` bytes\\n            // for the digits, 0x02 bytes for the prefix, and 0x20 bytes for the length.\\n            // We add 0x20 to the total and round down to a multiple of 0x20.\\n            // (0x20 + 0x20 + 0x02 + 0x20) = 0x62.\\n            str := add(mload(0x40), and(add(shl(1, length), 0x42), not(0x1f)))\\n            // Allocate the memory.\\n            mstore(0x40, add(str, 0x20))\\n            // Zeroize the slot after the string.\\n            mstore(str, 0)\\n\\n            // Cache the end to calculate the length later.\\n            let end := str\\n            // Store \\\"0123456789abcdef\\\" in scratch space.\\n            mstore(0x0f, 0x30313233343536373839616263646566)\\n\\n            let start := sub(str, add(length, length))\\n            let w := not(1) // Tsk.\\n            let temp := value\\n            // We write the string from rightmost digit to leftmost digit.\\n            // The following is essentially a do-while loop that also handles the zero case.\\n            for {} 1 {} {\\n                str := add(str, w) // `sub(str, 2)`.\\n                mstore8(add(str, 1), mload(and(temp, 15)))\\n                mstore8(str, mload(and(shr(4, temp), 15)))\\n                temp := shr(8, temp)\\n                if iszero(xor(str, start)) { break }\\n            }\\n\\n            if temp {\\n                // Store the function selector of `HexLengthInsufficient()`.\\n                mstore(0x00, 0x2194895a)\\n                // Revert with (offset, size).\\n                revert(0x1c, 0x04)\\n            }\\n\\n            // Compute the string's length.\\n            let strLength := sub(end, str)\\n            // Move the pointer and write the length.\\n            str := sub(str, 0x20)\\n            mstore(str, strLength)\\n        }\\n    }\\n\\n    /// @dev Returns the hexadecimal representation of `value`.\\n    /// The output is prefixed with \\\"0x\\\" and encoded using 2 hexadecimal digits per byte.\\n    /// As address are 20 bytes long, the output will left-padded to have\\n    /// a length of `20 * 2 + 2` bytes.\\n    function toHexString(uint256 value) internal pure returns (string memory str) {\\n        str = toHexStringNoPrefix(value);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let strLength := add(mload(str), 2) // Compute the length.\\n            mstore(str, 0x3078) // Write the \\\"0x\\\" prefix.\\n            str := sub(str, 2) // Move the pointer.\\n            mstore(str, strLength) // Write the length.\\n        }\\n    }\\n\\n    /// @dev Returns the hexadecimal representation of `value`.\\n    /// The output is encoded using 2 hexadecimal digits per byte.\\n    /// As address are 20 bytes long, the output will left-padded to have\\n    /// a length of `20 * 2` bytes.\\n    function toHexStringNoPrefix(uint256 value) internal pure returns (string memory str) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // We need 0x20 bytes for the trailing zeros padding, 0x20 bytes for the length,\\n            // 0x02 bytes for the prefix, and 0x40 bytes for the digits.\\n            // The next multiple of 0x20 above (0x20 + 0x20 + 0x02 + 0x40) is 0xa0.\\n            str := add(mload(0x40), 0x80)\\n            // Allocate the memory.\\n            mstore(0x40, add(str, 0x20))\\n            // Zeroize the slot after the string.\\n            mstore(str, 0)\\n\\n            // Cache the end to calculate the length later.\\n            let end := str\\n            // Store \\\"0123456789abcdef\\\" in scratch space.\\n            mstore(0x0f, 0x30313233343536373839616263646566)\\n\\n            let w := not(1) // Tsk.\\n            // We write the string from rightmost digit to leftmost digit.\\n            // The following is essentially a do-while loop that also handles the zero case.\\n            for { let temp := value } 1 {} {\\n                str := add(str, w) // `sub(str, 2)`.\\n                mstore8(add(str, 1), mload(and(temp, 15)))\\n                mstore8(str, mload(and(shr(4, temp), 15)))\\n                temp := shr(8, temp)\\n                if iszero(temp) { break }\\n            }\\n\\n            // Compute the string's length.\\n            let strLength := sub(end, str)\\n            // Move the pointer and write the length.\\n            str := sub(str, 0x20)\\n            mstore(str, strLength)\\n        }\\n    }\\n\\n    /// @dev Returns the hexadecimal representation of `value`.\\n    /// The output is prefixed with \\\"0x\\\", encoded using 2 hexadecimal digits per byte,\\n    /// and the alphabets are capitalized conditionally according to\\n    /// https://eips.ethereum.org/EIPS/eip-55\\n    function toHexStringChecksumed(address value) internal pure returns (string memory str) {\\n        str = toHexString(value);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let mask := shl(6, div(not(0), 255)) // `0b010000000100000000 ...`\\n            let o := add(str, 0x22)\\n            let hashed := and(keccak256(o, 40), mul(34, mask)) // `0b10001000 ... `\\n            let t := shl(240, 136) // `0b10001000 << 240`\\n            for { let i := 0 } 1 {} {\\n                mstore(add(i, i), mul(t, byte(i, hashed)))\\n                i := add(i, 1)\\n                if eq(i, 20) { break }\\n            }\\n            mstore(o, xor(mload(o), shr(1, and(mload(0x00), and(mload(o), mask)))))\\n            o := add(o, 0x20)\\n            mstore(o, xor(mload(o), shr(1, and(mload(0x20), and(mload(o), mask)))))\\n        }\\n    }\\n\\n    /// @dev Returns the hexadecimal representation of `value`.\\n    /// The output is prefixed with \\\"0x\\\" and encoded using 2 hexadecimal digits per byte.\\n    function toHexString(address value) internal pure returns (string memory str) {\\n        str = toHexStringNoPrefix(value);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let strLength := add(mload(str), 2) // Compute the length.\\n            mstore(str, 0x3078) // Write the \\\"0x\\\" prefix.\\n            str := sub(str, 2) // Move the pointer.\\n            mstore(str, strLength) // Write the length.\\n        }\\n    }\\n\\n    /// @dev Returns the hexadecimal representation of `value`.\\n    /// The output is encoded using 2 hexadecimal digits per byte.\\n    function toHexStringNoPrefix(address value) internal pure returns (string memory str) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            str := mload(0x40)\\n\\n            // Allocate the memory.\\n            // We need 0x20 bytes for the trailing zeros padding, 0x20 bytes for the length,\\n            // 0x02 bytes for the prefix, and 0x28 bytes for the digits.\\n            // The next multiple of 0x20 above (0x20 + 0x20 + 0x02 + 0x28) is 0x80.\\n            mstore(0x40, add(str, 0x80))\\n\\n            // Store \\\"0123456789abcdef\\\" in scratch space.\\n            mstore(0x0f, 0x30313233343536373839616263646566)\\n\\n            str := add(str, 2)\\n            mstore(str, 40)\\n\\n            let o := add(str, 0x20)\\n            mstore(add(o, 40), 0)\\n\\n            value := shl(96, value)\\n\\n            // We write the string from rightmost digit to leftmost digit.\\n            // The following is essentially a do-while loop that also handles the zero case.\\n            for { let i := 0 } 1 {} {\\n                let p := add(o, add(i, i))\\n                let temp := byte(i, value)\\n                mstore8(add(p, 1), mload(and(temp, 15)))\\n                mstore8(p, mload(shr(4, temp)))\\n                i := add(i, 1)\\n                if eq(i, 20) { break }\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns the hex encoded string from the raw bytes.\\n    /// The output is encoded using 2 hexadecimal digits per byte.\\n    function toHexString(bytes memory raw) internal pure returns (string memory str) {\\n        str = toHexStringNoPrefix(raw);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let strLength := add(mload(str), 2) // Compute the length.\\n            mstore(str, 0x3078) // Write the \\\"0x\\\" prefix.\\n            str := sub(str, 2) // Move the pointer.\\n            mstore(str, strLength) // Write the length.\\n        }\\n    }\\n\\n    /// @dev Returns the hex encoded string from the raw bytes.\\n    /// The output is encoded using 2 hexadecimal digits per byte.\\n    function toHexStringNoPrefix(bytes memory raw) internal pure returns (string memory str) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let length := mload(raw)\\n            str := add(mload(0x40), 2) // Skip 2 bytes for the optional prefix.\\n            mstore(str, add(length, length)) // Store the length of the output.\\n\\n            // Store \\\"0123456789abcdef\\\" in scratch space.\\n            mstore(0x0f, 0x30313233343536373839616263646566)\\n\\n            let o := add(str, 0x20)\\n            let end := add(raw, length)\\n\\n            for {} iszero(eq(raw, end)) {} {\\n                raw := add(raw, 1)\\n                mstore8(add(o, 1), mload(and(mload(raw), 15)))\\n                mstore8(o, mload(and(shr(4, mload(raw)), 15)))\\n                o := add(o, 2)\\n            }\\n            mstore(o, 0) // Zeroize the slot after the string.\\n            mstore(0x40, and(add(o, 31), not(31))) // Allocate the memory.\\n        }\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                   RUNE STRING OPERATIONS                   */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Returns the number of UTF characters in the string.\\n    function runeCount(string memory s) internal pure returns (uint256 result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            if mload(s) {\\n                mstore(0x00, div(not(0), 255))\\n                mstore(0x20, 0x0202020202020202020202020202020202020202020202020303030304040506)\\n                let o := add(s, 0x20)\\n                let end := add(o, mload(s))\\n                for { result := 1 } 1 { result := add(result, 1) } {\\n                    o := add(o, byte(0, mload(shr(250, mload(o)))))\\n                    if iszero(lt(o, end)) { break }\\n                }\\n            }\\n        }\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                   BYTE STRING OPERATIONS                   */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    // For performance and bytecode compactness, all indices of the following operations\\n    // are byte (ASCII) offsets, not UTF character offsets.\\n\\n    /// @dev Returns `subject` all occurrences of `search` replaced with `replacement`.\\n    function replace(string memory subject, string memory search, string memory replacement)\\n        internal\\n        pure\\n        returns (string memory result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let subjectLength := mload(subject)\\n            let searchLength := mload(search)\\n            let replacementLength := mload(replacement)\\n\\n            subject := add(subject, 0x20)\\n            search := add(search, 0x20)\\n            replacement := add(replacement, 0x20)\\n            result := add(mload(0x40), 0x20)\\n\\n            let subjectEnd := add(subject, subjectLength)\\n            if iszero(gt(searchLength, subjectLength)) {\\n                let subjectSearchEnd := add(sub(subjectEnd, searchLength), 1)\\n                let h := 0\\n                if iszero(lt(searchLength, 32)) { h := keccak256(search, searchLength) }\\n                let m := shl(3, sub(32, and(searchLength, 31)))\\n                let s := mload(search)\\n                for {} 1 {} {\\n                    let t := mload(subject)\\n                    // Whether the first `searchLength % 32` bytes of\\n                    // `subject` and `search` matches.\\n                    if iszero(shr(m, xor(t, s))) {\\n                        if h {\\n                            if iszero(eq(keccak256(subject, searchLength), h)) {\\n                                mstore(result, t)\\n                                result := add(result, 1)\\n                                subject := add(subject, 1)\\n                                if iszero(lt(subject, subjectSearchEnd)) { break }\\n                                continue\\n                            }\\n                        }\\n                        // Copy the `replacement` one word at a time.\\n                        for { let o := 0 } 1 {} {\\n                            mstore(add(result, o), mload(add(replacement, o)))\\n                            o := add(o, 0x20)\\n                            if iszero(lt(o, replacementLength)) { break }\\n                        }\\n                        result := add(result, replacementLength)\\n                        subject := add(subject, searchLength)\\n                        if searchLength {\\n                            if iszero(lt(subject, subjectSearchEnd)) { break }\\n                            continue\\n                        }\\n                    }\\n                    mstore(result, t)\\n                    result := add(result, 1)\\n                    subject := add(subject, 1)\\n                    if iszero(lt(subject, subjectSearchEnd)) { break }\\n                }\\n            }\\n\\n            let resultRemainder := result\\n            result := add(mload(0x40), 0x20)\\n            let k := add(sub(resultRemainder, result), sub(subjectEnd, subject))\\n            // Copy the rest of the string one word at a time.\\n            for {} lt(subject, subjectEnd) {} {\\n                mstore(resultRemainder, mload(subject))\\n                resultRemainder := add(resultRemainder, 0x20)\\n                subject := add(subject, 0x20)\\n            }\\n            result := sub(result, 0x20)\\n            // Zeroize the slot after the string.\\n            let last := add(add(result, 0x20), k)\\n            mstore(last, 0)\\n            // Allocate memory for the length and the bytes,\\n            // rounded up to a multiple of 32.\\n            mstore(0x40, and(add(last, 31), not(31)))\\n            // Store the length of the result.\\n            mstore(result, k)\\n        }\\n    }\\n\\n    /// @dev Returns the byte index of the first location of `search` in `subject`,\\n    /// searching from left to right, starting from `from`.\\n    /// Returns `NOT_FOUND` (i.e. `type(uint256).max`) if the `search` is not found.\\n    function indexOf(string memory subject, string memory search, uint256 from)\\n        internal\\n        pure\\n        returns (uint256 result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            for { let subjectLength := mload(subject) } 1 {} {\\n                if iszero(mload(search)) {\\n                    if iszero(gt(from, subjectLength)) {\\n                        result := from\\n                        break\\n                    }\\n                    result := subjectLength\\n                    break\\n                }\\n                let searchLength := mload(search)\\n                let subjectStart := add(subject, 0x20)\\n\\n                result := not(0) // Initialize to `NOT_FOUND`.\\n\\n                subject := add(subjectStart, from)\\n                let end := add(sub(add(subjectStart, subjectLength), searchLength), 1)\\n\\n                let m := shl(3, sub(32, and(searchLength, 31)))\\n                let s := mload(add(search, 0x20))\\n\\n                if iszero(and(lt(subject, end), lt(from, subjectLength))) { break }\\n\\n                if iszero(lt(searchLength, 32)) {\\n                    for { let h := keccak256(add(search, 0x20), searchLength) } 1 {} {\\n                        if iszero(shr(m, xor(mload(subject), s))) {\\n                            if eq(keccak256(subject, searchLength), h) {\\n                                result := sub(subject, subjectStart)\\n                                break\\n                            }\\n                        }\\n                        subject := add(subject, 1)\\n                        if iszero(lt(subject, end)) { break }\\n                    }\\n                    break\\n                }\\n                for {} 1 {} {\\n                    if iszero(shr(m, xor(mload(subject), s))) {\\n                        result := sub(subject, subjectStart)\\n                        break\\n                    }\\n                    subject := add(subject, 1)\\n                    if iszero(lt(subject, end)) { break }\\n                }\\n                break\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns the byte index of the first location of `search` in `subject`,\\n    /// searching from left to right.\\n    /// Returns `NOT_FOUND` (i.e. `type(uint256).max`) if the `search` is not found.\\n    function indexOf(string memory subject, string memory search)\\n        internal\\n        pure\\n        returns (uint256 result)\\n    {\\n        result = indexOf(subject, search, 0);\\n    }\\n\\n    /// @dev Returns the byte index of the first location of `search` in `subject`,\\n    /// searching from right to left, starting from `from`.\\n    /// Returns `NOT_FOUND` (i.e. `type(uint256).max`) if the `search` is not found.\\n    function lastIndexOf(string memory subject, string memory search, uint256 from)\\n        internal\\n        pure\\n        returns (uint256 result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            for {} 1 {} {\\n                result := not(0) // Initialize to `NOT_FOUND`.\\n                let searchLength := mload(search)\\n                if gt(searchLength, mload(subject)) { break }\\n                let w := result\\n\\n                let fromMax := sub(mload(subject), searchLength)\\n                if iszero(gt(fromMax, from)) { from := fromMax }\\n\\n                let end := add(add(subject, 0x20), w)\\n                subject := add(add(subject, 0x20), from)\\n                if iszero(gt(subject, end)) { break }\\n                // As this function is not too often used,\\n                // we shall simply use keccak256 for smaller bytecode size.\\n                for { let h := keccak256(add(search, 0x20), searchLength) } 1 {} {\\n                    if eq(keccak256(subject, searchLength), h) {\\n                        result := sub(subject, add(end, 1))\\n                        break\\n                    }\\n                    subject := add(subject, w) // `sub(subject, 1)`.\\n                    if iszero(gt(subject, end)) { break }\\n                }\\n                break\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns the byte index of the first location of `search` in `subject`,\\n    /// searching from right to left.\\n    /// Returns `NOT_FOUND` (i.e. `type(uint256).max`) if the `search` is not found.\\n    function lastIndexOf(string memory subject, string memory search)\\n        internal\\n        pure\\n        returns (uint256 result)\\n    {\\n        result = lastIndexOf(subject, search, uint256(int256(-1)));\\n    }\\n\\n    /// @dev Returns whether `subject` starts with `search`.\\n    function startsWith(string memory subject, string memory search)\\n        internal\\n        pure\\n        returns (bool result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let searchLength := mload(search)\\n            // Just using keccak256 directly is actually cheaper.\\n            // forgefmt: disable-next-item\\n            result := and(\\n                iszero(gt(searchLength, mload(subject))),\\n                eq(\\n                    keccak256(add(subject, 0x20), searchLength),\\n                    keccak256(add(search, 0x20), searchLength)\\n                )\\n            )\\n        }\\n    }\\n\\n    /// @dev Returns whether `subject` ends with `search`.\\n    function endsWith(string memory subject, string memory search)\\n        internal\\n        pure\\n        returns (bool result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let searchLength := mload(search)\\n            let subjectLength := mload(subject)\\n            // Whether `search` is not longer than `subject`.\\n            let withinRange := iszero(gt(searchLength, subjectLength))\\n            // Just using keccak256 directly is actually cheaper.\\n            // forgefmt: disable-next-item\\n            result := and(\\n                withinRange,\\n                eq(\\n                    keccak256(\\n                        // `subject + 0x20 + max(subjectLength - searchLength, 0)`.\\n                        add(add(subject, 0x20), mul(withinRange, sub(subjectLength, searchLength))),\\n                        searchLength\\n                    ),\\n                    keccak256(add(search, 0x20), searchLength)\\n                )\\n            )\\n        }\\n    }\\n\\n    /// @dev Returns `subject` repeated `times`.\\n    function repeat(string memory subject, uint256 times)\\n        internal\\n        pure\\n        returns (string memory result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let subjectLength := mload(subject)\\n            if iszero(or(iszero(times), iszero(subjectLength))) {\\n                subject := add(subject, 0x20)\\n                result := mload(0x40)\\n                let output := add(result, 0x20)\\n                for {} 1 {} {\\n                    // Copy the `subject` one word at a time.\\n                    for { let o := 0 } 1 {} {\\n                        mstore(add(output, o), mload(add(subject, o)))\\n                        o := add(o, 0x20)\\n                        if iszero(lt(o, subjectLength)) { break }\\n                    }\\n                    output := add(output, subjectLength)\\n                    times := sub(times, 1)\\n                    if iszero(times) { break }\\n                }\\n                // Zeroize the slot after the string.\\n                mstore(output, 0)\\n                // Store the length.\\n                let resultLength := sub(output, add(result, 0x20))\\n                mstore(result, resultLength)\\n                // Allocate memory for the length and the bytes,\\n                // rounded up to a multiple of 32.\\n                mstore(0x40, add(result, and(add(resultLength, 63), not(31))))\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns a copy of `subject` sliced from `start` to `end` (exclusive).\\n    /// `start` and `end` are byte offsets.\\n    function slice(string memory subject, uint256 start, uint256 end)\\n        internal\\n        pure\\n        returns (string memory result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let subjectLength := mload(subject)\\n            if iszero(gt(subjectLength, end)) { end := subjectLength }\\n            if iszero(gt(subjectLength, start)) { start := subjectLength }\\n            if lt(start, end) {\\n                result := mload(0x40)\\n                let resultLength := sub(end, start)\\n                mstore(result, resultLength)\\n                subject := add(subject, start)\\n                let w := not(31)\\n                // Copy the `subject` one word at a time, backwards.\\n                for { let o := and(add(resultLength, 31), w) } 1 {} {\\n                    mstore(add(result, o), mload(add(subject, o)))\\n                    o := add(o, w) // `sub(o, 0x20)`.\\n                    if iszero(o) { break }\\n                }\\n                // Zeroize the slot after the string.\\n                mstore(add(add(result, 0x20), resultLength), 0)\\n                // Allocate memory for the length and the bytes,\\n                // rounded up to a multiple of 32.\\n                mstore(0x40, add(result, and(add(resultLength, 63), w)))\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns a copy of `subject` sliced from `start` to the end of the string.\\n    /// `start` is a byte offset.\\n    function slice(string memory subject, uint256 start)\\n        internal\\n        pure\\n        returns (string memory result)\\n    {\\n        result = slice(subject, start, uint256(int256(-1)));\\n    }\\n\\n    /// @dev Returns all the indices of `search` in `subject`.\\n    /// The indices are byte offsets.\\n    function indicesOf(string memory subject, string memory search)\\n        internal\\n        pure\\n        returns (uint256[] memory result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let subjectLength := mload(subject)\\n            let searchLength := mload(search)\\n\\n            if iszero(gt(searchLength, subjectLength)) {\\n                subject := add(subject, 0x20)\\n                search := add(search, 0x20)\\n                result := add(mload(0x40), 0x20)\\n\\n                let subjectStart := subject\\n                let subjectSearchEnd := add(sub(add(subject, subjectLength), searchLength), 1)\\n                let h := 0\\n                if iszero(lt(searchLength, 32)) { h := keccak256(search, searchLength) }\\n                let m := shl(3, sub(32, and(searchLength, 31)))\\n                let s := mload(search)\\n                for {} 1 {} {\\n                    let t := mload(subject)\\n                    // Whether the first `searchLength % 32` bytes of\\n                    // `subject` and `search` matches.\\n                    if iszero(shr(m, xor(t, s))) {\\n                        if h {\\n                            if iszero(eq(keccak256(subject, searchLength), h)) {\\n                                subject := add(subject, 1)\\n                                if iszero(lt(subject, subjectSearchEnd)) { break }\\n                                continue\\n                            }\\n                        }\\n                        // Append to `result`.\\n                        mstore(result, sub(subject, subjectStart))\\n                        result := add(result, 0x20)\\n                        // Advance `subject` by `searchLength`.\\n                        subject := add(subject, searchLength)\\n                        if searchLength {\\n                            if iszero(lt(subject, subjectSearchEnd)) { break }\\n                            continue\\n                        }\\n                    }\\n                    subject := add(subject, 1)\\n                    if iszero(lt(subject, subjectSearchEnd)) { break }\\n                }\\n                let resultEnd := result\\n                // Assign `result` to the free memory pointer.\\n                result := mload(0x40)\\n                // Store the length of `result`.\\n                mstore(result, shr(5, sub(resultEnd, add(result, 0x20))))\\n                // Allocate memory for result.\\n                // We allocate one more word, so this array can be recycled for {split}.\\n                mstore(0x40, add(resultEnd, 0x20))\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns a arrays of strings based on the `delimiter` inside of the `subject` string.\\n    function split(string memory subject, string memory delimiter)\\n        internal\\n        pure\\n        returns (string[] memory result)\\n    {\\n        uint256[] memory indices = indicesOf(subject, delimiter);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let w := not(31)\\n            let indexPtr := add(indices, 0x20)\\n            let indicesEnd := add(indexPtr, shl(5, add(mload(indices), 1)))\\n            mstore(add(indicesEnd, w), mload(subject))\\n            mstore(indices, add(mload(indices), 1))\\n            let prevIndex := 0\\n            for {} 1 {} {\\n                let index := mload(indexPtr)\\n                mstore(indexPtr, 0x60)\\n                if iszero(eq(index, prevIndex)) {\\n                    let element := mload(0x40)\\n                    let elementLength := sub(index, prevIndex)\\n                    mstore(element, elementLength)\\n                    // Copy the `subject` one word at a time, backwards.\\n                    for { let o := and(add(elementLength, 31), w) } 1 {} {\\n                        mstore(add(element, o), mload(add(add(subject, prevIndex), o)))\\n                        o := add(o, w) // `sub(o, 0x20)`.\\n                        if iszero(o) { break }\\n                    }\\n                    // Zeroize the slot after the string.\\n                    mstore(add(add(element, 0x20), elementLength), 0)\\n                    // Allocate memory for the length and the bytes,\\n                    // rounded up to a multiple of 32.\\n                    mstore(0x40, add(element, and(add(elementLength, 63), w)))\\n                    // Store the `element` into the array.\\n                    mstore(indexPtr, element)\\n                }\\n                prevIndex := add(index, mload(delimiter))\\n                indexPtr := add(indexPtr, 0x20)\\n                if iszero(lt(indexPtr, indicesEnd)) { break }\\n            }\\n            result := indices\\n            if iszero(mload(delimiter)) {\\n                result := add(indices, 0x20)\\n                mstore(result, sub(mload(indices), 2))\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns a concatenated string of `a` and `b`.\\n    /// Cheaper than `string.concat()` and does not de-align the free memory pointer.\\n    function concat(string memory a, string memory b)\\n        internal\\n        pure\\n        returns (string memory result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let w := not(31)\\n            result := mload(0x40)\\n            let aLength := mload(a)\\n            // Copy `a` one word at a time, backwards.\\n            for { let o := and(add(mload(a), 32), w) } 1 {} {\\n                mstore(add(result, o), mload(add(a, o)))\\n                o := add(o, w) // `sub(o, 0x20)`.\\n                if iszero(o) { break }\\n            }\\n            let bLength := mload(b)\\n            let output := add(result, mload(a))\\n            // Copy `b` one word at a time, backwards.\\n            for { let o := and(add(bLength, 32), w) } 1 {} {\\n                mstore(add(output, o), mload(add(b, o)))\\n                o := add(o, w) // `sub(o, 0x20)`.\\n                if iszero(o) { break }\\n            }\\n            let totalLength := add(aLength, bLength)\\n            let last := add(add(result, 0x20), totalLength)\\n            // Zeroize the slot after the string.\\n            mstore(last, 0)\\n            // Stores the length.\\n            mstore(result, totalLength)\\n            // Allocate memory for the length and the bytes,\\n            // rounded up to a multiple of 32.\\n            mstore(0x40, and(add(last, 31), w))\\n        }\\n    }\\n\\n    /// @dev Returns a copy of the string in either lowercase or UPPERCASE.\\n    function toCase(string memory subject, bool toUpper)\\n        internal\\n        pure\\n        returns (string memory result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let length := mload(subject)\\n            if length {\\n                result := add(mload(0x40), 0x20)\\n                subject := add(subject, 1)\\n                let flags := shl(add(70, shl(5, toUpper)), 67108863)\\n                let w := not(0)\\n                for { let o := length } 1 {} {\\n                    o := add(o, w)\\n                    let b := and(0xff, mload(add(subject, o)))\\n                    mstore8(add(result, o), xor(b, and(shr(b, flags), 0x20)))\\n                    if iszero(o) { break }\\n                }\\n                // Restore the result.\\n                result := mload(0x40)\\n                // Stores the string length.\\n                mstore(result, length)\\n                // Zeroize the slot after the string.\\n                let last := add(add(result, 0x20), length)\\n                mstore(last, 0)\\n                // Allocate memory for the length and the bytes,\\n                // rounded up to a multiple of 32.\\n                mstore(0x40, and(add(last, 31), not(31)))\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns a lowercased copy of the string.\\n    function lower(string memory subject) internal pure returns (string memory result) {\\n        result = toCase(subject, false);\\n    }\\n\\n    /// @dev Returns an UPPERCASED copy of the string.\\n    function upper(string memory subject) internal pure returns (string memory result) {\\n        result = toCase(subject, true);\\n    }\\n\\n    /// @dev Escapes the string to be used within HTML tags.\\n    function escapeHTML(string memory s) internal pure returns (string memory result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            for {\\n                let end := add(s, mload(s))\\n                result := add(mload(0x40), 0x20)\\n                // Store the bytes of the packed offsets and strides into the scratch space.\\n                // `packed = (stride << 5) | offset`. Max offset is 20. Max stride is 6.\\n                mstore(0x1f, 0x900094)\\n                mstore(0x08, 0xc0000000a6ab)\\n                // Store \\\"&quot;&amp;&#39;&lt;&gt;\\\" into the scratch space.\\n                mstore(0x00, shl(64, 0x2671756f743b26616d703b262333393b266c743b2667743b))\\n            } iszero(eq(s, end)) {} {\\n                s := add(s, 1)\\n                let c := and(mload(s), 0xff)\\n                // Not in `[\\\"\\\\\\\"\\\",\\\"'\\\",\\\"&\\\",\\\"<\\\",\\\">\\\"]`.\\n                if iszero(and(shl(c, 1), 0x500000c400000000)) {\\n                    mstore8(result, c)\\n                    result := add(result, 1)\\n                    continue\\n                }\\n                let t := shr(248, mload(c))\\n                mstore(result, mload(and(t, 31)))\\n                result := add(result, shr(5, t))\\n            }\\n            let last := result\\n            // Zeroize the slot after the string.\\n            mstore(last, 0)\\n            // Restore the result to the start of the free memory.\\n            result := mload(0x40)\\n            // Store the length of the result.\\n            mstore(result, sub(last, add(result, 0x20)))\\n            // Allocate memory for the length and the bytes,\\n            // rounded up to a multiple of 32.\\n            mstore(0x40, and(add(last, 31), not(31)))\\n        }\\n    }\\n\\n    /// @dev Escapes the string to be used within double-quotes in a JSON.\\n    function escapeJSON(string memory s) internal pure returns (string memory result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            for {\\n                let end := add(s, mload(s))\\n                result := add(mload(0x40), 0x20)\\n                // Store \\\"\\\\\\\\u0000\\\" in scratch space.\\n                // Store \\\"0123456789abcdef\\\" in scratch space.\\n                // Also, store `{0x08:\\\"b\\\", 0x09:\\\"t\\\", 0x0a:\\\"n\\\", 0x0c:\\\"f\\\", 0x0d:\\\"r\\\"}`.\\n                // into the scratch space.\\n                mstore(0x15, 0x5c75303030303031323334353637383961626364656662746e006672)\\n                // Bitmask for detecting `[\\\"\\\\\\\"\\\",\\\"\\\\\\\\\\\"]`.\\n                let e := or(shl(0x22, 1), shl(0x5c, 1))\\n            } iszero(eq(s, end)) {} {\\n                s := add(s, 1)\\n                let c := and(mload(s), 0xff)\\n                if iszero(lt(c, 0x20)) {\\n                    if iszero(and(shl(c, 1), e)) {\\n                        // Not in `[\\\"\\\\\\\"\\\",\\\"\\\\\\\\\\\"]`.\\n                        mstore8(result, c)\\n                        result := add(result, 1)\\n                        continue\\n                    }\\n                    mstore8(result, 0x5c) // \\\"\\\\\\\\\\\".\\n                    mstore8(add(result, 1), c)\\n                    result := add(result, 2)\\n                    continue\\n                }\\n                if iszero(and(shl(c, 1), 0x3700)) {\\n                    // Not in `[\\\"\\\\b\\\",\\\"\\\\t\\\",\\\"\\\\n\\\",\\\"\\\\f\\\",\\\"\\\\d\\\"]`.\\n                    mstore8(0x1d, mload(shr(4, c))) // Hex value.\\n                    mstore8(0x1e, mload(and(c, 15))) // Hex value.\\n                    mstore(result, mload(0x19)) // \\\"\\\\\\\\u00XX\\\".\\n                    result := add(result, 6)\\n                    continue\\n                }\\n                mstore8(result, 0x5c) // \\\"\\\\\\\\\\\".\\n                mstore8(add(result, 1), mload(add(c, 8)))\\n                result := add(result, 2)\\n            }\\n            let last := result\\n            // Zeroize the slot after the string.\\n            mstore(last, 0)\\n            // Restore the result to the start of the free memory.\\n            result := mload(0x40)\\n            // Store the length of the result.\\n            mstore(result, sub(last, add(result, 0x20)))\\n            // Allocate memory for the length and the bytes,\\n            // rounded up to a multiple of 32.\\n            mstore(0x40, and(add(last, 31), not(31)))\\n        }\\n    }\\n\\n    /// @dev Returns whether `a` equals `b`.\\n    function eq(string memory a, string memory b) internal pure returns (bool result) {\\n        assembly {\\n            result := eq(keccak256(add(a, 0x20), mload(a)), keccak256(add(b, 0x20), mload(b)))\\n        }\\n    }\\n\\n    /// @dev Packs a single string with its length into a single word.\\n    /// Returns `bytes32(0)` if the length is zero or greater than 31.\\n    function packOne(string memory a) internal pure returns (bytes32 result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // We don't need to zero right pad the string,\\n            // since this is our own custom non-standard packing scheme.\\n            result :=\\n                mul(\\n                    // Load the length and the bytes.\\n                    mload(add(a, 0x1f)),\\n                    // `length != 0 && length < 32`. Abuses underflow.\\n                    // Assumes that the length is valid and within the block gas limit.\\n                    lt(sub(mload(a), 1), 0x1f)\\n                )\\n        }\\n    }\\n\\n    /// @dev Unpacks a string packed using {packOne}.\\n    /// Returns the empty string if `packed` is `bytes32(0)`.\\n    /// If `packed` is not an output of {packOne}, the output behaviour is undefined.\\n    function unpackOne(bytes32 packed) internal pure returns (string memory result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Grab the free memory pointer.\\n            result := mload(0x40)\\n            // Allocate 2 words (1 for the length, 1 for the bytes).\\n            mstore(0x40, add(result, 0x40))\\n            // Zeroize the length slot.\\n            mstore(result, 0)\\n            // Store the length and bytes.\\n            mstore(add(result, 0x1f), packed)\\n            // Right pad with zeroes.\\n            mstore(add(add(result, 0x20), mload(result)), 0)\\n        }\\n    }\\n\\n    /// @dev Packs two strings with their lengths into a single word.\\n    /// Returns `bytes32(0)` if combined length is zero or greater than 30.\\n    function packTwo(string memory a, string memory b) internal pure returns (bytes32 result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let aLength := mload(a)\\n            // We don't need to zero right pad the strings,\\n            // since this is our own custom non-standard packing scheme.\\n            result :=\\n                mul(\\n                    // Load the length and the bytes of `a` and `b`.\\n                    or(\\n                        shl(shl(3, sub(0x1f, aLength)), mload(add(a, aLength))),\\n                        mload(sub(add(b, 0x1e), aLength))\\n                    ),\\n                    // `totalLength != 0 && totalLength < 31`. Abuses underflow.\\n                    // Assumes that the lengths are valid and within the block gas limit.\\n                    lt(sub(add(aLength, mload(b)), 1), 0x1e)\\n                )\\n        }\\n    }\\n\\n    /// @dev Unpacks strings packed using {packTwo}.\\n    /// Returns the empty strings if `packed` is `bytes32(0)`.\\n    /// If `packed` is not an output of {packTwo}, the output behaviour is undefined.\\n    function unpackTwo(bytes32 packed)\\n        internal\\n        pure\\n        returns (string memory resultA, string memory resultB)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Grab the free memory pointer.\\n            resultA := mload(0x40)\\n            resultB := add(resultA, 0x40)\\n            // Allocate 2 words for each string (1 for the length, 1 for the byte). Total 4 words.\\n            mstore(0x40, add(resultB, 0x40))\\n            // Zeroize the length slots.\\n            mstore(resultA, 0)\\n            mstore(resultB, 0)\\n            // Store the lengths and bytes.\\n            mstore(add(resultA, 0x1f), packed)\\n            mstore(add(resultB, 0x1f), mload(add(add(resultA, 0x20), mload(resultA))))\\n            // Right pad with zeroes.\\n            mstore(add(add(resultA, 0x20), mload(resultA)), 0)\\n            mstore(add(add(resultB, 0x20), mload(resultB)), 0)\\n        }\\n    }\\n\\n    /// @dev Directly returns `a` without copying.\\n    function directReturn(string memory a) internal pure {\\n        assembly {\\n            // Assumes that the string does not start from the scratch space.\\n            let retStart := sub(a, 0x20)\\n            let retSize := add(mload(a), 0x40)\\n            // Right pad with zeroes. Just in case the string is produced\\n            // by a method that doesn't zero right pad.\\n            mstore(add(retStart, retSize), 0)\\n            // Store the return offset.\\n            mstore(retStart, 0x20)\\n            // End the transaction, returning the string.\\n            return(retStart, retSize)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa81597472f09c5a3980789eb66daafb9cfc7e7ffab6439f1ec74677c30bba0c6\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608080604052600436101561001357600080fd5b60003560e01c90816301ffc9a714613b0e5750806306fdde0314613a6b578063081812fc14613a4d578063095ea7b31461389457806318160ddd1461387657806323b872dd1461385257806342842e0e1461381f5780636352211e1461380157806370a082311461374a578063715018a6146136ca5780637b17b7a81461318057806381d5f3d4146131395780638da5cb5b1461310557806392eefe9b146130a057806395d89b4114612ffd578063a22cb46514612f1f578063aeb8ce9b14612ee1578063b4b5b48f14612e4b578063b88d4fde14612dc3578063bc19bce514612d6a578063c2fb26a614612c9c578063c87b56dd14610949578063d6e4fa861461092b578063d9548e5314610903578063dd001254146108c0578063e4205d061461077b578063e985e9c514610717578063ee44f291146103e1578063f2fde38b146102e4578063f77c4791146102b0578063f81e87751461028c578063fbef8e90146101c65763fe6a101f1461018a57600080fd5b346101c15760206003193601126101c1576101bd6101a9600435614718565b604051918291602083526020830190613c00565b0390f35b600080fd5b346101c1576020806003193601126101c15760043580600052600a825273ffffffffffffffffffffffffffffffffffffffff6001604060002001541633036102625733600052600b825280604060002055600052600a81527f1d57cda29e3c01dfdca1d3f21c0483ff06e19bf3520c21cf5af5eddb8b2f7f2b61025d60026040600020016040519182918583523395830190613de5565b0390a2005b60046040517f6cfb958d000000000000000000000000000000000000000000000000000000008152fd5b346101c15760206003193601126101c1576101bd6101a96102ab613c25565b6145f4565b346101c15760006003193601126101c157602073ffffffffffffffffffffffffffffffffffffffff60095416604051908152f35b346101c15760206003193601126101c1576102fd613c25565b610305613e7c565b73ffffffffffffffffffffffffffffffffffffffff80911690811561037757600654827fffffffffffffffffffffffff0000000000000000000000000000000000000000821617600655167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3005b608460405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b346101c1576003196040813601126101c157600435906024359067ffffffffffffffff908183116101c15760809083360301126101c1576040519261042584613cad565b61043183600401613d79565b845261043f60248401613d79565b9360209081810195865260448501359373ffffffffffffffffffffffffffffffffffffffff9586861686036101c157604083019586526064810135908282116101c15760046104919236920101613d5b565b9660608301978852866009541633036106ed5784600052600a84526bffffffffffffffffffffffff60406000209351167fffffffffffffffff00000000000000000000000000000000000000000000000077ffffffffffffffffffffffff0000000000000000000000008554935160601b169216171782556002600192838101888851167fffffffffffffffffffffffff00000000000000000000000000000000000000008254161790550191875180519283116106be576105538454613d92565b601f8111610675575b508490601f841160011461061057600091849182610603575b505060001991921b9260031b1c19161790555b83835116156105d9577f781b23bebd7dad67f61c98ad264593b54d3b6dc2ac5002927277ba66899c22c7936105d0935116945191604051938493604085526040850190613c00565b918301520390a2005b60046040517fe1d76af9000000000000000000000000000000000000000000000000000000008152fd5b015191506000198b610575565b90601f1984939416918560005283876000209360005b898883831061065e5750505010610645575b505050811b019055610588565b015160001960f88460031b161c19169055888080610638565b868601518855909601959485019487935001610626565b8460005285600020601f850160051c8101918786106106b4575b601f0160051c019083905b8281106106a857505061055c565b6000815501839061069a565b909150819061068f565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60046040517f56be1927000000000000000000000000000000000000000000000000000000008152fd5b346101c15760406003193601126101c157610730613c25565b610738613c48565b9073ffffffffffffffffffffffffffffffffffffffff809116600052600560205260406000209116600052602052602060ff604060002054166040519015158152f35b346101c15760406003193601126101c157600435610797613c48565b73ffffffffffffffffffffffffffffffffffffffff90816107b784613f2c565b1633036108965781169182156105d957610879817f42963d5155d3789ca0a9d651579a6a88164d069972af6f2df013a99af91991c392600052600a6020526001604060002001857fffffffffffffffffffffffff00000000000000000000000000000000000000008254968716961617905583600052600b60205260406000208181541461088c575b5084600052806040600020805415610884575b50600052600a602052600260406000200190604051928392604084526040840190613de5565b9060208301520390a3005b558086610853565b6000905585610840565b60046040517fd01fd0d2000000000000000000000000000000000000000000000000000000008152fd5b346101c15760206003193601126101c15760043567ffffffffffffffff81116101c1576108fb6108f66020923690600401613d5b565b61465d565b604051908152f35b346101c15760206003193601126101c157602061092160043561468d565b4211604051908152f35b346101c15760206003193601126101c15760206108fb60043561468d565b346101c15760206003193601126101c157610989600435600052600260205273ffffffffffffffffffffffffffffffffffffffff60406000205416151590565b15612c725760405161099a81613cad565b605281527f557365726e616d65204e46547320617265206e6f6e2d66756e6769626c65207460208201527f6f6b656e73207468617420726570726573656e7420757365726e616d6573206f60408201527f6e20506f6c79676f6e2773207a6b45564d2e00000000000000000000000000006060820152610a1b60043561488a565b610a26600435614718565b90600435600052600a60205260016040600020015460405191608083016040526f30313233343536373839616263646566600f527fffffffffffffffffffffffffffffffffffffffff0000000000000000000000006002840192602884526000604a86015260601b16600160005b8080018601602284831a600f811651602384015360041c51910153019060148214610ac25790600190610a94565b5050610c8c9260c792613078600282510191528152610aea610ae560043561468d565b61488a565b906040519586937f5b7b2274726169745f74797065223a2022746f6b656e4964222c202276616c7560208601527f65223a202200000000000000000000000000000000000000000000000000000090816040870152610b5381518092602060458a019101613bdd565b8501907f227d2c207b2274726169745f74797065223a20226e616d65222c202276616c7560458301526065820152610b95825180936020606a85019101613bdd565b017f227d2c207b2274726169745f74797065223a20227265736f6c76656441646472606a8201527f657373222c202276616c7565223a202200000000000000000000000000000000608a820152610bf6825180936020609a85019101613bdd565b017f227d2c207b2274726169745f74797065223a2022657870697265734174222c20609a8201527f2276616c7565223a20220000000000000000000000000000000000000000000060ba820152610c5782518093602060c485019101613bdd565b017f227d5d000000000000000000000000000000000000000000000000000000000060c48201520360a7810184520182613ce5565b610c97600435614718565b6040516060810181811067ffffffffffffffff8211176106be5760405260005b60608110612c6457506040518061028081011067ffffffffffffffff610280830111176106be57610280810160405261024781527f3c7376672077696474683d223130383022206865696768743d2231303830222060208201527f76696577426f783d2230203020313038302031303830222066696c6c3d226e6f60408201527f6e652220786d6c6e733d22687474703a2f2f7777772e77332e6f72672f32303060608201527f302f737667223e203c6720636c69702d706174683d2275726c2823636c69703060808201527f5f323635375f3639363129223e203c726563742077696474683d22313038302260a08201527f206865696768743d2231303830222072783d22313230222066696c6c3d22233160c08201527f3331333135222f3e203c7061746820643d224d323739202d33314c2d3138203260e08201527f363648313132342e354c32353620313133342e3522207374726f6b653d2223326101008201527f333130333222207374726f6b652d77696474683d223239222f3e203c706174686101208201527f20643d224d323737203236324c2d31382035353748313132342e354c323536206101408201527f313432352e3522207374726f6b653d222332333130333222207374726f6b652d6101608201527f77696474683d223239222f3e203c7265637420783d222d34352220793d2237346101808201527f39222077696474683d223131353922206865696768743d22323337222066696c6101a08201527f6c3d2223333231373437222f3e203c746578742066696c6c3d222338453334446101c08201527f352220786d6c3a73706163653d22707265736572766522207374796c653d22776101e08201527f686974652d73706163653a207072652220666f6e742d66616d696c793d2241726102008201527f69616c2220666f6e742d73697a653d22393622206c65747465722d73706163696102208201527f6e673d222d302e3034656d223e3c747370616e20783d2236332220793d2238396102408201527f392e323831223e000000000000000000000000000000000000000000000000006102608201528152610fd6600435614718565b602082015260405190816113e081011067ffffffffffffffff6113e0840111176106be57602061286f916113e084016040526113ab84527f3c2f747370616e3e3c2f746578743e203c6720636c69702d706174683d227572828501527f6c2823636c6970315f323635375f3639363129223e203c7061746820643d224d60408501527f3137362e333936203136372e3336374c3230352e373937203135302e3930314360608501527f3230372e333536203135302e303237203230382e333139203134382e3430352060808501527f3230382e333139203134362e363634563131332e373331433230382e3331392060a08501527f3131312e393931203230372e333536203131302e333639203230352e3739372060c08501527f3130392e3439344c3137362e3339362039332e30323738433137342e3833382060e08501527f39322e31353331203137322e3930332039322e31363136203137312e333533206101008501527f39332e303237384c3134312e393532203130392e343934433134302e333934206101208501527f3131302e333639203133392e343331203131312e393931203133392e343331206101408501527f3131332e373331563137322e3538314c3131382e383132203138342e3132324c6101608501527f39382e31393235203137322e353831563134392e3439324c3131382e383132206101808501527f3133372e3935314c3133322e343039203134352e353638563133302e3037394c6101a08501527f3132312e333333203132332e383731433132302e353731203132332e343436206101c08501527f3131392e363936203132332e323137203131382e383132203132332e323137436101e08501527f3131372e393237203132332e323137203131372e303532203132332e343436206102008501527f3131362e3239203132332e3837314c38362e38383932203134302e33333743386102208501527f352e33333038203134312e3231322038342e33363737203134322e38333420386102408501527f342e33363737203134342e353735563137372e3530374338342e3336373720316102608501527f37392e3234382038352e33333038203138302e38372038362e383839322031386102808501527f312e3734344c3131362e3239203139382e323131433131372e383439203139396102a08501527f2e303737203131392e373735203139392e303737203132312e333333203139386102c08501527f2e3231314c3135302e373334203138312e373434433135322e323933203138306102e08501527f2e3837203135332e323536203137392e323438203135332e323536203137372e6103008501527f353037563131382e3635374c3135332e363233203131382e3435334c3137332e6103208501527f383636203130372e3131364c3139342e343835203131382e363537563134312e6103408501527f3734374c3137332e383636203135332e3238374c3136302e323836203134352e6103608501527f363837563136312e3137374c3137312e333434203136372e333637433137322e6103808501527f393033203136382e323334203137342e383338203136382e323334203137362e6103a08501527f333838203136372e333637483137362e3339365a222066696c6c3d2275726c286103c08501527f237061696e74305f6c696e6561725f323635375f3639363129222f3e203c70616103e08501527f746820643d224d3234302e373233203138342e363133563131372e34393248326104008501527f35312e3031394c323532203132322e3931483235322e3439433235352e3433326104208501527f203131392e313939203236302e343331203131362e353431203236372e3339326104408501527f203131362e353431433238302e313331203131362e353431203239302e3333316104608501527f203132362e363231203239302e333331203134312e353432433239302e3333316104808501527f203135362e343632203238302e3134203136362e353432203236372e333932206104a08501527f3136362e353432433236302e353238203136362e353432203235352e373320316104c08501527f36332e373832203235332e313832203136302e363439483235322e36393156316104e08501527f38342e363035483234302e3733314c3234302e373233203138342e3631335a4d6105008501527f3237382e333632203134312e3535433237382e333632203133322e38303320326105208501527f37322e353735203132372e323932203236352e353138203132372e32393243326105408501527f35382e343631203132372e323932203235322e363734203133322e38303320326105608501527f35322e363734203134312e3535433235322e363734203135302e3239372032356105808501527f382e343631203135352e383038203236352e353138203135352e3830384332376105a08501527f322e353735203135352e383038203237382e333632203135302e3239372032376105c08501527f382e333632203134312e35355a222066696c6c3d2223463746354634222f3e206105e08501527f3c7061746820643d224d3239362e333938203134312e353432433239362e33396106008501527f38203132362e393935203330372e313736203131362e353431203332312e35386106208501527f38203131362e353431433333352e393939203131362e353431203334362e37376106408501527f37203132362e393935203334362e373737203134312e353432433334362e37376106608501527f37203135362e303839203333352e393939203136362e353432203332312e35386106808501527f38203136362e353432433330372e313736203136362e353432203239362e33396106a08501527f38203135352e393837203239362e333938203134312e3534325a4d3333342e376106c08501527f3231203134312e353432433333342e373231203133322e393832203332382e386106e08501527f3337203132372e323833203332312e353838203132372e323833433331342e336107008501527f3338203132372e323833203330382e333538203133322e3939203330382e33356107208501527f38203134312e353432433330382e333538203135302e303933203331342e33336107408501527f38203135352e373036203332312e353838203135352e373036433332382e38336107608501527f37203135352e373036203333342e373231203135302e313032203333342e37326107808501527f31203134312e3534325a222066696c6c3d2223463746354634222f3e203c70616107a08501527f746820643d224d3335352e343337203136352e3630315639392e3034383848336107c08501527f36372e333936563136352e363031483335352e3433375a222066696c6c3d22236107e08501527f463746354634222f3e203c7061746820643d224d3431312e383034203131372e6108008501527f343932483432342e3534344c3430322e393739203137352e3936433430302e386108208501527f3235203138312e3736203339372e383833203138342e363134203339302e31336108408501527f35203138342e363134483337382e353639563137332e383731483338382e33376108608501527f35433339302e313433203137332e383731203339312e313135203137332e30316108808501527f33203339312e373131203137312e3538374c3339322e383834203136382e34356108a08501527f334c3337322e363934203131372e343932483338352e3433334c3339382e32376108c08501527f37203135302e383636483430302e3233394c3431312e383034203131372e34396108e08501527f325a222066696c6c3d2223463746354634222f3e203c7061746820643d224d346109008501527f32362e3832203136372e393737483433382e393733433433392e3436332031376109208501527f312e313131203434322e363934203137352e333931203435302e3334362031376109408501527f352e333931433435372e343939203137352e333931203436322e3231203137316109608501527f2e303138203436322e3231203136342e3336563135372e363039483436312e376109808501527f3139433435392e303735203136302e333639203435342e313732203136322e386109a08501527f34203434372e383934203136322e3834433433352e313535203136322e3834206109c08501527f3432352e333439203135332e333239203432352e333439203133392e363339436109e08501527f3432352e333439203132352e3935203433352e313535203131362e3534312034610a008501527f34372e383934203131362e353431433435342e343631203131362e3534312034610a208501527f35392e323638203131392e313036203436322e333036203132322e3732334834610a408501527f36322e3739364c3436332e373737203131372e343932483437342e3137563136610a608501527f342e3336433437342e3137203137372e303938203436352e333434203138352e610a808501527f353635203435302e333436203138352e353635433433332e353838203138352e610aa08501527f353635203432372e313138203137342e393135203432362e3832203136372e39610ac08501527f37375a4d3436322e3231203133392e363438433436322e3231203133322e3134610ae08501527f31203435362e3732203132362e3931203434392e373539203132362e39314334610b008501527f34322e373939203132362e3931203433372e343035203133322e313431203433610b208501527f372e343035203133392e363438433433372e343035203134372e313535203434610b408501527f322e383935203135322e343739203434392e373539203135322e343739433435610b608501527f362e363234203135322e343739203436322e3231203134372e32343820343632610b808501527f2e3231203133392e3634385a222066696c6c3d2223463746354634222f3e203c610ba08501527f7061746820643d224d3438322e343837203134312e353432433438322e343837610bc08501527f203132362e393935203439332e323635203131362e353431203530372e363737610be08501527f203131362e353431433532322e303838203131362e353431203533322e383636610c008501527f203132362e393935203533322e383636203134312e353432433533322e383636610c208501527f203135362e303839203532322e303838203136362e353432203530372e363737610c408501527f203136362e353432433439332e323635203136362e353432203438322e343837610c608501527f203135352e393837203438322e343837203134312e3534325a4d3532302e3831610c808501527f203134312e353432433532302e3831203133322e393832203531342e39323620610ca08501527f3132372e323833203530372e363737203132372e323833433530302e34323720610cc08501527f3132372e323833203439342e343437203133322e3939203439342e3434372031610ce08501527f34312e353432433439342e343437203135302e303933203530302e3432372031610d008501527f35352e373036203530372e363737203135352e373036433531342e3932362031610d208501527f35352e373036203532302e3831203135302e313032203532302e383120313431610d408501527f2e3534325a222066696c6c3d2223463746354634222f3e203c7061746820643d610d608501527f224d3534312e313932203136352e36563131372e343932483535312e34384c35610d808501527f35322e343631203132322e303532483535322e393531433535342e3931322031610da08501527f31392e3837203535392e383135203131362e353431203536372e323537203131610dc08501527f362e353431433537382e363331203131362e353431203538362e383631203132610de08501527f342e353234203538362e383631203133362e363933563136352e353931483537610e008501527f342e393031563133382e323133433537342e393031203133322e303331203537610e208501527f302e333932203132372e353634203536342e323139203132372e353634433535610e408501527f382e303437203132372e353634203535332e313434203133322e323236203535610e608501527f332e313434203133382e323133563136352e353931483534312e3138344c3534610e808501527f312e313932203136352e365a222066696c6c3d2223463746354634222f3e203c610ea08501527f7061746820643d224d3634342e333532203136352e313637483630392e333238610ec08501527f563136302e3732334c3633372e303034203132332e373931483630392e383035610ee08501527f563131382e383835483634332e383735563132332e3332384c3631362e313939610f008501527f203136302e323631483634342e333532563136352e3136375a222066696c6c3d610f208501527f2223463746354634222f3e203c7061746820643d224d3636302e313820313635610f408501527f2e313637483635342e383336563130302e333733483636302e3138563134302e610f608501527f3236384c3638332e383438203131382e383836483639302e39314c3636352e38610f808501527f3131203134312e3536344c3639312e383635203136352e313637483638342e38610fa08501527f30324c3636302e3138203134322e3836563136352e3136375a222066696c6c3d610fc08501527f2223463746354634222f3e203c7061746820643d224d3734322e343131203136610fe08501527f352e313637483730302e3432563130302e333733483734322e343131563130356110008501527f2e363439483730362e313436563132392e383038483734302e353032563133356110208501527f2e303834483730362e313436563135392e383931483734322e343131563136356110408501527f2e3136375a222066696c6c3d2223463746354634222f3e203c7061746820643d6110608501527f224d3738332e303536203136352e313637483737332e3739394c3734392e36356110808501527f34203130302e333733483735352e3736324c3737372e343235203135392e33336110a08501527f36483737392e3432394c3830312e313838203130302e333733483830372e32306110c08501527f314c3738332e303536203136352e3136375a222066696c6c3d222346374635466110e08501527f34222f3e203c7061746820643d224d3832322e363434203136352e31363748386111008501527f31362e393138563130302e333733483832372e3839334c3835302e33322031356111208501527f382e393636483835322e3232394c3837342e363536203130302e3337334838386111408501527f352e363331563136352e313637483837392e393035563130372e35483837372e6111608501527f3939364c3835352e383535203136352e313637483834362e3539384c3832342e6111808501527f353533203130372e35483832322e363434563136352e3136375a222066696c6c6111a08501527f3d2223463746354634222f3e203c2f673e203c2f673e203c646566733e203c6c6111c08501527f696e6561724772616469656e742069643d227061696e74305f6c696e6561725f6111e08501527f323635375f36393631222078313d2238332e39363439222079313d223138302e6112008501527f373334222078323d223230312e313335222079323d223131302e3631352220676112208501527f72616469656e74556e6974733d227573657253706163654f6e557365223e203c6112408501527f73746f702073746f702d636f6c6f723d2223413732364331222f3e203c73746f6112608501527f70206f66667365743d22302e3838222073746f702d636f6c6f723d22233830336112808501527f424446222f3e203c73746f70206f66667365743d2231222073746f702d636f6c6112a08501527f6f723d2223374233464534222f3e203c2f6c696e6561724772616469656e743e6112c08501527f203c636c6970506174682069643d22636c6970305f323635375f36393631223e6112e08501527f203c726563742077696474683d223130383022206865696768743d22313038306113008501527f222072783d22313230222066696c6c3d227768697465222f3e203c2f636c69706113208501527f506174683e203c636c6970506174682069643d22636c6970315f323635375f366113408501527f393631223e203c726563742077696474683d2238303222206865696768743d226113608501527f313037222066696c6c3d22776869746522207472616e73666f726d3d227472616113808501527f6e736c61746528383420393229222f3e203c2f636c6970506174683e203c2f646113a08501527f6566733e203c2f7376673e0000000000000000000000000000000000000000006113c085015283604082015281815191015193604051948261283c8794518092878088019101613bdd565b830161285082518093878085019101613bdd565b0161286382518093868085019101613bdd565b01038084520182613ce5565b806060915180612b47575b5050906129d1926086926040519586937f7b226e616d65223a20222e7a6b65766d20557365726e616d652000000000000060208601526128c4815180926020603a89019101613bdd565b84017f222c20226465736372697074696f6e223a202200000000000000000000000000603a820152612900825180936020604d85019101613bdd565b017f222c2022696d616765223a2022646174613a696d6167652f7376672b786d6c3b604d8201527f6261736536342c00000000000000000000000000000000000000000000000000606d820152612961825180936020607485019101613bdd565b017f222c202261747472696275746573223a20000000000000000000000000000000607482015261299c825180936020608585019101613bdd565b017f7d000000000000000000000000000000000000000000000000000000000000006085820152036066810184520182613ce5565b80606090519182612a34575b6101bd826101a9603d60405180937f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c0000006020830152612a248151809260208686019101613bdd565b810103601d810184520182613ce5565b9050600380600284010460021b90604051927f4142434445464748494a4b4c4d4e4f505152535455565758595a616263646566601f52603f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdd07f6768696a6b6c6d6e6f707172737475767778797a303132333435363738392d5f01815260208501928486019360048260208701955b0191848351818160121c16516000538181600c1c1651600153818160061c1651600253165184536000518152019084821015612b03576004908390612ac3565b5092506101bd96601f197f3d3d00000000000000000000000000000000000000000000000000000000000093600096011660405206600204820352528152826129dd565b9291509260039384600285010460021b604051917f4142434445464748494a4b4c4d4e4f505152535455565758595a616263646566601f52603f907ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdd07f6768696a6b6c6d6e6f707172737475767778797a303132333435363738392d5f01825260208401918385019260048a60208601945b0191838351818160121c16516000538181600c1c1651600153818160061c165160025316518c536000518152019083821015612c19576004908b90612bd9565b5091506129d198608698601f197f3d3d00000000000000000000000000000000000000000000000000000000000093600096011660405206600204820352528152919281945061287a565b606082820152602001610cb7565b60046040517f9f12e874000000000000000000000000000000000000000000000000000000008152fd5b346101c15760006003193601126101c1576040516000600754612cbe81613d92565b80845290600190818116908115612d435750600114612ce8575b6101bd846101a981860382613ce5565b6007600090815292507fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c6885b828410612d2b5750505081016020016101a982612cd8565b80546020858701810191909152909301928101612d13565b60ff191660208087019190915292151560051b850190920192506101a99150839050612cd8565b346101c15760206003193601126101c15760043567ffffffffffffffff81116101c157612da5612da06020923690600401613d5b565b614571565b73ffffffffffffffffffffffffffffffffffffffff60405191168152f35b346101c15760806003193601126101c157612ddc613c25565b612de4613c48565b906064359060443567ffffffffffffffff83116101c157366023840112156101c157612e4993612e21612e44943690602481600401359101613d24565b92612e34612e2f843361409a565b613fb7565b612e3f838383614186565b61449a565b614028565b005b346101c15760206003193601126101c157600435600052600a602052604060002080546101bd6002612ea973ffffffffffffffffffffffffffffffffffffffff60018601541694612ea26040518094819301613de5565b0382613ce5565b6040519384936bffffffffffffffffffffffff90818116865260601c1660208501526040840152608060608401526080830190613c00565b346101c15760206003193601126101c15760043567ffffffffffffffff81116101c157610921612f1a6108f66020933690600401613d5b565b61468d565b346101c15760406003193601126101c157612f38613c25565b602435908115158092036101c15773ffffffffffffffffffffffffffffffffffffffff1690813314612fb957336000526005602052604060002082600052602052604060002060ff1981541660ff83161790556040519081527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3160203392a3005b606460405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152fd5b346101c15760006003193601126101c1576040516000600180549061302182613d92565b80855291818116908115612d435750600114613047576101bd846101a981860382613ce5565b600081815292507fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf65b8284106130885750505081016020016101a982612cd8565b80546020858701810191909152909301928101613070565b346101c15760206003193601126101c15773ffffffffffffffffffffffffffffffffffffffff6130ce613c25565b6130d6613e7c565b167fffffffffffffffffffffffff00000000000000000000000000000000000000006009541617600955600080f35b346101c15760006003193601126101c157602073ffffffffffffffffffffffffffffffffffffffff60065416604051908152f35b346101c15760206003193601126101c15773ffffffffffffffffffffffffffffffffffffffff613167613c25565b16600052600b6020526020604060002054604051908152f35b346101c15760606003193601126101c157613199613c25565b60243567ffffffffffffffff81116101c1576131b9903690600401613d5b565b6bffffffffffffffffffffffff916044359183831683036101c15773ffffffffffffffffffffffffffffffffffffffff93846009541633036106ed576131fe8261465d565b9361322c85600052600260205273ffffffffffffffffffffffffffffffffffffffff60406000205416151590565b6135f4575b60085495600019968781146135c5576001016008556040519161325383613cc9565b600083528186169586156135815761334b612e446002956132a061329a8c600052600260205273ffffffffffffffffffffffffffffffffffffffff60406000205416151590565b15614526565b6132d061329a8c600052600260205273ffffffffffffffffffffffffffffffffffffffff60406000205416151590565b8960005260036020526040600020600181540190558a600052866020528a6040600020947fffffffffffffffffffffffff0000000000000000000000000000000000000000958c87825416179055818c60007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8180a46142d2565b6040519261335884613cad565b8542168452856020850193168352604084019288845260608501968888528a600052600a60205260406000209551167fffffffffffffffff00000000000000000000000000000000000000000000000077ffffffffffffffffffffffff0000000000000000000000008754935160601b1692161717845560018401925116908254161790550190519485519067ffffffffffffffff82116106be576133fd8354613d92565b96601f8811613539575b602097508790601f84116001146134ab5792613488949281927fdcc2175a495289b48da3c0c903e6e8fd7bbf9400cc93d7d1b8be780fc5916c6697956000936134a0575b50508260011b9260031b1c19161790555b83600052600b8652846040600020805415613498575b5050604051918291604083526040830190613c00565b85878301520390a2604051908152f35b558487613472565b015191508a8061344b565b9190601f1984169285600052896000209360005b81811061352257509285926134889795927fdcc2175a495289b48da3c0c903e6e8fd7bbf9400cc93d7d1b8be780fc5916c6699976001961061350a575b50505050811b01905561345c565b01519060f88460031b161c19169055898080806134fc565b92948b6001819288860151815501960193016134bf565b836000526020600020601f840160051c81019860208510613577575b601f0160051c01975b88811061356b5750613407565b6000815560010161355e565b9098508890613555565b606460405162461bcd60e51b815260206004820152602060248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6135fd8561468d565b421161362d5760046040517f557ebeac000000000000000000000000000000000000000000000000000000008152fd5b61363685613f2c565b5084600061364382613f2c565b82825260046020528860408320917fffffffffffffffffffffffff000000000000000000000000000000000000000092838154169055169081835260036020526040832060001981540190558383526002602052604083209081541690557fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8280a4613231565b346101c15760006003193601126101c1576136e3613e7c565b600073ffffffffffffffffffffffffffffffffffffffff6006547fffffffffffffffffffffffff00000000000000000000000000000000000000008116600655167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a3005b346101c15760206003193601126101c15773ffffffffffffffffffffffffffffffffffffffff613778613c25565b1680156137975760005260036020526020604060002054604051908152f35b608460405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f74206120766160448201527f6c6964206f776e657200000000000000000000000000000000000000000000006064820152fd5b346101c15760206003193601126101c1576020612da5600435613f2c565b346101c157612e49612e4461383336613c6b565b906040519261384184613cc9565b60008452612e34612e2f843361409a565b346101c157612e4961386336613c6b565b91613871612e2f843361409a565b614186565b346101c15760006003193601126101c1576020600854604051908152f35b346101c15760406003193601126101c1576138ad613c25565b6024359073ffffffffffffffffffffffffffffffffffffffff80806138d185613f2c565b169216918083146139e3578033149081156139be575b5015613954578260005260046020526040600020827fffffffffffffffffffffffff000000000000000000000000000000000000000082541617905561392c83613f2c565b167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600080a4005b608460405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c0000006064820152fd5b9050600052600560205260406000203360005260205260ff60406000205416846138e7565b608460405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560448201527f72000000000000000000000000000000000000000000000000000000000000006064820152fd5b346101c15760206003193601126101c1576020612da5600435613f5b565b346101c15760006003193601126101c15760405160008054613a8c81613d92565b80845290600190818116908115612d435750600114613ab5576101bd846101a981860382613ce5565b600080805292507f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5635b828410613af65750505081016020016101a982612cd8565b80546020858701810191909152909301928101613ade565b346101c15760206003193601126101c157600435907fffffffff0000000000000000000000000000000000000000000000000000000082168092036101c157817f80ac58cd0000000000000000000000000000000000000000000000000000000060209314908115613bb3575b8115613b89575b5015158152f35b7f01ffc9a70000000000000000000000000000000000000000000000000000000091501483613b82565b7f5b5e139f0000000000000000000000000000000000000000000000000000000081149150613b7b565b60005b838110613bf05750506000910152565b8181015183820152602001613be0565b90601f19601f602093613c1e81518092818752878088019101613bdd565b0116010190565b6004359073ffffffffffffffffffffffffffffffffffffffff821682036101c157565b6024359073ffffffffffffffffffffffffffffffffffffffff821682036101c157565b60031960609101126101c15773ffffffffffffffffffffffffffffffffffffffff9060043582811681036101c1579160243590811681036101c1579060443590565b6080810190811067ffffffffffffffff8211176106be57604052565b6020810190811067ffffffffffffffff8211176106be57604052565b90601f601f19910116810190811067ffffffffffffffff8211176106be57604052565b67ffffffffffffffff81116106be57601f01601f191660200190565b929192613d3082613d08565b91613d3e6040519384613ce5565b8294818452818301116101c1578281602093846000960137010152565b9080601f830112156101c157816020613d7693359101613d24565b90565b35906bffffffffffffffffffffffff821682036101c157565b90600182811c92168015613ddb575b6020831014613dac57565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b91607f1691613da1565b9060009291805491613df683613d92565b918282526001938481169081600014613e585750600114613e18575b50505050565b90919394506000526020928360002092846000945b838610613e44575050505001019038808080613e12565b805485870183015294019385908201613e2d565b915050602094955060ff199193501683830152151560051b01019038808080613e12565b73ffffffffffffffffffffffffffffffffffffffff600654163303613e9d57565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b15613ee857565b606460405162461bcd60e51b815260206004820152601860248201527f4552433732313a20696e76616c696420746f6b656e20494400000000000000006044820152fd5b600052600260205273ffffffffffffffffffffffffffffffffffffffff60406000205416613d76811515613ee1565b613f90613f8b82600052600260205273ffffffffffffffffffffffffffffffffffffffff60406000205416151590565b613ee1565b600052600460205273ffffffffffffffffffffffffffffffffffffffff6040600020541690565b15613fbe57565b608460405162461bcd60e51b815260206004820152602d60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201527f72206f7220617070726f766564000000000000000000000000000000000000006064820152fd5b1561402f57565b60405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e74657200000000000000000000000000006064820152608490fd5b9073ffffffffffffffffffffffffffffffffffffffff80806140bb84613f2c565b169316918383149384156140ee575b5083156140d8575b50505090565b6140e491929350613f5b565b16143880806140d2565b909350600052600560205260406000208260005260205260ff6040600020541692386140ca565b1561411c57565b608460405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201527f6f776e65720000000000000000000000000000000000000000000000000000006064820152fd5b906141bb9161419484613f2c565b9173ffffffffffffffffffffffffffffffffffffffff938493848094169485911614614115565b1691821561426957816141d8916141d186613f2c565b1614614115565b7fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60008481526004602052604081207fffffffffffffffffffffffff00000000000000000000000000000000000000009081815416905583825260036020526040822060001981540190558482526040822060018154019055858252600260205284604083209182541617905580a4565b608460405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f2061646460448201527f72657373000000000000000000000000000000000000000000000000000000006064820152fd5b9192600092909190803b156144905761434e9460405180927f150b7a020000000000000000000000000000000000000000000000000000000094858352336004840152876024840152604483015260806064830152818773ffffffffffffffffffffffffffffffffffffffff8260209b8c976084830190613c00565b0393165af1849181614434575b5061440b575050503d600014614403573d61437581613d08565b906143836040519283613ce5565b81528091833d92013e5b805191826144005760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e74657200000000000000000000000000006064820152608490fd5b01fd5b50606061438d565b7fffffffff00000000000000000000000000000000000000000000000000000000161492509050565b9091508581813d8311614489575b61444c8183613ce5565b8101031261448557517fffffffff000000000000000000000000000000000000000000000000000000008116810361448557903861435b565b8480fd5b503d614442565b5050915050600190565b9293600093909291803b1561451b5794849161434e96604051809481937f150b7a02000000000000000000000000000000000000000000000000000000009788845233600485015273ffffffffffffffffffffffffffffffffffffffff80921660248501526044840152608060648401528260209b8c976084830190613c00565b505050915050600190565b1561452d57565b606460405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152fd5b61457a9061465d565b6145a781600052600260205273ffffffffffffffffffffffffffffffffffffffff60406000205416151590565b1580156145e3575b6145dd57600052600a60205273ffffffffffffffffffffffffffffffffffffffff6001604060002001541690565b50600090565b506145ed8161468d565b42116145af565b73ffffffffffffffffffffffffffffffffffffffff16600052600b6020526040600020546146218161468d565b421161464957600052600a602052612ea2613d76600260406000200160405192838092613de5565b5060405161465681613cc9565b6000815290565b6040516146876020828161467a8183019687815193849201613bdd565b8101038084520182613ce5565b51902090565b600052600a60205260026040600020614702604051916146ac83613cad565b8054926bffffffffffffffffffffffff9485938493848716845284602085019760601c16875273ffffffffffffffffffffffffffffffffffffffff6001820154166040850152612ea26040518094819301613de5565b60608201525116915116018181116135c5571690565b6000908152602090600a825260026040822001906040519281849284549461473f86613d92565b9060019685888216918260001461486e575050600114614836575b50507f2e00000000000000000000000000000000000000000000000000000000000000815281926007549261478e84613d92565b9387811690811561481157506001146147b9575b50505050613d76925003601f198101835282613ce5565b600781527fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c6889694505b8381106147fb575050613d7694500101388080806147a2565b86548382018601529584019587955081016147e2565b915050613d7696945060ff1991509291921683830152801515020101388080806147a2565b90915082528282208583915b8383106148575750505083018201388061475a565b805489840187015288965091850191879101614842565b9150935060ff199150168286015280151502840101388061475a565b90604051600019608082019360a0830160405260008552935b0192600a908181066030018553049283156148c157600019906148a3565b9250608083601f19920301920191825256fea264697066735822122095e78263535f7fde12d2a0d2abc81690007f224cdae8d4a9da49451af4732ecb64736f6c63430008130033",
  "devdoc": {
    "details": "UsernameNFT contract represents the NFTs for usernames. Each NFT represents a unique username and has an associated resolved address. The contract also stores the duration for which the username is registered and the timestamp when it was minted or renewed.",
    "events": {
      "Approval(address,address,uint256)": {
        "details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."
      },
      "ApprovalForAll(address,address,bool)": {
        "details": "Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
      },
      "Transfer(address,address,uint256)": {
        "details": "Emitted when `tokenId` token is transferred from `from` to `to`."
      }
    },
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "available(string)": {
        "details": "This function checks if the given name is not registered or if the associated tokenId is expired.",
        "params": {
          "name": "The name to be checked for availability."
        },
        "returns": {
          "_0": "bool True if the name is available, false otherwise."
        }
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "getDisplayName(uint256)": {
        "details": "This function first resolves the address to its associated username using the resolveAddress function. If an active, valid username is found, it appends the domain to the username and returns the resulting display name. Example: If the username is \"alice\" and the domain is \"example\", the display name will be \"alice.example\".",
        "params": {
          "tokenId": "The token ID to be resolved."
        },
        "returns": {
          "_0": "string memory The display name associated with the address."
        }
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "isExpired(uint256)": {
        "details": "This function checks if the current block timestamp is greater than the expiration timestamp of the given tokenId.",
        "params": {
          "tokenId": "The token ID of the NFT."
        },
        "returns": {
          "_0": "bool True if the tokenId is expired, false otherwise."
        }
      },
      "mint(address,string,uint96)": {
        "details": "This function can only be called by the controller contract. It checks if the name is available and mints a new NFT with the given token data if it is.",
        "params": {
          "duration": "The duration for which the username will be registered.",
          "name": "The desired username.",
          "to": "The address of the user who will own the NFT."
        },
        "returns": {
          "_0": "uint256 The token ID of the minted NFT."
        }
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "nameExpires(uint256)": {
        "details": "This function calculates the expiration timestamp by adding the duration to the mint timestamp of the given tokenId.",
        "params": {
          "tokenId": "The token ID of the NFT."
        },
        "returns": {
          "_0": "uint The Unix timestamp of when the tokenId expires."
        }
      },
      "nameToTokenId(string)": {
        "details": "This function calculates the token ID by hashing the given name using the keccak256 hash function.",
        "params": {
          "name": "The name to be converted."
        },
        "returns": {
          "_0": "uint256 The token ID corresponding to the given name."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "resolveAddress(address)": {
        "details": "This function returns the username associated with a given resolved address if it is registered and not expired. Otherwise, it returns an empty string.",
        "params": {
          "addr": "The owner address to be resolved."
        },
        "returns": {
          "_0": "string memory The username associated with the resolved address."
        }
      },
      "resolveName(string)": {
        "details": "This function returns the resolved address for a given username if it is registered and not expired. Otherwise, it returns the zero address.",
        "params": {
          "name": "The username to be resolved."
        },
        "returns": {
          "_0": "address The resolved address of the username."
        }
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "setController(address)": {
        "details": "The controller contract is responsible for minting and updating token data.",
        "params": {
          "_controller": "address - The address of the controller contract."
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "This function returns the URI of the NFT by encoding the generated JSON metadata as a base64 string. The URI can be used to retrieve metadata associated with the NFT, such as a JSON file containing information about the NFT's properties, image, and other attributes.",
        "params": {
          "tokenId": "The token ID of the NFT."
        },
        "returns": {
          "_0": "string memory The URI of the NFT."
        }
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updatePrimaryName(uint256)": {
        "details": "This function can only be called by resolved address of the NFT. It updates the primary name for the given tokenId with the provided newResolvedAddress. It also updates the primary name for the old and new resolved addresses if needed.",
        "params": {
          "tokenId": "The token ID of the NFT to be updated."
        }
      },
      "updateResolveAddress(uint256,address)": {
        "details": "This function can only be called by the owner of the NFT. It updates the resolved address for the given tokenId with the provided newResolvedAddress. It also updates the primary name for the old and new resolved addresses if needed.",
        "params": {
          "newResolveAddress": "The new resolved address.",
          "tokenId": "The token ID of the NFT to be updated."
        }
      },
      "updateTokenData(uint256,(uint96,uint96,address,string))": {
        "details": "This function can only be called by the controller contract. It updates the token data for the given tokenId with the provided data.",
        "params": {
          "data": "The updated token data.",
          "tokenId": "The token ID of the NFT to be updated."
        }
      }
    },
    "title": "UsernameNFT",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "available(string)": {
        "notice": "Checks if a given name is available for registration."
      },
      "getDisplayName(uint256)": {
        "notice": "Returns the display name for a given address."
      },
      "isExpired(uint256)": {
        "notice": "Checks if a given tokenId is expired."
      },
      "mint(address,string,uint96)": {
        "notice": "Mints a new NFT for a given name if it's available."
      },
      "nameExpires(uint256)": {
        "notice": "Returns the Unix timestamp of when the given tokenId expires."
      },
      "nameToTokenId(string)": {
        "notice": "Converts a given name to its corresponding token ID."
      },
      "resolveAddress(address)": {
        "notice": "Returns the username for a given resolved address."
      },
      "resolveName(string)": {
        "notice": "Returns the resolved address for a given username."
      },
      "setController(address)": {
        "notice": "Sets the controller contract address."
      },
      "tokenURI(uint256)": {
        "notice": "Returns the URI for a given NFT."
      },
      "updatePrimaryName(uint256)": {
        "notice": "Updates the primary name for a given resolved address."
      },
      "updateResolveAddress(uint256,address)": {
        "notice": "Updates the resolved address for a given NFT."
      },
      "updateTokenData(uint256,(uint96,uint96,address,string))": {
        "notice": "Updates the token data for a given NFT."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 138,
        "contract": "contracts/UsernameNFT.sol:UsernameNFT",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 140,
        "contract": "contracts/UsernameNFT.sol:UsernameNFT",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 144,
        "contract": "contracts/UsernameNFT.sol:UsernameNFT",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 148,
        "contract": "contracts/UsernameNFT.sol:UsernameNFT",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 152,
        "contract": "contracts/UsernameNFT.sol:UsernameNFT",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 158,
        "contract": "contracts/UsernameNFT.sol:UsernameNFT",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 7,
        "contract": "contracts/UsernameNFT.sol:UsernameNFT",
        "label": "_owner",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 3030,
        "contract": "contracts/UsernameNFT.sol:UsernameNFT",
        "label": "domain",
        "offset": 0,
        "slot": "7",
        "type": "t_string_storage"
      },
      {
        "astId": 3050,
        "contract": "contracts/UsernameNFT.sol:UsernameNFT",
        "label": "totalSupply",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 3053,
        "contract": "contracts/UsernameNFT.sol:UsernameNFT",
        "label": "controller",
        "offset": 0,
        "slot": "9",
        "type": "t_contract(UsernameController)3010"
      },
      {
        "astId": 3067,
        "contract": "contracts/UsernameNFT.sol:UsernameNFT",
        "label": "tokenData",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_struct(TokenData)3062_storage)"
      },
      {
        "astId": 3071,
        "contract": "contracts/UsernameNFT.sol:UsernameNFT",
        "label": "primaryNameTokenId",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(UsernameController)3010": {
        "encoding": "inplace",
        "label": "contract UsernameController",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(TokenData)3062_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct UsernameNFT.TokenData)",
        "numberOfBytes": "32",
        "value": "t_struct(TokenData)3062_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(TokenData)3062_storage": {
        "encoding": "inplace",
        "label": "struct UsernameNFT.TokenData",
        "members": [
          {
            "astId": 3055,
            "contract": "contracts/UsernameNFT.sol:UsernameNFT",
            "label": "mintTimestamp",
            "offset": 0,
            "slot": "0",
            "type": "t_uint96"
          },
          {
            "astId": 3057,
            "contract": "contracts/UsernameNFT.sol:UsernameNFT",
            "label": "duration",
            "offset": 12,
            "slot": "0",
            "type": "t_uint96"
          },
          {
            "astId": 3059,
            "contract": "contracts/UsernameNFT.sol:UsernameNFT",
            "label": "resolveAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 3061,
            "contract": "contracts/UsernameNFT.sol:UsernameNFT",
            "label": "name",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint96": {
        "encoding": "inplace",
        "label": "uint96",
        "numberOfBytes": "12"
      }
    }
  }
}